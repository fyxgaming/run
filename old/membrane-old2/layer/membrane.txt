/**
 * membrane.js
 *
 * A smarter proxy for jigs
 *
 * Proxy is to Membrane as a Handler is to a Layer
 */

// ------------------------------------------------------------------------------------------------
// Globals
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Membrane
// ------------------------------------------------------------------------------------------------

class Membrane {
  constructor (target) {
    this._layers = { }
    this._layers._immutable = false

    this._layers._codeMethods = true

    // Layers = [Admin, Errors, Reads, ...]
    // For each layer ... is enabled?
    // Makes testing layers difficult

    return new Proxy(target, this)
  }

  apply (target, thisArg, args) { }
  construct (target, args, newTarget) { }
  defineProperty (target, prop, desc) { }
  deleteProperty (target, prop) { }

  get (target, prop, receiver) {
    // Run getters on the target
    if (isIntrinsicGetter(target, prop)) return super.get(target, prop, target)

    // If not a getter, get the value.
    const value = super.get(target, prop, receiver)

    // If not a method, then pass through
    if (typeof target[prop] !== 'function') return value

    // If not an intrinsic method, then pass through
    if (!isIntrinsicMethod(target, prop)) return value

    // If we've already wrapped this intrinsic method, then return that
    if (INTRINSIC_METHODS.has(value)) return INTRINSIC_METHODS.get(value)

    // Wrap the intrinsic method and save it for later
    const proxy = new Proxy(value, new IntrinsicMethod())
    INTRINSIC_METHODS.set(value, proxy)
    return proxy
  }

  getOwnPropertyDescriptor (target, prop) { }
  getPrototypeOf (target) { }
  has (target, prop) { }
  isExtensible (target) { }
  ownKeys (target) { }
  preventExtensions (target) { }
  set (target, prop, value, receiver) { }
  setPrototypeOf (target, prototype) { }
}

// ------------------------------------------------------------------------------------------------
// Layer
// ------------------------------------------------------------------------------------------------

class Layer {
  // Standard proxy handlers
  _apply (target, thisArg, args) { return Reflect.apply(target, thisArg, args) }
  _construct (target, args, newTarget) { return Reflect.construct(target, args, newTarget) }
  _defineProperty (target, prop, desc) { return Reflect.defineProperty(target, prop, desc) }
  _deleteProperty (target, prop) { return Reflect.deleteProperty(target, prop) }
  _get (target, prop, receiver) { return Reflect.get(target, prop, receiver) }
  _getOwnPropertyDescriptor (target, prop) { return Reflect.getOwnPropertyDescriptor(target, prop) }
  _getPrototypeOf (target) { return Reflect.getPrototypeOf(target) }
  _has (target, prop) { return Reflect.has(target, prop) }
  _isExtensible (target) { return Reflect.isExtensible(target) }
  _ownKeys (target) { return Reflect.ownKeys(target) }
  _preventExtensions (target) { return Reflect.preventExtensions(target) }
  _set (target, prop, value, receiver) { return Reflect.set(target, prop, value, receiver) }
  _setPrototypeOf (target, prototype) { return Reflect.setPrototypeOf(target, prototype) }

  // Special handlers for intrinsics: Set, Map, and Uint8Array
  _nativeGetMethod () { } // Get any method
  _nativeGet (value) { return value } // get(), forEach()
  _nativeSet (value) { return value } // add(), set(), etc.
  _intrinsicInnerRead () { } // has(), includes()
  _intrinsicInnerUpdate () {} // clear(), delete(), etc.
}

// ------------------------------------------------------------------------------------------------

Membrane._Layer = Layer

module.exports = Membrane
