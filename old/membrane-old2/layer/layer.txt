const Immutable = require('../immutable')
const Membrane = require('../membrane')
const { _assert } = require('../../util/misc')

// How to do next?
function _get (next, target, prop, receiver) {
  const value = next._get(target)
}

class OptionalLayer {

}

// How does intrinsics hook itself into the layer chain?

class Core {
  // Standard proxy handlers
  _apply (target, thisArg, args) { return Reflect.apply(target, thisArg, args) }
  _construct (target, args, newTarget) { return Reflect.construct(target, args, newTarget) }
  _defineProperty (target, prop, desc) { return Reflect.defineProperty(target, prop, desc) }
  _deleteProperty (target, prop) { return Reflect.deleteProperty(target, prop) }
  _get (target, prop, receiver) { return Reflect.get(target, prop, receiver) }
  _getOwnPropertyDescriptor (target, prop) { return Reflect.getOwnPropertyDescriptor(target, prop) }
  _getPrototypeOf (target) { return Reflect.getPrototypeOf(target) }
  _has (target, prop) { return Reflect.has(target, prop) }
  _isExtensible (target) { return Reflect.isExtensible(target) }
  _ownKeys (target) { return Reflect.ownKeys(target) }
  _preventExtensions (target) { return Reflect.preventExtensions(target) }
  _set (target, prop, value, receiver) { return Reflect.set(target, prop, value, receiver) }
  _setPrototypeOf (target, prototype) { return Reflect.setPrototypeOf(target, prototype) }

  // Special handlers for intrinsics: Set, Map, and Uint8Array
  _nativeGetMethod () { } // Get any method
  _nativeGet (value) { return value } // get(), forEach()
  _nativeSet (value) { return value } // add(), set(), etc.
  _nativeInnerRead () { } // has(), includes()
  _nativeInnerUpdate () { } // clear(), delete(), etc.
}

class Layer {
  constructor (inner) { _assert(inner); this._inner = inner }

  // Standard proxy handlers
  _apply (target, thisArg, args) { return this._inner.apply(target, thisArg, args) }
  _construct (target, args, newTarget) { return Reflect.construct(target, args, newTarget) }
  _defineProperty (target, prop, desc) { return Reflect.defineProperty(target, prop, desc) }
  _deleteProperty (target, prop) { return Reflect.deleteProperty(target, prop) }
  _get (target, prop, receiver) { return Reflect.get(target, prop, receiver) }
  _getOwnPropertyDescriptor (target, prop) { return Reflect.getOwnPropertyDescriptor(target, prop) }
  _getPrototypeOf (target) { return Reflect.getPrototypeOf(target) }
  _has (target, prop) { return Reflect.has(target, prop) }
  _isExtensible (target) { return Reflect.isExtensible(target) }
  _ownKeys (target) { return Reflect.ownKeys(target) }
  _preventExtensions (target) { return Reflect.preventExtensions(target) }
  _set (target, prop, value, receiver) { return Reflect.set(target, prop, value, receiver) }
  _setPrototypeOf (target, prototype) { return Reflect.setPrototypeOf(target, prototype) }

  // Special handlers for intrinsics: Set, Map, and Uint8Array
  _nativeGetMethod () { this._inner._nativeGetMethod() } // Get any method
  _nativeGet (value) { return this._inner._nativeGet(value) } // get(), forEach()
  _nativeSet (value) { return this._inner._nativeSet(value) } // add(), set(), etc.
  _nativeInnerRead () { this._inner._nativeInnerRead() } // has(), includes()
  _nativeInnerUpdate () { this._inner._nativeInnerUpdate() } // clear(), delete(), etc.
}
