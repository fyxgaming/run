/**
 * io.js
 *
 * A base class membrane that is able to transform every object going in or object leaving
 */

const Membrane = require('./membrane')
const Immutable = require('../immutable')

// ------------------------------------------------------------------------------------------------
// IO
// ------------------------------------------------------------------------------------------------

class IO extends Membrane {
  // Desc value needs to be input
  // Getter/Setter don't need anything ... handled below
  defineProperty (target, prop, desc) { return Reflect.defineProperty(target, prop, desc) }

  // Simple values passed through
  // Object values need to be wrapped as output
  // Functions? ... Needs to be wrapped so that args/ret values handled
  // What about the function itself? Needs to be wrapped. Dont stably.
  // Wrap function, then do output
  // Base _input/_output needs to unwrap functions after the return
  // Deep replace?
  get (target, prop, receiver) { return Reflect.get(target, prop) }

  // Value needs to be output
  // Getter/Setter don't need anything ... handled in get/set
  getOwnPropertyDescriptor (target, prop) { return Reflect.getOwnPropertyDescriptor(target, prop) }

  // Value needs to be input
  // If setter?
  set (target, prop, value, receiver) { return Reflect.set(target, prop, value, receiver) }

  // Default IO implementation is a pass through
  _input (x) { return x }
  _output (x) { return x }
}

// ------------------------------------------------------------------------------------------------

class IOMethod extends Membrane {
  //
  apply (target, thisArg, args) {
  }
}

// Pass in a function
// Anything get is immutable
// So really, this is just for intrinsics!!

// Can we convert intrinsics to call get?

// All membranes have input and output ... Then can work with membrane

// Final question ... when is input and output called? How do derived membranes access it?

// ------------------------------------------------------------------------------------------------

module.exports = IO
