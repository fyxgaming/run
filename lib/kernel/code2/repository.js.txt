/**
 * repository.js
 *
 * Manages local code so as not to create duplicate jigs
 */

const Log = require('../../util/log')
const { _assert, _parent } = require('../../util/misc')
const Sandbox = require('../../util/sandbox')

// ------------------------------------------------------------------------------------------------
// Globals
// ------------------------------------------------------------------------------------------------

const TAG = 'Repository'

const NATIVE_CODE = new Map() // Name -> Code

// ------------------------------------------------------------------------------------------------
// _installNative
// ------------------------------------------------------------------------------------------------

function _installNative (T, isCodeJig) {
  Log._debug(TAG, 'Install native', _text(T))

  // Check that the native code is valid
  _assert(typeof T === 'function')
  _assert(!_parent(T))

  // Check if we've already installed this code
  const Prev = NATIVE_CODE.get(T.name)
  if (Prev) return Prev

  // Sandbox the code
  const [S, SGlobal] = Sandbox._sandboxType(T, {}, true /* native */)

  const _src = `class ${T.name} { [native code] }`
  const metadata = { _src, _T: T, _S: S, _repository: this, _native: true }

  // Add native code
  const location = `native://${T.name}`
  this._locationToCode.set(location, S)
  this._localToCode.set(T, S)
  this._sandboxToCode.set(S, S)
  if (options._dep) this._deps.add(location)
  CODE_METADATA.set(S, metadata)

  // Native code cannot have props. Their deps are applied directly.
  Object.assign(SGlobal, T.deps)

  // If in cover mode, after installing the code and deps, delete the props
  if (process.env.COVER) {
    Object.keys(S).forEach(key => { delete S[key] })
  }

  // Copy specific properties
  if (_hasOwnProperty(T, 'sealed')) _setOwnProperty(S, 'sealed', T.sealed)

  // Set bindings
  S.origin = location
  S.location = location
  S.nonce = 0
  S.owner = null
  S.satoshis = null

  // Native code must still have Code prototype to allow Jig and Berry extensions
  if (options._dep) {
    const CodeJig = require('./code-jig.js.txt')
    Object.setPrototypeOf(S, CodeJig.prototype)
  } else {
    S.toString = () => _src
  }

  // Freeze the sandbox
  _deepVisit(S, x => Object.freeze(x))
  _deepVisit(S.prototype, x => Object.freeze(x))

  return S
}

// ------------------------------------------------------------------------------------------------

module.exports = Repository
