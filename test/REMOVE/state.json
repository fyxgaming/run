{
    "jig://ac686b2347ba6cd955f21bcd8db6678038f03a36e39a3d1a522d46106f31bfaa_o2": {
        "kind": "code",
        "props": {
            "decimals": 6,
            "deps": {
                "CashierConfig": {
                    "$jig": "62a333e72d5028fd06367a1ed61ef71c222a6827e61dc3ad61e50e8d88b6b860_o1"
                },
                "Jig": {
                    "$jig": "native://Jig"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "Token": {
                    "$jig": "_o1"
                }
            },
            "hash": "e4f6f2ba93d01a522929eb02558145ca4f65ccda35ed142f1a18111c4f931127",
            "location": "_o2",
            "nonce": 1,
            "origin": "_o2",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class KronoCoin extends Token {\n    setPayment(payment) {\n        this.payment = payment;\n    }\n\n    static mint(amount) {\n        const coin = super.mint(amount);\n        coin.setPayment(caller);\n        return coin;\n    }\n    \n    static transfer(owner) {\n        this.owner = owner;\n    }\n\n    toObject(skipKeys = [], visited = new Set()) {\n        if(visited.has(this)) return;\n        visited.add(this);\n        return KronoClass.cloneChildren(this, skipKeys, visited);\n    }\n\n    static async postDeploy(deployer) {\n        console.log('Token Owner:', this.deps.CashierConfig.address);\n        this.transfer(this.deps.CashierConfig.address);\n        await this.sync();\n    }\n}",
        "version": "04"
    },
    "jig://edc0a0d7de11d70f7169df5730bf1357f1fffb10e0a87dfc0f558fe08f6fb639_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "KronoJig": {
                    "$jig": "1e714f99c065eb795a90701ce5a225e2a422f21d85bf573b34dde50700167175_o1"
                }
            },
            "hash": "f8ea373e82d6f48e0a3b5b73df8b1f5f99e74fc35d7ff3ff32b990836040b925",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class JigMap extends KronoJig {\n    init(map) {\n        this.map = map || {};\n    }\n\n    has(key) {\n        return Boolean(this.map[key]);\n    }\n\n    set(key, value) {\n        this.map[key] = value;\n    }\n\n    unset(key) {\n        delete this.map[key];\n    }\n}",
        "version": "04"
    },
    "jig://c04b35de85f809096b5064ed73bc92b805bfbd3fea338cb12ff2543930d35154_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "KronoJig": {
                    "$jig": "1e714f99c065eb795a90701ce5a225e2a422f21d85bf573b34dde50700167175_o1"
                }
            },
            "hash": "26513af3723f8199f90052ccb9cda953b060f1248a818ce54d0a891138fd66b6",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class JigSet extends KronoJig {\n    init(values = []) {\n        this.clear();\n        values.forEach(value => this.index[value] = true)\n    }\n\n    clear() {\n        this.index = {};\n    }\n\n    has(value) {\n        return Boolean(this.index[value]);\n    }\n\n    add(value) {\n        if (!this.index[value]) {\n            this.index[value] = true;\n        }\n    }\n\n    delete(value) {\n        delete this.index[value];\n    }\n\n    values() {\n        return Object.keys(this.index);\n    }\n}",
        "version": "04"
    },
    "jig://a0f765a438f5eb39a874ea118f3de9694ace047590a8081bb7b5e80ee02a42f1_o1": {
        "kind": "code",
        "props": {
            "deps": {},
            "hash": "1b16f1e34357db3cf2aaad4062db079ec71348ac4edb57e20e9c670cfb8d3dff",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class MockDice {\n    constructor(outcomes) {\n        this.outcomes = outcomes;\n        this.counter = 0;\n    }\n\n    roll() {\n        return this.outcomes[this.counter++ % this.outcomes.length];\n    }\n}",
        "version": "04"
    },
    "jig://d1ba99442ccca0eba6d0f3f2337d2cf16c43b03c28f3c63686a28b7abd22b351_o1": {
        "kind": "code",
        "props": {
            "agents": {
                "coin": {
                    "$jig": "62bec1d8cd5b0d5e08708049e52f693721bd454e6383fb766c256403c1fbba83_o1"
                }
            },
            "deps": {
                "Agent": {
                    "$jig": "820231376f5cdabd943eff6764c4b6fcf637b6c9c23c71ba571307fa2182f190_o1"
                },
                "Dice": {
                    "$jig": "301527c6508489f3fa79f77173aa3f6c76711b096bcdb49e9f2cfcdb6d784ff7_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "JigMap": {
                    "$jig": "edc0a0d7de11d70f7169df5730bf1357f1fffb10e0a87dfc0f558fe08f6fb639_o1"
                },
                "JigSet": {
                    "$jig": "c04b35de85f809096b5064ed73bc92b805bfbd3fea338cb12ff2543930d35154_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "KronoCoin": {
                    "$dup": [
                        "agents",
                        "coin"
                    ]
                },
                "KronoError": {
                    "$jig": "1e5d1b3058ca2fe63691f1be521afac14ab7b30c124d88506af06792c3c894fc_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "KronoJig": {
                    "$jig": "1e714f99c065eb795a90701ce5a225e2a422f21d85bf573b34dde50700167175_o1"
                },
                "MockDice": {
                    "$jig": "a0f765a438f5eb39a874ea118f3de9694ace047590a8081bb7b5e80ee02a42f1_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                }
            },
            "hash": "e03f90f69642ae10d8ac236ad1738084bcff418b6b5e56893e32ba41510cae14",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "realm": "local",
            "satoshis": 0
        },
        "src": "class Catalog { \n    static preDeploy(deployer) {\n        this.agents = {\n            \"coin\": Catalog.deps.KronoCoin,\n        }\n    }\n}",
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o2": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                9,
                9,
                11
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug",
            "hpBonus": 0,
            "level": 1,
            "location": "_o2",
            "nonce": 1,
            "origin": "_o2",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                36,
                35,
                40,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o3": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                9,
                9,
                11
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug",
            "hpBonus": 0,
            "level": 1,
            "location": "_o3",
            "nonce": 1,
            "origin": "_o3",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                36,
                35,
                40,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o4": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                9,
                9,
                11
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug",
            "hpBonus": 0,
            "level": 1,
            "location": "_o4",
            "nonce": 1,
            "origin": "_o4",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                36,
                35,
                40,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o5": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                9,
                9,
                11
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug",
            "hpBonus": 0,
            "level": 1,
            "location": "_o5",
            "nonce": 1,
            "origin": "_o5",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                36,
                35,
                40,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o6": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                9,
                9,
                11
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug",
            "hpBonus": 0,
            "level": 1,
            "location": "_o6",
            "nonce": 1,
            "origin": "_o6",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                36,
                35,
                40,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o7": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                9,
                9,
                11
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug",
            "hpBonus": 0,
            "level": 1,
            "location": "_o7",
            "nonce": 1,
            "origin": "_o7",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                36,
                35,
                40,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o8": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                9,
                9,
                11
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug",
            "hpBonus": 0,
            "level": 1,
            "location": "_o8",
            "nonce": 1,
            "origin": "_o8",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                36,
                35,
                40,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o9": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                9,
                9,
                11
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug",
            "hpBonus": 0,
            "level": 1,
            "location": "_o9",
            "nonce": 1,
            "origin": "_o9",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                36,
                35,
                40,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o10": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                9,
                9,
                11
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug",
            "hpBonus": 0,
            "level": 1,
            "location": "_o10",
            "nonce": 1,
            "origin": "_o10",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                36,
                35,
                40,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o12": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
            },
            "location": "_o12",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o12",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o13": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
            },
            "location": "_o13",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o13",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o14": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
            },
            "location": "_o14",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o14",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o15": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
            },
            "location": "_o15",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o15",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o16": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
            },
            "location": "_o16",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o16",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o17": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
            },
            "location": "_o17",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o17",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o18": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
            },
            "location": "_o18",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o18",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o19": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
            },
            "location": "_o19",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o19",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o20": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
            },
            "location": "_o20",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o20",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o1": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Gnoll Hunter",
            "hpBonus": 0,
            "level": 2,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                34,
                43,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o2": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Gnoll Hunter",
            "hpBonus": 0,
            "level": 2,
            "location": "_o2",
            "nonce": 1,
            "origin": "_o2",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                34,
                43,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o3": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Gnoll Hunter",
            "hpBonus": 0,
            "level": 2,
            "location": "_o3",
            "nonce": 1,
            "origin": "_o3",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                34,
                43,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o4": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Gnoll Hunter",
            "hpBonus": 0,
            "level": 2,
            "location": "_o4",
            "nonce": 1,
            "origin": "_o4",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                34,
                43,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o5": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Gnoll Hunter",
            "hpBonus": 0,
            "level": 2,
            "location": "_o5",
            "nonce": 1,
            "origin": "_o5",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                34,
                43,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o6": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Gnoll Hunter",
            "hpBonus": 0,
            "level": 2,
            "location": "_o6",
            "nonce": 1,
            "origin": "_o6",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                34,
                43,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o7": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Gnoll Hunter",
            "hpBonus": 0,
            "level": 2,
            "location": "_o7",
            "nonce": 1,
            "origin": "_o7",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                34,
                43,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o8": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Gnoll Hunter",
            "hpBonus": 0,
            "level": 2,
            "location": "_o8",
            "nonce": 1,
            "origin": "_o8",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                34,
                43,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o9": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Gnoll Hunter",
            "hpBonus": 0,
            "level": 2,
            "location": "_o9",
            "nonce": 1,
            "origin": "_o9",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                34,
                43,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o10": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Gnoll Hunter",
            "hpBonus": 0,
            "level": 2,
            "location": "_o10",
            "nonce": 1,
            "origin": "_o10",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                34,
                43,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o11": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
            },
            "location": "_o11",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o11",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o12": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
            },
            "location": "_o12",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o12",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o13": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
            },
            "location": "_o13",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o13",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o14": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
            },
            "location": "_o14",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o14",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o15": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
            },
            "location": "_o15",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o15",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o16": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
            },
            "location": "_o16",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o16",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o17": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
            },
            "location": "_o17",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o17",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o18": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
            },
            "location": "_o18",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o18",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o19": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
            },
            "location": "_o19",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o19",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://741f70c911a1488b0f76c9292a174f8e4be666c2a62b10181db0a6496c2c89b2_o20": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
            },
            "location": "_o20",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o20",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o1": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Quasit",
            "hpBonus": 0,
            "level": 3,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                6,
                12,
                35,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o2": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Quasit",
            "hpBonus": 0,
            "level": 3,
            "location": "_o2",
            "nonce": 1,
            "origin": "_o2",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                6,
                12,
                35,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o3": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Quasit",
            "hpBonus": 0,
            "level": 3,
            "location": "_o3",
            "nonce": 1,
            "origin": "_o3",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                6,
                12,
                35,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o4": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Quasit",
            "hpBonus": 0,
            "level": 3,
            "location": "_o4",
            "nonce": 1,
            "origin": "_o4",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                6,
                12,
                35,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o5": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Quasit",
            "hpBonus": 0,
            "level": 3,
            "location": "_o5",
            "nonce": 1,
            "origin": "_o5",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                6,
                12,
                35,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o6": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Quasit",
            "hpBonus": 0,
            "level": 3,
            "location": "_o6",
            "nonce": 1,
            "origin": "_o6",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                6,
                12,
                35,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o7": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Quasit",
            "hpBonus": 0,
            "level": 3,
            "location": "_o7",
            "nonce": 1,
            "origin": "_o7",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                6,
                12,
                35,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o8": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Quasit",
            "hpBonus": 0,
            "level": 3,
            "location": "_o8",
            "nonce": 1,
            "origin": "_o8",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                6,
                12,
                35,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o9": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Quasit",
            "hpBonus": 0,
            "level": 3,
            "location": "_o9",
            "nonce": 1,
            "origin": "_o9",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                6,
                12,
                35,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o10": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Quasit",
            "hpBonus": 0,
            "level": 3,
            "location": "_o10",
            "nonce": 1,
            "origin": "_o10",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                6,
                12,
                35,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o11": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
            },
            "location": "_o11",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o11",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o12": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
            },
            "location": "_o12",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o12",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o13": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
            },
            "location": "_o13",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o13",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o14": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
            },
            "location": "_o14",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o14",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o15": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
            },
            "location": "_o15",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o15",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o16": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
            },
            "location": "_o16",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o16",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o17": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
            },
            "location": "_o17",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o17",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o18": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
            },
            "location": "_o18",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o18",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o19": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
            },
            "location": "_o19",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o19",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://db4de2bb204042aab0fa688195746f3bdd60576a18ea6d21dbd27d1dc6a8d40d_o20": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
            },
            "location": "_o20",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o20",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o1": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                8,
                10,
                12
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Shaman",
            "hpBonus": 0,
            "level": 4,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                3,
                4,
                14,
                47,
                28,
                45,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o2": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                8,
                10,
                12
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Shaman",
            "hpBonus": 0,
            "level": 4,
            "location": "_o2",
            "nonce": 1,
            "origin": "_o2",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                3,
                4,
                14,
                47,
                28,
                45,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o3": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                8,
                10,
                12
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Shaman",
            "hpBonus": 0,
            "level": 4,
            "location": "_o3",
            "nonce": 1,
            "origin": "_o3",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                3,
                4,
                14,
                47,
                28,
                45,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o4": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                8,
                10,
                12
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Shaman",
            "hpBonus": 0,
            "level": 4,
            "location": "_o4",
            "nonce": 1,
            "origin": "_o4",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                3,
                4,
                14,
                47,
                28,
                45,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o5": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                8,
                10,
                12
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Shaman",
            "hpBonus": 0,
            "level": 4,
            "location": "_o5",
            "nonce": 1,
            "origin": "_o5",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                3,
                4,
                14,
                47,
                28,
                45,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o6": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                8,
                10,
                12
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Shaman",
            "hpBonus": 0,
            "level": 4,
            "location": "_o6",
            "nonce": 1,
            "origin": "_o6",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                3,
                4,
                14,
                47,
                28,
                45,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o7": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                8,
                10,
                12
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Shaman",
            "hpBonus": 0,
            "level": 4,
            "location": "_o7",
            "nonce": 1,
            "origin": "_o7",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                3,
                4,
                14,
                47,
                28,
                45,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o8": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                8,
                10,
                12
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Shaman",
            "hpBonus": 0,
            "level": 4,
            "location": "_o8",
            "nonce": 1,
            "origin": "_o8",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                3,
                4,
                14,
                47,
                28,
                45,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o9": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                8,
                10,
                12
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Shaman",
            "hpBonus": 0,
            "level": 4,
            "location": "_o9",
            "nonce": 1,
            "origin": "_o9",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                3,
                4,
                14,
                47,
                28,
                45,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o10": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                8,
                10,
                12
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Shaman",
            "hpBonus": 0,
            "level": 4,
            "location": "_o10",
            "nonce": 1,
            "origin": "_o10",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                3,
                4,
                14,
                47,
                28,
                45,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o11": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
            },
            "location": "_o11",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o11",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o12": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
            },
            "location": "_o12",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o12",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o13": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
            },
            "location": "_o13",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o13",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o14": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
            },
            "location": "_o14",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o14",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o15": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
            },
            "location": "_o15",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o15",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o16": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
            },
            "location": "_o16",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o16",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o17": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
            },
            "location": "_o17",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o17",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o18": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
            },
            "location": "_o18",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o18",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o19": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
            },
            "location": "_o19",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o19",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://058eb78864dfda608abc26629c050382f84f938bff0802d2049373a31fe86d65_o20": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
            },
            "location": "_o20",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o20",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o1": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Crusher",
            "hpBonus": 0,
            "level": 5,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                15,
                35,
                29,
                40,
                46,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o2": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Crusher",
            "hpBonus": 0,
            "level": 5,
            "location": "_o2",
            "nonce": 1,
            "origin": "_o2",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                15,
                35,
                29,
                40,
                46,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o3": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Crusher",
            "hpBonus": 0,
            "level": 5,
            "location": "_o3",
            "nonce": 1,
            "origin": "_o3",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                15,
                35,
                29,
                40,
                46,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o4": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Crusher",
            "hpBonus": 0,
            "level": 5,
            "location": "_o4",
            "nonce": 1,
            "origin": "_o4",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                15,
                35,
                29,
                40,
                46,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o5": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Crusher",
            "hpBonus": 0,
            "level": 5,
            "location": "_o5",
            "nonce": 1,
            "origin": "_o5",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                15,
                35,
                29,
                40,
                46,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o6": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Crusher",
            "hpBonus": 0,
            "level": 5,
            "location": "_o6",
            "nonce": 1,
            "origin": "_o6",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                15,
                35,
                29,
                40,
                46,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o7": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Crusher",
            "hpBonus": 0,
            "level": 5,
            "location": "_o7",
            "nonce": 1,
            "origin": "_o7",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                15,
                35,
                29,
                40,
                46,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o8": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Crusher",
            "hpBonus": 0,
            "level": 5,
            "location": "_o8",
            "nonce": 1,
            "origin": "_o8",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                15,
                35,
                29,
                40,
                46,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o9": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Crusher",
            "hpBonus": 0,
            "level": 5,
            "location": "_o9",
            "nonce": 1,
            "origin": "_o9",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                15,
                35,
                29,
                40,
                46,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o10": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                10,
                10,
                10
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug Crusher",
            "hpBonus": 0,
            "level": 5,
            "location": "_o10",
            "nonce": 1,
            "origin": "_o10",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                15,
                35,
                29,
                40,
                46,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o11": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
            },
            "location": "_o11",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o11",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o12": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
            },
            "location": "_o12",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o12",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o13": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
            },
            "location": "_o13",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o13",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o14": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
            },
            "location": "_o14",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o14",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o15": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
            },
            "location": "_o15",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o15",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o16": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
            },
            "location": "_o16",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o16",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o17": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
            },
            "location": "_o17",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o17",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o18": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
            },
            "location": "_o18",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o18",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o19": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
            },
            "location": "_o19",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o19",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://fc5bee95203c5de96d322e5dd22b0063fd92090e96a520d157c54e6c2bd2f010_o20": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
            },
            "location": "_o20",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o20",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o1": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                11,
                11,
                8
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Yason",
            "hpBonus": 0,
            "level": 6,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                13,
                33,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o2": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                11,
                11,
                8
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Yason",
            "hpBonus": 0,
            "level": 6,
            "location": "_o2",
            "nonce": 1,
            "origin": "_o2",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                13,
                33,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o3": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                11,
                11,
                8
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Yason",
            "hpBonus": 0,
            "level": 6,
            "location": "_o3",
            "nonce": 1,
            "origin": "_o3",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                13,
                33,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o4": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                11,
                11,
                8
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Yason",
            "hpBonus": 0,
            "level": 6,
            "location": "_o4",
            "nonce": 1,
            "origin": "_o4",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                13,
                33,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o5": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                11,
                11,
                8
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Yason",
            "hpBonus": 0,
            "level": 6,
            "location": "_o5",
            "nonce": 1,
            "origin": "_o5",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                13,
                33,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o6": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                11,
                11,
                8
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Yason",
            "hpBonus": 0,
            "level": 6,
            "location": "_o6",
            "nonce": 1,
            "origin": "_o6",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                13,
                33,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o7": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                11,
                11,
                8
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Yason",
            "hpBonus": 0,
            "level": 6,
            "location": "_o7",
            "nonce": 1,
            "origin": "_o7",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                13,
                33,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o8": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                11,
                11,
                8
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Yason",
            "hpBonus": 0,
            "level": 6,
            "location": "_o8",
            "nonce": 1,
            "origin": "_o8",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                13,
                33,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o9": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                11,
                11,
                8
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Yason",
            "hpBonus": 0,
            "level": 6,
            "location": "_o9",
            "nonce": 1,
            "origin": "_o9",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                13,
                33,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o10": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                11,
                11,
                8
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 4,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Yason",
            "hpBonus": 0,
            "level": 6,
            "location": "_o10",
            "nonce": 1,
            "origin": "_o10",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                13,
                33,
                37
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o11": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
            },
            "location": "_o11",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o11",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o12": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
            },
            "location": "_o12",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o12",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o13": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
            },
            "location": "_o13",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o13",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o14": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
            },
            "location": "_o14",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o14",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o15": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
            },
            "location": "_o15",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o15",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o16": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
            },
            "location": "_o16",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o16",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o17": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
            },
            "location": "_o17",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o17",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o18": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
            },
            "location": "_o18",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o18",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o19": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
            },
            "location": "_o19",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o19",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://bacb3c8740b1629b1c93b84b73d8fe4ae732617c6e925329a846b2d62989180c_o20": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
            },
            "location": "_o20",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o20",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://1a794e96f189367dbbd219b84350c28199a2a7604f6f2f9fd3789c2d98fac4bc_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "CashierConfig": {
                    "$jig": "62a333e72d5028fd06367a1ed61ef71c222a6827e61dc3ad61e50e8d88b6b860_o1"
                },
                "ClientAgent": {
                    "$jig": "edfffdca8b9089c30c646135097bc158f6dfb5564703bac027eb4086ca929609_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "MintConfig": {
                    "$jig": "79f97747efe83557894d6dc05815c56700400af1b04741a1518e25699aaee42d_o1"
                },
                "QueueConfig": {
                    "$jig": "e82c09430b7dd521018b7279fc275284255c794a1d1dc367d8c7af99221b1564_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "XpTest": {
                    "$jig": "6fff3cb0e071a2b684b4a4a26e470bae5a50df06ec0276e6610daba4fb4b2328_o1"
                }
            },
            "hash": "94c60efd238d8610852485a65352eb07b6e57986179b4c5415739b1c2f8d24ab",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class TestClientAgent extends ClientAgent {\n    async init() {\n        await super.init();\n\n        this.eventHandlers.set('RedeemXP', this.RedeemXP);\n        this.eventHandlers.set('RedeemFunds', this.RedeemFunds);\n    }\n\n    async RedeemXP(request) {\n        const { fighterLocation, amount } = request;\n        const fighter = await this.wallet.loadJig(fighterLocation);\n        const message = this.wallet.buildMessage({\n            to: [MintConfig.pubkey],\n            subject: 'RedeemXPRequest',\n            payload: JSON.stringify({\n                owner: this.address, \n                fighterLocation, \n                amount\n            })\n        });\n\n\n        const xpTest = await this.blockchain.sendMessage(message, MintConfig.postTo);\n        console.log('XPTest:', JSON.stringify(xpTest));\n        const xp = await this.wallet.loadJig(xpTest.location);\n        console.log('XPTest loaded:', xp && xp.toObject());\n        fighter.recordVictory(xp);\n        await fighter.sync();\n        this.onFighter(fighter);\n        return fighter.toObject();\n    }\n\n    async RedeemFunds() {\n        const message = this.wallet.buildMessage({\n            to: [CashierConfig.pubkey],\n            subject: 'FundsRequest',\n            payload: JSON.stringify({dest: this.address})\n        });\n        await this.blockchain.sendMessage(message);\n    }\n}",
        "version": "04"
    },
    "jig://7d7462af59d9e3b3aa53fa26ec1710cea434344e51e5651b66a8030866bdf180_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BotFighter": {
                    "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
                },
                "BotValidatorAgent": {
                    "$jig": "7ad687021fc8cef1851fd4cf0a042808831efa641ce40d2309cf7d2fe67e7a55_o1"
                },
                "CommonItems": {
                    "$jig": "9eead79326a23805f136f37491a06c015d6b2f161d944d1848a4e9c352cdc4c9_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "PracticeDagger": {
                    "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "ValidatorAgent": {
                    "$jig": "c1afc38b54f08fe0ada2023c78ee118ba4256dd9032827bb2e33ddb5f127eee5_o1"
                },
                "ValidatorConfig": {
                    "$jig": "68d4287023c42ee5fd3f800388ebe4857b40d143a454fedd369786fa29307888_o1"
                }
            },
            "fee": 0,
            "hash": "6277017cef2740be2cf12d55d3f3e811a99229163194a988115cb43e56a6d120",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "playerCount": 1,
            "reward": 0,
            "satoshis": 0,
            "tier": 2
        },
        "src": "class Bot2ValidatorAgent extends BotValidatorAgent {\n    async _selectItems(jigIndex) {\n        const weapons = jigIndex.filter(j => j.kind === KronoItem.origin && j.value.itemDef.origin === PracticeDagger.origin);\n        return [\n            await this._pickAndLock(weapons, 120),\n            await this._pickAndLock(weapons, 120)\n        ];\n    }\n\n    _selectSkills() {\n        return [Attack];\n    }\n\n    _selectAction() {\n        return 0;\n    }\n    \n    static async postDeploy (deployer) {\n        const {BotFighter, KronoItem, PracticeDagger, ValidatorConfig} = this.deps;\n        const fighterIndex = await deployer.blockchain.jigIndex(ValidatorConfig.address, BotFighter.origin);\n        const fighter = fighterIndex.find(f => f.kind === BotFighter.origin && f.value.displayName === 'Gnoll Hunter');\n        const itemIndex = await deployer.blockchain.jigIndex(ValidatorConfig.address, KronoItem.origin);\n        const item = itemIndex.find(i => i.kind === KronoItem.origin && i.value.itemDef && i.value.itemDef.origin === PracticeDagger.origin);\n        \n        let updates = 0;\n        const t = new Transaction();\n        t.update(() => {\n            const owner = ValidatorConfig.address;\n            if(!fighter) {\n                console.log('Minting BotFighters');\n                for(let i = 0; i < 10; i++) {\n                    new BotFighter({ owner, level: 2, displayName: 'Gnoll Hunter', race: 0, abilityScores: [10, 10, 10], appearance: { gender: 0, faceIdentifier: 4, hairIdentifier: 0, beardIdentifier: 1, skinToneIdentifier: 1, hairColorIdentifier: 1, eyeColorIdentifier: 0, ArmorColorIdentifier: 99 }, skills: [ 0, 34, 43, 37 ]  });\n                }\n                updates++;\n            }\n    \n            if (!item) {\n                console.log('Minting Items');\n                for(let i = 0; i<10; i++) {\n                    new KronoItem(PracticeDagger, owner);\n                }\n                updates++;\n            }\n        });\n    \n        if (updates) {\n            await t.publish();\n        } else {\n            t.rollback();\n        }\n    }\n}",
        "version": "04"
    },
    "jig://b0e178761a31cece2a2d1a9b97fc2464d5b9af123e71b65b35aba203784f01de_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BotFighter": {
                    "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
                },
                "BotValidatorAgent": {
                    "$jig": "7ad687021fc8cef1851fd4cf0a042808831efa641ce40d2309cf7d2fe67e7a55_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "DirtyFighting": {
                    "$jig": "071c311de460b9409720650f65544ff88b0d51a78b13cd2aa5fc238c587fd713_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "PinningStrike": {
                    "$jig": "382446c4f8f71c1f058ca0cddf35c3d8759c3a11643a22b5964cb4d99521b2f8_o1"
                },
                "PracticeClub": {
                    "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "ValidatorAgent": {
                    "$jig": "c1afc38b54f08fe0ada2023c78ee118ba4256dd9032827bb2e33ddb5f127eee5_o1"
                },
                "ValidatorConfig": {
                    "$jig": "68d4287023c42ee5fd3f800388ebe4857b40d143a454fedd369786fa29307888_o1"
                }
            },
            "fee": 0,
            "hash": "464027e36f57a12acaa0f6b5b2b43ac47a9a92575297ec0f19507e514120b919",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "playerCount": 1,
            "reward": 0,
            "satoshis": 0,
            "tier": 3
        },
        "src": "class Bot3ValidatorAgent extends BotValidatorAgent {    \n    async _selectItems(jigIndex) {\n        const weapons = jigIndex.filter(j => j.kind === KronoItem.origin && j.value.itemDef.origin === PracticeClub.origin);\n        return [await this._pickAndLock(weapons, 120)];\n    }\n    _selectSkills() {\n        return [Attack, PinningStrike, DirtyFighting];\n    }\n\n    _selectAction() {\n        return this.wallet.randomInt(3);\n    }\n\n    static async postDeploy (deployer) {\n        const {BotFighter, KronoItem, PracticeClub, ValidatorConfig} = this.deps;\n        const fighterIndex = await deployer.blockchain.jigIndex(ValidatorConfig.address, BotFighter.origin);\n        const fighter = fighterIndex.find(f => f.kind === BotFighter.origin && f.value.displayName === 'Quasit');\n        const itemIndex = await deployer.blockchain.jigIndex(ValidatorConfig.address, KronoItem.origin);\n        const item = itemIndex.find(i => i.value.itemDef && i.value.itemDef.origin === PracticeClub.origin);\n        \n        let updates = 0;\n        const t = new Transaction();\n        t.update(() => {\n            const owner = ValidatorConfig.address;\n            if(!fighter) {\n                console.log('Minting BotFighters');\n                for(let i = 0; i < 10; i++) {\n                    new BotFighter({ owner, level: 3, displayName: 'Quasit', race: 0, abilityScores: [10, 10, 10], appearance: { gender: 0, faceIdentifier: 5, hairIdentifier: 1, beardIdentifier: 1, skinToneIdentifier: 0, hairColorIdentifier: 0, eyeColorIdentifier: 0, ArmorColorIdentifier: 99 }, skills: [ 0, 6, 12,35, 37, 38 ] },);\n                }\n                updates++;\n            }\n\n            if (!item) {\n                console.log('Minting Items');\n                for(let i = 0; i<10; i++) {\n                    new KronoItem(PracticeClub, owner);\n                }\n                updates++;\n            }\n        });\n    \n        if (updates) {\n            await t.publish();\n        } else {\n            t.rollback();\n        }\n    }\n}",
        "version": "04"
    },
    "jig://f9931d3801a6e71c4dab3e6b2b7404d32c8d22fb5fb5a10d9dc8fc277d62227e_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BotFighter": {
                    "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
                },
                "BotValidatorAgent": {
                    "$jig": "7ad687021fc8cef1851fd4cf0a042808831efa641ce40d2309cf7d2fe67e7a55_o1"
                },
                "Burn": {
                    "$jig": "5a72febdb371ae168954f617e7a560172dae39be6f161327c46079c4c4fc4e29_o1"
                },
                "Chill": {
                    "$jig": "367bc789fea9cfc162b7339b846b7faa795bcea8ca9acbc037542a07cd215d56_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "PracticeWizardstaff": {
                    "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "Shock": {
                    "$jig": "5cab9cbc29822f044d1c131e89e3a0d9f41c6cf46a7a40d41ea6c40ebdc166c8_o1"
                },
                "ValidatorAgent": {
                    "$jig": "c1afc38b54f08fe0ada2023c78ee118ba4256dd9032827bb2e33ddb5f127eee5_o1"
                },
                "ValidatorConfig": {
                    "$jig": "68d4287023c42ee5fd3f800388ebe4857b40d143a454fedd369786fa29307888_o1"
                }
            },
            "fee": 0,
            "hash": "725db3805cb35b45c56e1eb75e52cbd41fcc318ef5a5d64803f4a369769af171",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "playerCount": 1,
            "reward": 0,
            "satoshis": 0,
            "tier": 4
        },
        "src": "class Bot4ValidatorAgent extends BotValidatorAgent {\n    async _selectItems(jigIndex) {\n        const weapons = jigIndex.filter(j => j.kind === KronoItem.origin && j.value.itemDef.origin === PracticeWizardstaff.origin);\n        return [await this._pickAndLock(weapons, 120)];\n    }\n    \n    _selectSkills() {\n        return [Burn, Chill, Shock];\n    }\n\n    _selectAction() {\n        return this.wallet.randomInt(3);\n    }\n\n    static async postDeploy (deployer) {\n        const {BotFighter, KronoItem, PracticeWizardstaff, ValidatorConfig} = this.deps;\n        const fighterIndex = await deployer.blockchain.jigIndex(ValidatorConfig.address, BotFighter.origin);\n        const fighter = fighterIndex.find(f => f.kind === BotFighter.origin && f.value.displayName === 'Bullywug Shaman');\n        const itemIndex = await deployer.blockchain.jigIndex(ValidatorConfig.address, KronoItem.origin);\n        const item = itemIndex.find(i => i.kind === KronoItem.origin && i.value.itemDef && i.value.itemDef.origin === PracticeWizardstaff.origin);\n        \n        let updates = 0;\n        const t = new Transaction();\n        t.update(() => {\n            const owner = ValidatorConfig.address;\n            if(!fighter) {\n                console.log('Minting BotFighters');\n                for(let i = 0; i < 10; i++) {\n                    new BotFighter({ owner, level: 4, displayName: 'Bullywug Shaman', race: 0, abilityScores: [8, 10, 12], appearance: { gender: 0, faceIdentifier: 5, hairIdentifier: 1, beardIdentifier: 1, skinToneIdentifier: 0, hairColorIdentifier: 0, eyeColorIdentifier: 0, ArmorColorIdentifier: 99 }, skills: [ 3, 4, 14, 47, 28, 45, 37 ] },);\n                }\n                updates++;\n            }\n    \n            if (!item) {\n                console.log('Minting Items');\n                for(let i = 0; i<10; i++) {\n                    new KronoItem(PracticeWizardstaff, owner);\n                }\n                updates++;\n            }\n        });\n    \n        if (updates) {\n            await t.publish();\n        } else {\n            t.rollback();\n        }\n    }\n}",
        "version": "04"
    },
    "jig://1925a4f3e963ad4c224f30a60cb017e887132884426bed13d7dd7f1487115932_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BotFighter": {
                    "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
                },
                "BotValidatorAgent": {
                    "$jig": "7ad687021fc8cef1851fd4cf0a042808831efa641ce40d2309cf7d2fe67e7a55_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "PracticeMaul": {
                    "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "Smite": {
                    "$jig": "eeaba59f685867d4ba186f2783d924b58916c5b1a1a6424f354c2d6d9b26849f_o1"
                },
                "ValidatorAgent": {
                    "$jig": "c1afc38b54f08fe0ada2023c78ee118ba4256dd9032827bb2e33ddb5f127eee5_o1"
                },
                "ValidatorConfig": {
                    "$jig": "68d4287023c42ee5fd3f800388ebe4857b40d143a454fedd369786fa29307888_o1"
                }
            },
            "fee": 0,
            "hash": "bfff795983afb0dd859a2814563c4b2ecceb6c4eb8e611c6ce4e83fe7afa00ef",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "playerCount": 1,
            "reward": 0,
            "satoshis": 0,
            "tier": 5
        },
        "src": "class Bot5ValidatorAgent extends BotValidatorAgent {\n    async _selectItems(jigIndex) {\n        const weapons = jigIndex.filter(j => j.kind === KronoItem.origin && j.value.itemDef.origin === PracticeMaul.origin);\n        return [await this._pickAndLock(weapons, 120)];\n    }\n    \n    _selectSkills() {\n        return [Attack, Smite];\n    }\n\n    _selectAction() {\n        return this.wallet.randomInt(2);\n    }\n\n    static async postDeploy (deployer) {\n        const {BotFighter, KronoItem, PracticeMaul, ValidatorConfig} = this.deps;\n        const fighterIndex = await deployer.blockchain.jigIndex(ValidatorConfig.address, BotFighter.origin);\n        const fighter = fighterIndex.find(f => f.kind === BotFighter.origin && f.value.displayName === 'Bullywug Crusher');\n        const itemIndex = await deployer.blockchain.jigIndex(ValidatorConfig.address, KronoItem.origin);\n        const item = itemIndex.find(i => i.kind === KronoItem.origin && i.value.itemDef && i.value.itemDef.origin === PracticeMaul.origin);\n        \n        let updates = 0;\n        const t = new Transaction();\n        t.update(() => {\n            const owner = ValidatorConfig.address;\n            if(!fighter) {\n                console.log('Minting BotFighters');\n                for(let i = 0; i < 10; i++) {\n                    new BotFighter({ owner, level: 5, displayName: 'Bullywug Crusher', race: 0, abilityScores: [10, 10, 10], appearance: { gender: 0, faceIdentifier: 5, hairIdentifier: 1, beardIdentifier: 1, skinToneIdentifier: 0, hairColorIdentifier: 0, eyeColorIdentifier: 0, ArmorColorIdentifier: 99 }, skills: [ 0, 15, 35, 29, 40, 46, 37 ] },);\n                }\n                updates++;\n            }\n    \n            if (!item) {\n                console.log('Minting Items');\n                for(let i = 0; i<10; i++) {\n                    new KronoItem(PracticeMaul, owner);\n                }\n                updates++;\n            }\n        });\n    \n        if (updates) {\n            await t.publish();\n        } else {\n            t.rollback();\n        }\n    }\n}",
        "version": "04"
    },
    "jig://1892ad614e4435b4da8aaad77fd2f88806e44f36497924ddd03143850af73844_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BotFighter": {
                    "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
                },
                "BotValidatorAgent": {
                    "$jig": "7ad687021fc8cef1851fd4cf0a042808831efa641ce40d2309cf7d2fe67e7a55_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "PowerAttack": {
                    "$jig": "9f291b42b8faa8ee2f5784b05f861fe19239738d65e1513e51f0e3e5cc43d993_o1"
                },
                "PracticeSword": {
                    "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "ValidatorAgent": {
                    "$jig": "c1afc38b54f08fe0ada2023c78ee118ba4256dd9032827bb2e33ddb5f127eee5_o1"
                },
                "ValidatorConfig": {
                    "$jig": "68d4287023c42ee5fd3f800388ebe4857b40d143a454fedd369786fa29307888_o1"
                }
            },
            "fee": 0,
            "hash": "8bfdac7b720cfb6122ab6c8a783d80ef51930351677a1aaa08a22a51c46c4be9",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "playerCount": 1,
            "reward": 0,
            "satoshis": 0,
            "tier": 6
        },
        "src": "class Bot6ValidatorAgent extends BotValidatorAgent {\n    async _selectItems(jigIndex) {\n        const weapons = jigIndex.filter(j => j.kind === KronoItem.origin && j.value.itemDef.origin === PracticeSword.origin);\n        return [await this._pickAndLock(weapons, 120)];\n    }\n\n    _selectSkills() {\n        return [Attack, PowerAttack];\n    }\n\n    _selectAction() {\n        return this.wallet.randomInt(2);\n    }\n    \n    static async postDeploy (deployer) {\n        const {BotFighter, KronoItem, PracticeSword, ValidatorConfig} = this.deps;\n        const fighterIndex = await deployer.blockchain.jigIndex(ValidatorConfig.address, BotFighter.origin);\n        const fighter = fighterIndex.find(f => f.kind === BotFighter.origin && f.value.displayName === 'Yason');\n        const itemIndex = await deployer.blockchain.jigIndex(ValidatorConfig.address, KronoItem.origin);\n        const item = itemIndex.find(i => i.kind === KronoItem.origin && i.value.itemDef && i.value.itemDef.origin === PracticeSword.origin);\n        \n        let updates = 0;\n        const t = new Transaction();\n        t.update(() => {\n            const owner = ValidatorConfig.address;\n            if(!fighter) {\n                console.log('Minting BotFighters');\n                for(let i = 0; i < 10; i++) {\n                    new BotFighter({ owner, level: 6, displayName: 'Yason', race: 0, abilityScores: [11, 11, 8], appearance: { gender: 0, faceIdentifier: 4, hairIdentifier: 0, beardIdentifier: 1, skinToneIdentifier: 1, hairColorIdentifier: 1, eyeColorIdentifier: 0, ArmorColorIdentifier: 99 }, skills: [ 0, 13, 33, 37 ] });\n                }\n                updates++;\n            }\n    \n            if (!item) {\n                console.log('Minting Items');\n                for(let i = 0; i<10; i++) {\n                    new KronoItem(PracticeSword, owner);\n                }\n                updates++;\n            }\n        });\n    \n        if (updates) {\n            await t.publish();\n        } else {\n            t.rollback();\n        }\n    }\n}",
        "version": "04"
    },
    "jig://f7162918f802139916d9d1e47413f6401d9a08974ea844a740155f27c7f76eda_o2": {
        "kind": "code",
        "props": {
            "deps": {
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "TestClientAgent": {
                    "$jig": "_o1"
                }
            },
            "hash": "51dcec63b50f6b25d66a6f0005a3428eaf39bb96a5f42fd5038ed572dba205b5",
            "location": "_o2",
            "nonce": 1,
            "origin": "_o2",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class MockClientAgent extends TestClientAgent {\n    async init() {\n        await super.init();\n\n        await this.CreateFighter({\n            owner: this.address, \n            level: 1,\n            displayName: 'Mock', \n            race: 1, \n            abilityScores: [12, 12, 7], \n            appearance: \n            { \n                gender: 0, \n                faceIdentifier: 0, \n                hairIdentifier: 0, \n                beardIdentifier: 1, \n                skinToneIdentifier: 1, \n                hairColorIdentifier: 1, \n                eyeColorIdentifier: 0\n            }\n        });\n\n        await this.RedeemItem('Maul');\n    }\n}",
        "version": "04"
    },
    "jig://c2466b00761b89ca04d2960e16471966d28bf0ef6009fbf2b1c0eb3c019db23e_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "MintAgent": {
                    "$jig": "80d6df34be5e011c9205afc660afdf43651f6f47f938c3b1d819dce76c8d1db5_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "XpTest": {
                    "$jig": "6fff3cb0e071a2b684b4a4a26e470bae5a50df06ec0276e6610daba4fb4b2328_o1"
                }
            },
            "hash": "6d0a5a4d40d30a683fb26b551ea3eeabb128e37249a08c6f477ebe2130fb8007",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class TestMintAgent extends MintAgent {\n    async init() {\n        super.init();\n        this.messageHandlers.set('RedeemXPRequest', this.onRedeemXPRequest);\n    }\n\n    async onRedeemXPRequest(message) {\n        const { owner, fighterLocation, amount } = message.payloadObj;\n        const fighter = await this.wallet.loadJig(fighterLocation);\n        if (!fighter) throw new Error('Invalid Fighter');\n        await fighter.sync();\n        const xp = new XpTest(owner, fighterLocation, amount);\n        await xp.sync();\n        return xp.toObject();\n    }\n}",
        "version": "04"
    },
    "jig://1c3c93313c434b4fa1784c3b890aa7c594ecc196f9a8e13498a4f46dd1e56f2b_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Agent": {
                    "$jig": "820231376f5cdabd943eff6764c4b6fcf637b6c9c23c71ba571307fa2182f190_o1"
                },
                "Bot1ValidatorAgent": {
                    "$jig": "4eb6d93003a5f5bb4cff711d738203ad56afdba2d79ca7ff84f165d5337723ab_o1"
                },
                "Bot2ValidatorAgent": {
                    "$jig": "7d7462af59d9e3b3aa53fa26ec1710cea434344e51e5651b66a8030866bdf180_o1"
                },
                "Bot3ValidatorAgent": {
                    "$jig": "b0e178761a31cece2a2d1a9b97fc2464d5b9af123e71b65b35aba203784f01de_o1"
                },
                "Bot4ValidatorAgent": {
                    "$jig": "f9931d3801a6e71c4dab3e6b2b7404d32c8d22fb5fb5a10d9dc8fc277d62227e_o1"
                },
                "Bot5ValidatorAgent": {
                    "$jig": "1925a4f3e963ad4c224f30a60cb017e887132884426bed13d7dd7f1487115932_o1"
                },
                "Bot6ValidatorAgent": {
                    "$jig": "1892ad614e4435b4da8aaad77fd2f88806e44f36497924ddd03143850af73844_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "KronoError": {
                    "$jig": "1e5d1b3058ca2fe63691f1be521afac14ab7b30c124d88506af06792c3c894fc_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "Tier7ValidatorAgent": {
                    "$jig": "e69a0645404bab3cf57053d3f04e93630c670a16bf447bda803217d3d637ab06_o1"
                },
                "ValidatorConfig": {
                    "$jig": "68d4287023c42ee5fd3f800388ebe4857b40d143a454fedd369786fa29307888_o1"
                }
            },
            "hash": "11e11e6d301df4a8b85fc8eb01c8ce7cc1738bf626aff78d811211658822d5b3",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0,
            "sealed": false,
            "validators": {
                "1892ad614e4435b4da8aaad77fd2f88806e44f36497924ddd03143850af73844_o1": {
                    "$dup": [
                        "deps",
                        "Bot6ValidatorAgent"
                    ]
                },
                "1925a4f3e963ad4c224f30a60cb017e887132884426bed13d7dd7f1487115932_o1": {
                    "$dup": [
                        "deps",
                        "Bot5ValidatorAgent"
                    ]
                },
                "4eb6d93003a5f5bb4cff711d738203ad56afdba2d79ca7ff84f165d5337723ab_o1": {
                    "$dup": [
                        "deps",
                        "Bot1ValidatorAgent"
                    ]
                },
                "7d7462af59d9e3b3aa53fa26ec1710cea434344e51e5651b66a8030866bdf180_o1": {
                    "$dup": [
                        "deps",
                        "Bot2ValidatorAgent"
                    ]
                },
                "b0e178761a31cece2a2d1a9b97fc2464d5b9af123e71b65b35aba203784f01de_o1": {
                    "$dup": [
                        "deps",
                        "Bot3ValidatorAgent"
                    ]
                },
                "e69a0645404bab3cf57053d3f04e93630c670a16bf447bda803217d3d637ab06_o1": {
                    "$dup": [
                        "deps",
                        "Tier7ValidatorAgent"
                    ]
                },
                "f9931d3801a6e71c4dab3e6b2b7404d32c8d22fb5fb5a10d9dc8fc277d62227e_o1": {
                    "$dup": [
                        "deps",
                        "Bot4ValidatorAgent"
                    ]
                }
            }
        },
        "src": "class QueueAgent extends Agent {\n    async init() {\n        console.log('Initializing', this.constructor.name);\n\n        Object.values(QueueAgent.validators).forEach(v => this.messageHandlers.set(v.origin, this.onEnterQueue));\n        this.messageHandlers.set('ExitQueue', this.onExitQueue);\n    }\n\n    onMessage(message) {\n        if(!this.messageHandlers.has(message.subject)) {\n            throw new KronoError(410, 'Invalid Lobby');\n        }\n\n        return super.onMessage(message);\n    }\n\n    async onExitQueue(message) {\n        const prevMsgId = await this.storage.get(`player${message.from}`);       \n        if(!prevMsgId) return;\n        const prevMessage = await this.storage.hgetall(prevMsgId);\n        const rules = this.constructor.validators[prevMessage.subject];\n        await rules.sendExitQueueStatus(prevMsgId, this.wallet, this.blockchain);\n        const pipeline = this.storage.pipeline();\n        for (const rules of Object.values(QueueAgent.validators)) {\n            pipeline.hdel(rules.origin, message.from);\n        }\n        await pipeline.exec();\n        return true;\n    }\n\n    async onEnterQueue(message) {\n        console.log('Enter Queue:', message.subject);\n        const rules = this.constructor.validators[message.subject];\n        if(!rules) throw new Error('Unsupported Rules');\n\n        console.log('RULES:', JSON.stringify({...rules}));\n\n        const prevMsgId = await this.storage.get(`player${message.from}`);\n        if(prevMsgId) {\n            const prev = await this.storage.hget(prevMsgId, 'subject');\n            await this.storage.pipeline()\n                .hdel(prev, message.from)\n                .del(`player${message.from}`)\n                .exec();\n        }\n            \n        if(rules.playerCount === 1) {\n            await this.createBattle(rules, [{...message}]);\n        } \n        else {\n            const match = await rules.processQueue(message, this);\n            if(match) {\n                await this.createBattle(rules, [message, match]);\n            } else {\n                await this.storage.pipeline()\n                    .hmset(message.id, message)\n                    .set(`player${message.from}`, message.id)\n                    .hset(message.subject, message.from, message.id)\n                    .exec();\n            }\n        }\n            \n        await rules.sendEnterQueueStatus(message, this.wallet, this.blockchain);\n    }\n\n    async createBattle(rules, messages) {\n        console.log('Sending to Validator');\n        const message = this.wallet.buildMessage({\n            to: [ValidatorConfig.pubkey],\n            subject: 'LaunchAgent',\n            payload: JSON.stringify({\n                location: rules.origin,\n                initParams: {\n                    messages,\n                    nonce: this.wallet.randomBytes(16)\n                }\n            })\n        });\n        await this.blockchain.sendMessage(message);\n\n        // Remove from queue\n        const pipeline = this.storage.pipeline();\n        messages.forEach(m => {\n            pipeline.hdel(m.subject, m.from);\n            pipeline.del(m.id);\n        });\n        await pipeline.exec();\n    }\n\n    static async preDeploy() {\n        const {Bot1ValidatorAgent,Bot2ValidatorAgent,Bot3ValidatorAgent,Bot4ValidatorAgent,Bot5ValidatorAgent,Bot6ValidatorAgent,Tier7ValidatorAgent} = this.deps;\n        QueueAgent.validators = {\n            [Bot1ValidatorAgent.origin]: Bot1ValidatorAgent,\n            [Bot2ValidatorAgent.origin]: Bot2ValidatorAgent,\n            [Bot3ValidatorAgent.origin]: Bot3ValidatorAgent,\n            [Bot4ValidatorAgent.origin]: Bot4ValidatorAgent,\n            [Bot5ValidatorAgent.origin]: Bot5ValidatorAgent,\n            [Bot6ValidatorAgent.origin]: Bot6ValidatorAgent,\n            [Tier7ValidatorAgent.origin]: Tier7ValidatorAgent\n        };\n    }\n}",
        "version": "04"
    },
    "jig://f7162918f802139916d9d1e47413f6401d9a08974ea844a740155f27c7f76eda_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "CashierConfig": {
                    "$jig": "62a333e72d5028fd06367a1ed61ef71c222a6827e61dc3ad61e50e8d88b6b860_o1"
                },
                "ClientAgent": {
                    "$jig": "edfffdca8b9089c30c646135097bc158f6dfb5564703bac027eb4086ca929609_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "MintConfig": {
                    "$jig": "79f97747efe83557894d6dc05815c56700400af1b04741a1518e25699aaee42d_o1"
                },
                "QueueConfig": {
                    "$jig": "e82c09430b7dd521018b7279fc275284255c794a1d1dc367d8c7af99221b1564_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "XpTest": {
                    "$jig": "6fff3cb0e071a2b684b4a4a26e470bae5a50df06ec0276e6610daba4fb4b2328_o1"
                }
            },
            "hash": "94c60efd238d8610852485a65352eb07b6e57986179b4c5415739b1c2f8d24ab",
            "location": "_o1",
            "nonce": 2,
            "origin": "1a794e96f189367dbbd219b84350c28199a2a7604f6f2f9fd3789c2d98fac4bc_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class TestClientAgent extends ClientAgent {\n    async init() {\n        await super.init();\n\n        this.eventHandlers.set('RedeemXP', this.RedeemXP);\n        this.eventHandlers.set('RedeemFunds', this.RedeemFunds);\n    }\n\n    async RedeemXP(request) {\n        const { fighterLocation, amount } = request;\n        const fighter = await this.wallet.loadJig(fighterLocation);\n        const message = this.wallet.buildMessage({\n            to: [MintConfig.pubkey],\n            subject: 'RedeemXPRequest',\n            payload: JSON.stringify({\n                owner: this.address, \n                fighterLocation, \n                amount\n            })\n        });\n\n\n        const xpTest = await this.blockchain.sendMessage(message, MintConfig.postTo);\n        console.log('XPTest:', JSON.stringify(xpTest));\n        const xp = await this.wallet.loadJig(xpTest.location);\n        console.log('XPTest loaded:', xp && xp.toObject());\n        fighter.recordVictory(xp);\n        await fighter.sync();\n        this.onFighter(fighter);\n        return fighter.toObject();\n    }\n\n    async RedeemFunds() {\n        const message = this.wallet.buildMessage({\n            to: [CashierConfig.pubkey],\n            subject: 'FundsRequest',\n            payload: JSON.stringify({dest: this.address})\n        });\n        await this.blockchain.sendMessage(message);\n    }\n}",
        "version": "04"
    },
    "jig://80d6df34be5e011c9205afc660afdf43651f6f47f938c3b1d819dce76c8d1db5_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Agent": {
                    "$jig": "820231376f5cdabd943eff6764c4b6fcf637b6c9c23c71ba571307fa2182f190_o1"
                },
                "CommonItems": {
                    "$jig": "9eead79326a23805f136f37491a06c015d6b2f161d944d1848a4e9c352cdc4c9_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "Fighter": {
                    "$jig": "34dd393811e945ab6de5322d6ed250110a71b5edacea71fb223a5930c4948996_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "PracticeItems": {
                    "$jig": "b325a272c76b74032b38615ff7b560cc10b0591c58ac4ebb16ee43bea374c9a1_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                }
            },
            "hash": "04c1cb326d89bf446ee1353a5ab88ba26abafbeb07d3122f223f608d06a44cff",
            "itemDefs": [
                {
                    "$jig": "fc709aa8e1a3f13591391d91a0ef84b26ed14acde4c2630439b02041e083fe5e_o1"
                },
                {
                    "$jig": "71ecb049403ed15c6ff682a685aa72988fb5e238ef039f98173a85d7c4f46419_o1"
                },
                {
                    "$jig": "a0e8ea3090a0b992d5700ce1eb210daa65f64f7bfbfaf85b340f04afbe74767d_o1"
                },
                {
                    "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
                },
                {
                    "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
                },
                {
                    "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
                },
                {
                    "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
                },
                {
                    "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
                },
                {
                    "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
                },
                {
                    "$jig": "cf6a5e646c452c6507880a0ce8bb5bb4aab06f5bbfa0a3e723fdf64c2fa50c85_o1"
                },
                {
                    "$jig": "ecbe04425f6c81c8419bc0b53237d3894b89c3eb0e6598defb8be6f3373e489e_o1"
                },
                {
                    "$jig": "785bacf58a6d82825b395aee36905bd45794443aa3512cd5469244a4f8b86028_o1"
                },
                {
                    "$jig": "f9d893e1bf6b875f20462fe202d46c81eb79df80b3491c623d9a4937412aedfb_o1"
                },
                {
                    "$jig": "0eeab9c8f278e3d137dc4923b2ddb09bc1885f142f08389f67823eb2d636f5fa_o1"
                },
                {
                    "$jig": "0bb728691a828a6ce6419c94038f57a5ad92710785784608bdf966dc0fb89ee5_o1"
                },
                {
                    "$jig": "41ffca43394bf75d46ef6dc0d935dcdc639496997f047434e63f9b148fdad9a0_o1"
                },
                {
                    "$jig": "8673ed291a74221cdab3909e981fc3f92416f77b34759382cd839b5b32ebc53e_o1"
                },
                {
                    "$dup": [
                        "itemDefs",
                        "16"
                    ]
                },
                {
                    "$jig": "ccb55f03d072c7b09fc282b195fed719a8c215da8c4f85b68f3c3c4a9e8215c3_o1"
                },
                {
                    "$jig": "94189c87ebd7f8c597bb76007c1c370ee942a9357c399f3c087443a8b05fe8eb_o1"
                },
                {
                    "$jig": "0b62e3b6942367e8f705889ed494b1f729ad977d3aae6626b900a8e83d901b2d_o1"
                }
            ],
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0,
            "sealed": false
        },
        "src": "class MintAgent extends Agent {\n    async init() {\n        console.log('Initializing', this.constructor.name);\n\n        this.messageHandlers.set('FighterRequest', this.onFighterRequest);\n        this.messageHandlers.set('RedeemItemRequest', this.onRedeemItemRequest);\n        this.messageHandlers.set('LevelUp', this.onLevelUp);\n    }\n\n    async onFighterRequest(message) {\n        const request = message.payloadObj;\n        const fighter = new Fighter(request);\n        await fighter.sync();\n        return fighter.toObject();\n    }\n\n    async onRedeemItemRequest(message) {\n        const {owner, itemId} = message.payloadObj;\n        const itemDef = MintAgent.itemDefs.find(itemDef => itemDef.name === itemId);\n        if (!itemDef) throw new Error('Invalid Item');\n        const item = new KronoItem(itemDef, owner);\n        await item.sync();\n        return item.toObject();\n    }\n\n    async onLevelUp(message) {\n        const { fighterLocation, ability, skillType } = message.payloadObj;\n        const fighter = await this.wallet.loadJig(fighterLocation);\n        if (!fighter) throw new Error('Invalid Fighter');\n        await fighter.sync();\n        const t = this.wallet.createTransaction();\n        t.update(() => fighter.levelUp(ability, skillType));\n        return t.export({pay: true, sign: true});\n    }\n\n    static preDeploy() {\n        this.itemDefs = [\n            ...this.deps.PracticeItems.itemDefs,\n            ...this.deps.CommonItems.itemDefs\n        ];      \n    }\n}",
        "version": "04"
    },
    "jig://edfffdca8b9089c30c646135097bc158f6dfb5564703bac027eb4086ca929609_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Agent": {
                    "$jig": "820231376f5cdabd943eff6764c4b6fcf637b6c9c23c71ba571307fa2182f190_o1"
                },
                "Battle": {
                    "$jig": "8ff616fe64f5f547c747a09cc6a12b9164787e368f8361faa508d4aac371e58e_o1"
                },
                "BattleToken": {
                    "$jig": "1dfa9766de8d30e539501df075657c7be85df1f9e924f241bd5683ce866dcd31_o1"
                },
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Bot1ValidatorAgent": {
                    "$jig": "4eb6d93003a5f5bb4cff711d738203ad56afdba2d79ca7ff84f165d5337723ab_o1"
                },
                "Bot2ValidatorAgent": {
                    "$jig": "7d7462af59d9e3b3aa53fa26ec1710cea434344e51e5651b66a8030866bdf180_o1"
                },
                "Bot3ValidatorAgent": {
                    "$jig": "b0e178761a31cece2a2d1a9b97fc2464d5b9af123e71b65b35aba203784f01de_o1"
                },
                "Bot4ValidatorAgent": {
                    "$jig": "f9931d3801a6e71c4dab3e6b2b7404d32c8d22fb5fb5a10d9dc8fc277d62227e_o1"
                },
                "Bot5ValidatorAgent": {
                    "$jig": "1925a4f3e963ad4c224f30a60cb017e887132884426bed13d7dd7f1487115932_o1"
                },
                "Bot6ValidatorAgent": {
                    "$jig": "1892ad614e4435b4da8aaad77fd2f88806e44f36497924ddd03143850af73844_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "Fighter": {
                    "$jig": "34dd393811e945ab6de5322d6ed250110a71b5edacea71fb223a5930c4948996_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "KronoCoin": {
                    "$jig": "62bec1d8cd5b0d5e08708049e52f693721bd454e6383fb766c256403c1fbba83_o1"
                },
                "KronoError": {
                    "$jig": "1e5d1b3058ca2fe63691f1be521afac14ab7b30c124d88506af06792c3c894fc_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "MintConfig": {
                    "$jig": "79f97747efe83557894d6dc05815c56700400af1b04741a1518e25699aaee42d_o1"
                },
                "QueueConfig": {
                    "$jig": "e82c09430b7dd521018b7279fc275284255c794a1d1dc367d8c7af99221b1564_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "Tier7ValidatorAgent": {
                    "$jig": "e69a0645404bab3cf57053d3f04e93630c670a16bf447bda803217d3d637ab06_o1"
                },
                "ValidatorConfig": {
                    "$jig": "68d4287023c42ee5fd3f800388ebe4857b40d143a454fedd369786fa29307888_o1"
                },
                "XpTest": {
                    "$jig": "6fff3cb0e071a2b684b4a4a26e470bae5a50df06ec0276e6610daba4fb4b2328_o1"
                }
            },
            "hash": "40b6638e123ee32f60259c56d81a1607f4ed812b39cc7c093e984787012f8f5e",
            "lobbies": [
                {
                    "$dup": [
                        "deps",
                        "Bot1ValidatorAgent"
                    ]
                },
                {
                    "$dup": [
                        "deps",
                        "Bot2ValidatorAgent"
                    ]
                },
                {
                    "$dup": [
                        "deps",
                        "Bot3ValidatorAgent"
                    ]
                },
                {
                    "$dup": [
                        "deps",
                        "Bot4ValidatorAgent"
                    ]
                },
                {
                    "$dup": [
                        "deps",
                        "Bot5ValidatorAgent"
                    ]
                },
                {
                    "$dup": [
                        "deps",
                        "Bot6ValidatorAgent"
                    ]
                },
                {
                    "$dup": [
                        "deps",
                        "Tier7ValidatorAgent"
                    ]
                }
            ],
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0,
            "sealed": false,
            "whitelist": [
                "8ff616fe64f5f547c747a09cc6a12b9164787e368f8361faa508d4aac371e58e_o1",
                "1dfa9766de8d30e539501df075657c7be85df1f9e924f241bd5683ce866dcd31_o1",
                "34dd393811e945ab6de5322d6ed250110a71b5edacea71fb223a5930c4948996_o1",
                "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
            ]
        },
        "src": "class ClientAgent extends Agent {\n    async init() {\n        this.jigHandlers.set(Fighter.origin, this.onFighter);\n        this.jigHandlers.set(KronoCoin.origin, this.onKronoCoin);\n        this.jigHandlers.set(KronoItem.origin, this.onItem);\n\n        this.messageHandlers.set('BattleUpdated', this.onBattleUpdated);\n        this.messageHandlers.set('BattleCompleted', this.onBattleCompleted);\n        this.messageHandlers.set('ActionError', this.onActionError);\n        this.messageHandlers.set('ExitQueue', this._exitQueue);\n        this.messageHandlers.set('SignBattle', this.signBattle);\n        this.messageHandlers.set('QueueStatus', this._queueStatus);\n\n        this.eventHandlers.set('Act', this.Act);\n        this.eventHandlers.set('CreateFighter', this.CreateFighter);\n        this.eventHandlers.set('EnterQueue', this.EnterQueue);\n        this.eventHandlers.set('ExitQueue', this.ExitQueue);\n        this.eventHandlers.set('Forfeit', this.Forfeit);\n        this.eventHandlers.set('GetFighters', this.GetFighters);\n        this.eventHandlers.set('SimulateFighterState', this.SimulateFighterState);\n        this.eventHandlers.set('SimulateFightersState', this.SimulateFightersState);\n        this.eventHandlers.set('GetItems', this.GetItems);\n        this.eventHandlers.set('GetPlayer', this.GetPlayer);\n        this.eventHandlers.set('GetBattles', this.GetBattles);\n        this.eventHandlers.set('GetBattleHistory', this.GetBattleHistory);\n        this.eventHandlers.set('LevelUp', this.LevelUp);\n        this.eventHandlers.set('RedeemItem', this.RedeemItem);\n\n        this.battleEvents = new Map();\n        this._battles = new Map();\n        this._fighters = new Map();\n        this._items = new Map();\n        this.emit('subscribe', 'QueueStatus');\n        this.wallet.setTimeout(() => this.dispose(), 1000);\n    }\n\n    onFighter(fighter) {\n        this._fighters.set(fighter.origin, fighter.toObject());\n        this.emit('client', 'FighterUpdated', this._fighters.get(fighter.origin));\n    }\n\n    onItem(item) {\n        this._items.set(item.origin, item.toObject());\n        this.emit('client', 'ItemUpdated', this._items.get(item.origin));\n    }\n\n    async onKronoCoin() {\n        this.emit('client', 'BalanceUpdated', await this.getBalance());\n    }\n\n    onBattleCreated(message) {\n        this.emit('client', 'BattleCreated', message.payloadObj);\n    }\n\n    _queueStatus(message) {\n        this.emit('client', 'QueueStatus', message.payload);\n    }\n\n    onBattleUpdated(message) {\n        const { battleId, submitId } = message.payloadObj;\n        if (battleId === this.currentId) {\n            delete this.queueMessage;\n        } \n        // else {\n        //     console.log('Simultaneous battle');\n        //     return;\n        // }\n\n        this.submitId = submitId;\n        this.emit('client', 'BattleUpdated', message.payloadObj);\n    }\n\n    async onBattleCompleted(message) {\n        const battle = await this.wallet.loadJig(message.payload);\n        this._battles.set(battle.origin, battle.toObject());\n        await battle.sync();\n        this.emit('client', 'BattleUpdated', battle.getState());\n        this.emit('client', 'BattleCompleted', this._battles.get(battle.origin));\n        const fighter = battle.victor.pubkey === this.pubkey && battle.victor.fighter;\n        if(!fighter) return;\n        const t = this.wallet.createTransaction();\n        t.update(() => {\n            console.log('Fighter:', fighter.displayName, fighter.location);\n            fighter.recordVictory(battle);\n        });\n        await t.publish();\n        this.onFighter(fighter);\n    }\n\n    async signBattle(message) {\n        if (!this.queueMessage) return;\n        const { id, rawtx, battle } = JSON.parse(message.payload);\n        const tx = this.bsv.Tx.fromHex(rawtx);\n        let sigs = tx.txIns.map(txIn => txIn.scriptVi.toNumber() && txIn.script.toString());\n        const { fighterLocation, itemLocations, coinId } = JSON.parse(this.queueMessage.payload);\n        \n        const rules = ClientAgent.lobbies.find(lobby => lobby.origin === this.queueMessage.subject);\n        if (!rules) throw new Error('Invalid Lobby');\n\n        const txOuts = await this.wallet.signTx(tx);\n\n        tx.txIns.forEach((txIn, i) => {\n            if (!txIn.scriptVi.toNumber() || sigs[i] === txIn.script.toString()) return;\n            const txid = this.lib.Buffer.from(txIn.txHashBuf).reverse().toString('hex');\n            const loc = `${txid}_o${txIn.txOutNum}`;\n            if (loc !== fighterLocation && !itemLocations.includes(loc) && loc !== coinId) {\n                const txOut = txOuts[i];\n                const address = new this.bsv.Address().fromTxOutScript(txOut.script).toString();\n                if (address !== this.address) {\n                    throw new Error(`Invalid Input: ${address} ${loc}`);\n                }\n            }\n            sigs[i] = txIn.scriptVi.toNumber() && txIn.script.toString();\n        });\n\n        if(rules.fee) {\n            const coin = await this.wallet.loadJig(coinId);\n            if(coin.amount > rules.fee) {\n                const t = await this.wallet.loadTransaction(rawtx);\n                const change = t.outputs.find(j => j.constructor.origin === KronoCoin.origin);\n                if(change != coin.amount - rules.fee) {\n                    throw new Error('Insufficient Change');\n                }\n            }\n        }\n\n        const sigMessage = this.wallet.buildMessage({\n            to: [message.from],\n            subject: 'BattleSigned',\n            context: [id],\n            payload: JSON.stringify(sigs)\n        });\n        await this.blockchain.sendMessage(sigMessage, ValidatorConfig.postTo);\n        this.emit('client', 'BattleCreated', battle);\n        this.currentId = id;\n        this.turnCount = -1;\n    }\n\n    async Act(request) {\n        console.log('Act');\n        const { actionIndex } = request;\n        const [stateHash] = this.submitId.split('|');\n        const message = this.wallet.buildMessage({\n            to: [ValidatorConfig.pubkey],\n            subject: 'Act',\n            context: [this.currentId],\n            payload: JSON.stringify({ stateHash, actionIndex })\n        });\n        await this.blockchain.sendMessage(message, ValidatorConfig.postTo);\n    }\n\n    async onActionError(message) {\n        throw new Error(message.payload);\n    }\n\n    async CreateFighter(request) {\n        delete request.skills;\n        const message = this.wallet.buildMessage({\n            to: [MintConfig.pubkey],\n            subject: 'FighterRequest',\n            payload: JSON.stringify({\n                ...request,\n                owner: this.address\n            })\n        });\n        const resp = await this.blockchain.sendMessage(message, MintConfig.postTo);\n        const fighter = await this.wallet.loadJig(resp.location);\n        this.onFighter(fighter);\n        return fighter;\n    }\n\n    async EnterQueue(request) {\n        console.log('EnterQueue');\n        const rules = ClientAgent.lobbies.find(lobby => lobby.tier === request.lobbyId);\n        const fighter = await this.wallet.loadJig(request.fighterLocation);\n        if(!fighter) throw new Error('CLIENT: Invalid Fighter');\n        await fighter.sync();\n        const items = await Promise.all(request.itemLocations.map(async location => {\n            if(!location) return null;\n            const item = await this.wallet.loadJig(location);\n            if(!item) return;\n            await item.sync();\n            return item;\n        }));\n\n        const skills = request.actionIds;\n        let coin;\n        if(rules.fee) {\n            const index = await this.wallet.loadJigIndex(KronoCoin.origin);\n            const coins = [];\n            let acc = 0;\n            for(let coinData of index) {\n                const coin = this.wallet.loadJig(coinData.location);\n                coins.push(coin);\n                if((acc += coin.amount) >= rules.fee) break;\n            }\n            if (acc < rules.fee) throw new KronoError(402, 'Insufficient balance');\n            coin = coins.length > 1 ?\n                new KronoCoin(...coins) :\n                coins[0];\n            await coin.sync();\n        }\n\n        this.queueMessage = {\n            to: [QueueConfig.pubkey],\n            subject: rules.origin,\n            payload: JSON.stringify({\n                pubkey: this.pubkey,\n                owner: this.address,\n                fighterLocation: fighter.location,\n                itemLocations: items.map(i => i && i.location),\n                skills,\n                coinId: coin && coin.location\n            })\n        };\n        const message = this.wallet.buildMessage(this.queueMessage);\n        await this.blockchain.sendMessage(message, QueueConfig.postTo);\n        return request.lobbyId;\n    }\n\n    async ExitQueue() {\n        const message = this.wallet.buildMessage({\n            to: [QueueConfig.pubkey],\n            subject: 'ExitQueue'\n        });\n        await this.blockchain.sendMessage(message, QueueConfig.postTo);\n        this._exitQueue();\n    }\n\n    async _exitQueue(message) {\n        delete this.queueMessage;\n        this.emit('client', 'OnExitQueue', message && message.payload);\n        if(message && message.payload) {\n            this.emit('client', 'Error', message.payload);\n        }\n    }\n\n    async Forfeit(battleOrigin) {\n        const message = this.wallet.buildMessage({\n            to: [ValidatorConfig.pubkey],\n            subject: 'Forfeit',\n            context: [this.currentId],\n            payload: JSON.stringify({ battleOrigin })\n        });\n        await this.blockchain.sendMessage(message, ValidatorConfig.postTo);\n    }\n    \n    async GetBattles() {\n        if(!this._battles.size) {\n            const tokens = await this.blockchain.jigQuery({ \n                kind: BattleToken.origin,\n                owner: this.address\n            });\n\n            console.log('BAttles:', JSON.stringify(tokens));\n            await Promise.all(tokens.map(async token => {\n                const jig = await this.blockchain.loadJigData(token.location, true).catch(() => null);\n                if(!jig || !jig.value.battleState) return;\n                this._battles.set(jig.value.battle.origin, jig.value.battle);\n            }));\n        }\n        \n        return [...this._battles.values()]\n            .sort((a, b) => a.timestamp > b.timestamp ? -1 : 1);\n    }\n\n    async GetFighters() {\n        if(!this._fighters.size) {\n            console.log('GetFighters');\n            const index = await this.wallet.loadJigIndex(Fighter.origin);\n            index.forEach(f => this._fighters.set(f.origin, f.value));\n            console.log('Fighters:', this._fighters.size);\n        }\n        return [...this._fighters.values()];\n    }\n\n    SimulateFighterState(message) {\n        console.log('SimulateFighterState');\n        return BattleUtils.buildFighterState(message);\n    }\n\n    SimulateFightersState(message) {\n        console.log('SimulateFightersState');\n        const fighterStates = [];\n        message.forEach(f => fighterStates.push(BattleUtils.buildFighterState(f)) )\n        return fighterStates;\n    }\n\n    async GetItems() {\n        if(!this._items.size) {\n            const index = await this.wallet.loadJigIndex(KronoItem.origin);\n            index.forEach(i => this._items.set(i.origin, i.value));\n        }\n        return [...this._items.values()];\n    }\n\n    async GetPlayer() {\n        const [fIndex, iIndex,] = await Promise.all([\n            this.wallet.loadJigIndex(Fighter.origin),\n            this.wallet.loadJigIndex(KronoItem.origin)\n        ]);\n\n        const balance = await this.getBalance();\n        console.log('Balance:', balance);\n\n        const config = {\n            address: this.address,\n            pubkey: this.pubkey,\n            owner: this.address,\n            handle: this.wallet.handle,\n            balance,\n            xpTable: {\n                cumulativeXp: Fighter.LevelUpXP,\n                xpPerKill: Battle.LevelXPReward\n            },\n            levels: Fighter.Levels,\n            abilityScoreLevels: Fighter.AbilityScoreLevels,\n            skillLevels: Fighter.SkillLevels,\n            skills: Object.entries(Constants.SkillData).map(([k, v]) => {\n                if(['location', 'origin', 'owner', 'nonce', 'deps', 'satoshis'].includes(k)) return;\n                return {\n                    ...v,\n                    skillType: k\n                };\n            }).filter(x => !!x),\n            fighterCount: fIndex.length,\n            itemCount: iIndex.length,\n            lobbies: KronoClass.deepClone(ClientAgent.lobbies)\n        };\n\n        return config;\n    }\n\n    async LevelUp(request) {\n        const { fighterLocation, ability, skillType } = request;\n        const fighter = await this.wallet.loadJig(fighterLocation);\n        if(!fighter) throw new Error('Invalid Fighter');\n        await fighter.sync();\n\n        const [tokenData] = await this.wallet.loadJigIndex(BattleToken.origin);\n        if(!tokenData) throw new Error('No Battles');\n        const token = await this.wallet.loadJig(tokenData.location);\n        if(!token) throw new Error('No Battles');\n        await token.sync();\n        const t = this.wallet.createTransaction();\n        await t.update(() => {\n            token.destroy();\n            fighter.levelUp(ability, skillType);\n        });\n        await t.publish();\n        this.onFighter(fighter);\n    }\n\n    async RedeemItem(itemId) {\n        const message = this.wallet.buildMessage({\n            to: [MintConfig.pubkey],\n            subject: 'RedeemItemRequest',\n            payload: JSON.stringify({owner: this.address, itemId})\n        });\n\n        const item = await this.blockchain.sendMessage(message, MintConfig.postTo);\n        this._items.set(item.origin, item);\n        return item;\n    }\n\n    async getBalance() {\n        console.log('getBalance');\n        const index = await this.wallet.loadJigIndex(KronoCoin.origin);\n        console.log('INDEX:', JSON.stringify(index));\n        const balance = index.reduce((acc, coin) => acc + coin.value.amount, 0);\n        console.log('Balance', balance);\n        return balance;\n    }\n\n    async dispose() {\n        const index = await this.wallet.loadJigIndex(undefined, 100, 0, false);\n        const deprecated = index\n            .filter(data => !this.constructor.whitelist.includes(data.kind))\n            .slice(0, 25);\n        const jigs = await Promise.all(deprecated.map(async j => {\n            const jig = await this.wallet.loadJig(j.location);\n            await jig.sync();\n            return jig;\n        }));\n        if(!jigs.length) return;\n        \n        jigs.reduce((prev, jig) => {\n            return prev.then(async () => {\n                await jig.sync();\n                if(!jig.location) return;\n                console.log('Disposing:', jig.constructor.name);\n                jig.destroy();\n                await jig.sync();\n            });\n        }, Promise.resolve());\n    }\n\n    static async preDeploy() {\n        ClientAgent.lobbies = [\n            ClientAgent.deps.Bot1ValidatorAgent,\n            ClientAgent.deps.Bot2ValidatorAgent,\n            ClientAgent.deps.Bot3ValidatorAgent,\n            ClientAgent.deps.Bot4ValidatorAgent,\n            ClientAgent.deps.Bot5ValidatorAgent,\n            ClientAgent.deps.Bot6ValidatorAgent,\n            ClientAgent.deps.Tier7ValidatorAgent,\n        ];\n\n        ClientAgent.whitelist = [\n            ClientAgent.deps.Battle.origin,\n            ClientAgent.deps.BattleToken.origin,\n            ClientAgent.deps.Fighter.origin,\n            ClientAgent.deps.KronoItem.origin,\n        ];\n    }\n}",
        "version": "04"
    },
    "jig://6fff3cb0e071a2b684b4a4a26e470bae5a50df06ec0276e6610daba4fb4b2328_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "BattleToken": {
                    "$jig": "1dfa9766de8d30e539501df075657c7be85df1f9e924f241bd5683ce866dcd31_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "KronoJig": {
                    "$jig": "1e714f99c065eb795a90701ce5a225e2a422f21d85bf573b34dde50700167175_o1"
                }
            },
            "hash": "45dc068c4f180df7f2ff2159e74aa571656b3380865f0c170957c450b97b9245",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class XpTest extends KronoJig {\n    init(owner, fighter, xp) {\n        this.victor = { fighter };\n        this.xp = xp;\n\n        for(let i = 0; i < 7; i++) {\n            new BattleToken(owner);\n        }\n        this.owner = owner;\n    }\n}",
        "version": "04"
    },
    "jig://79f97747efe83557894d6dc05815c56700400af1b04741a1518e25699aaee42d_o1": {
        "kind": "code",
        "props": {
            "address": "mubfx4U5GoCZNFmazuqTiZAmF4VWZQDeKM",
            "agentId": "mint@adhoc.cryptofights.io",
            "deps": {},
            "hash": "222248f72c90b758f355d3aae04738ccf0869bc88cd5eadeccc3ae3bb8a84b3f",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "postTo": "/mint",
            "pubkey": "0276ee03baff941fd74cbff37c8afd0333c583090c5b23a344d75d6e2a7ed66147",
            "satoshis": 0
        },
        "src": "class MintConfig { }",
        "version": "04"
    },
    "jig://1e5d1b3058ca2fe63691f1be521afac14ab7b30c124d88506af06792c3c894fc_o1": {
        "kind": "code",
        "props": {
            "deps": {},
            "hash": "74f779e6a96a5119f9127f078c64a4b2098a7b561ef0c4f3f0ef4312d98ac645",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class KronoError {\n    constructor(status, message, attributes) {\n        const error = new Error(message);\n        error.status = status;\n        error.attributes = attributes;\n\n        return error;\n    }\n}",
        "version": "04"
    },
    "jig://e82c09430b7dd521018b7279fc275284255c794a1d1dc367d8c7af99221b1564_o1": {
        "kind": "code",
        "props": {
            "address": "n1QAXrUgiWFjjNyQqrxSmhoize6kPDsd4t",
            "agentId": "queue@adhoc.cryptofights.io",
            "deps": {},
            "hash": "626ab246a250708ab15e6bd96c1b6c899ef616c1bc61ff693d3a10117259fab8",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "postTo": "/queue",
            "pubkey": "02c21aa7f53bc58b64d4df0b81fcba2fd0727fe7ea3b8e7718eeecd32238f7bf56",
            "satoshis": 0
        },
        "src": "class QueueConfig { }",
        "version": "04"
    },
    "jig://e69a0645404bab3cf57053d3f04e93630c670a16bf447bda803217d3d637ab06_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Agent": {
                    "$jig": "820231376f5cdabd943eff6764c4b6fcf637b6c9c23c71ba571307fa2182f190_o1"
                },
                "BareFist": {
                    "$jig": "3a5bb09f57fd0f5548cf422b96e9127fc66d573dc1c5f1f3d0ef393a275d32d3_o1"
                },
                "Battle": {
                    "$jig": "8ff616fe64f5f547c747a09cc6a12b9164787e368f8361faa508d4aac371e58e_o1"
                },
                "BotFighter": {
                    "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "Fighter": {
                    "$jig": "34dd393811e945ab6de5322d6ed250110a71b5edacea71fb223a5930c4948996_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "Skills": {
                    "$jig": "3810e849cc633b2febfc63f1ffa69d1c20a88cc2637027f47f855305c59f41ab_o1"
                },
                "ValidatorAgent": {
                    "$jig": "c1afc38b54f08fe0ada2023c78ee118ba4256dd9032827bb2e33ddb5f127eee5_o1"
                },
                "ValidatorConfig": {
                    "$jig": "68d4287023c42ee5fd3f800388ebe4857b40d143a454fedd369786fa29307888_o1"
                }
            },
            "fee": 0,
            "hash": "18d219eff1df4f9b60d5d2af15fda86b1d3640a0aef59499297586fea892703a",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "playerCount": 2,
            "reward": 0,
            "satoshis": 0,
            "tier": 7
        },
        "src": "class Tier7ValidatorAgent extends ValidatorAgent {\n    static async preDeploy() {\n\n    }\n}",
        "version": "04"
    },
    "jig://99e602eca2767b337eccc313be5a98fffe9f82a40598fa0e8845b88d431510d6_o1": {
        "kind": "code",
        "props": {
            "agents": {
                "bot1": {
                    "$jig": "4eb6d93003a5f5bb4cff711d738203ad56afdba2d79ca7ff84f165d5337723ab_o1"
                },
                "bot2": {
                    "$jig": "7d7462af59d9e3b3aa53fa26ec1710cea434344e51e5651b66a8030866bdf180_o1"
                },
                "bot3": {
                    "$jig": "b0e178761a31cece2a2d1a9b97fc2464d5b9af123e71b65b35aba203784f01de_o1"
                },
                "bot4": {
                    "$jig": "f9931d3801a6e71c4dab3e6b2b7404d32c8d22fb5fb5a10d9dc8fc277d62227e_o1"
                },
                "bot5": {
                    "$jig": "1925a4f3e963ad4c224f30a60cb017e887132884426bed13d7dd7f1487115932_o1"
                },
                "bot6": {
                    "$jig": "1892ad614e4435b4da8aaad77fd2f88806e44f36497924ddd03143850af73844_o1"
                },
                "client": {
                    "$jig": "f7162918f802139916d9d1e47413f6401d9a08974ea844a740155f27c7f76eda_o2"
                },
                "mint": {
                    "$jig": "c2466b00761b89ca04d2960e16471966d28bf0ef6009fbf2b1c0eb3c019db23e_o1"
                },
                "queue": {
                    "$jig": "1c3c93313c434b4fa1784c3b890aa7c594ecc196f9a8e13498a4f46dd1e56f2b_o1"
                }
            },
            "deps": {
                "Bot1ValidatorAgent": {
                    "$dup": [
                        "agents",
                        "bot1"
                    ]
                },
                "Bot2ValidatorAgent": {
                    "$dup": [
                        "agents",
                        "bot2"
                    ]
                },
                "Bot3ValidatorAgent": {
                    "$dup": [
                        "agents",
                        "bot3"
                    ]
                },
                "Bot4ValidatorAgent": {
                    "$dup": [
                        "agents",
                        "bot4"
                    ]
                },
                "Bot5ValidatorAgent": {
                    "$dup": [
                        "agents",
                        "bot5"
                    ]
                },
                "Bot6ValidatorAgent": {
                    "$dup": [
                        "agents",
                        "bot6"
                    ]
                },
                "MintAgent": {
                    "$dup": [
                        "agents",
                        "mint"
                    ]
                },
                "MockClientAgent": {
                    "$dup": [
                        "agents",
                        "client"
                    ]
                },
                "QueueAgent": {
                    "$dup": [
                        "agents",
                        "queue"
                    ]
                }
            },
            "hash": "642a509287e839b910ea211ee0211a101d66df3b1a621f4e46a90b21d2e92361",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "realm": "localhost",
            "satoshis": 0
        },
        "src": "class Catalog {\n    static async preDeploy() {\n        this.agents = {\n            client: Catalog.deps.MockClientAgent,\n            // 'explorer': Catalog.deps.Explorer,\n            mint: Catalog.deps.MintAgent,\n            queue: Catalog.deps.QueueAgent,\n            bot1: Catalog.deps.Bot1ValidatorAgent,\n            bot2: Catalog.deps.Bot2ValidatorAgent,\n            bot3: Catalog.deps.Bot3ValidatorAgent,\n            bot4: Catalog.deps.Bot4ValidatorAgent,\n            bot5: Catalog.deps.Bot5ValidatorAgent,\n            bot6: Catalog.deps.Bot6ValidatorAgent,\n        };\n    }\n}",
        "version": "04"
    },
    "jig://baf0d8bc0aa9ae8a96caaf5d40441d2d2e58fc179b38e3dff62bb2dfd5c229bb_o1": {
        "cls": {
            "$jig": "34dd393811e945ab6de5322d6ed250110a71b5edacea71fb223a5930c4948996_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                12,
                12,
                7
            ],
            "appearance": {
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 0,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Mock",
            "hpBonus": 0,
            "level": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "n2bsHNAbYUDmWMHiPaVb8QiFTZzLmP8BmE",
            "race": 1,
            "satoshis": 0,
            "skills": [
                0,
                1,
                2,
                31
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://afb45b05d033e7745b5b28ebcc5dbd8a99981f736cb6809d59a50fcf5f8cd822_o1": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "41ffca43394bf75d46ef6dc0d935dcdc639496997f047434e63f9b148fdad9a0_o1"
            },
            "location": "_o1",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o1",
            "owner": "n2bsHNAbYUDmWMHiPaVb8QiFTZzLmP8BmE",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o1": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                9,
                9,
                11
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug",
            "hpBonus": 0,
            "level": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                36,
                35,
                40,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o11": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
            },
            "location": "_o11",
            "mint": null,
            "minter": null,
            "nonce": 1,
            "origin": "_o11",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://1351a43bb23000432f4259e661096e33d2b9f3f0ba13b52c7a2b7f94d8b016df_o2": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "41ffca43394bf75d46ef6dc0d935dcdc639496997f047434e63f9b148fdad9a0_o1"
            },
            "location": "_o2",
            "mint": null,
            "minter": null,
            "nonce": 2,
            "origin": "afb45b05d033e7745b5b28ebcc5dbd8a99981f736cb6809d59a50fcf5f8cd822_o1",
            "owner": "n2bsHNAbYUDmWMHiPaVb8QiFTZzLmP8BmE",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://1351a43bb23000432f4259e661096e33d2b9f3f0ba13b52c7a2b7f94d8b016df_o4": {
        "cls": {
            "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
        },
        "kind": "jig",
        "props": {
            "itemDef": {
                "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
            },
            "location": "_o4",
            "mint": null,
            "minter": null,
            "nonce": 2,
            "origin": "4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o11",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "satoshis": 0
        },
        "version": "04"
    },
    "jig://1351a43bb23000432f4259e661096e33d2b9f3f0ba13b52c7a2b7f94d8b016df_o5": {
        "cls": {
            "$jig": "8ff616fe64f5f547c747a09cc6a12b9164787e368f8361faa508d4aac371e58e_o1"
        },
        "kind": "jig",
        "props": {
            "actor": "031d1d8beba70108ece5b241b2070bd02fdec6ed8f0943190c7ad7fddf84b40868",
            "battlePlayers": [
                {
                    "armor": {
                        "$und": 1
                    },
                    "coin": {
                        "$und": 1
                    },
                    "fighter": {
                        "$jig": "_o1"
                    },
                    "mainhand": {
                        "$jig": "41ffca43394bf75d46ef6dc0d935dcdc639496997f047434e63f9b148fdad9a0_o1"
                    },
                    "offhand": {
                        "$und": 1
                    },
                    "owner": "n2bsHNAbYUDmWMHiPaVb8QiFTZzLmP8BmE",
                    "pubkey": "035b8e004ef2b770e725471b6f0cdbc54b5ec22c5d7a7faac1c9f580070ed4fe92",
                    "skills": [
                        {
                            "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                        },
                        {
                            "$jig": "17d728beb0e367d26ce9537d5cc4b2752a5232f043a5d6fb6fe4e5f7b7a3424b_o1"
                        },
                        {
                            "$jig": "84e7dbd4661e0e48e14bcd560082c0fa08989be775dd3a4361935605a2b71d45_o1"
                        }
                    ],
                    "tags": []
                },
                {
                    "armor": {
                        "$und": 1
                    },
                    "coin": {
                        "$und": 1
                    },
                    "fighter": {
                        "$jig": "_o3"
                    },
                    "mainhand": {
                        "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
                    },
                    "offhand": {
                        "$und": 1
                    },
                    "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
                    "pubkey": "031d1d8beba70108ece5b241b2070bd02fdec6ed8f0943190c7ad7fddf84b40868",
                    "skills": [
                        {
                            "$dup": [
                                "battlePlayers",
                                "0",
                                "skills",
                                "0"
                            ]
                        }
                    ],
                    "tags": [
                        "bot"
                    ]
                }
            ],
            "battlegroundTier": 1,
            "dice": {
                "$arb": {
                    "random": "cc302b806574758a536fe96a07edf69e363384a4418af7a1659a2a497a584598"
                },
                "T": {
                    "$jig": "301527c6508489f3fa79f77173aa3f6c76711b096bcdb49e9f2cfcdb6d784ff7_o1"
                }
            },
            "id": "d67e8f33243071c2724e23e69a363a2acd0e00c9dbb3fb1a1ab101c4ce03aa0a",
            "location": "_o5",
            "nonce": 1,
            "origin": "_o5",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "random": "d67e8f33243071c2724e23e69a363a2acd0e00c9dbb3fb1a1ab101c4ce03aa0a",
            "rules": {
                "$jig": "4eb6d93003a5f5bb4cff711d738203ad56afdba2d79ca7ff84f165d5337723ab_o1"
            },
            "satoshis": 0,
            "stage": "created",
            "state": {
                "actionLogs": [
                    {
                        "actionLogMessage": "<gradient=!player0-color><b>MOCK</b> <gradient=!log-color>attempts Initiative: 8\n<gradient=!player1-color><b>BULLYWUG</b> <gradient=!log-color>won Initiative",
                        "playerIndex": 0,
                        "results": [
                            {
                                "attackerHp": 11,
                                "attackerStatusEffectsIncrement": [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                "damageOutput": [
                                    {
                                        "damage": [
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                        ],
                                        "defenderHp": 13,
                                        "defenderReduction": [
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                        ]
                                    }
                                ],
                                "defenderStatusEffectsIncrement": [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                "hpIncrement": 0,
                                "outcome": 0,
                                "rolls": [
                                    {
                                        "ability": 1,
                                        "bonusFromAbility": 1,
                                        "bonusFromSkill": 0,
                                        "discarded": false,
                                        "size": 20,
                                        "totalBonus": 1,
                                        "type": 3,
                                        "value": 7
                                    }
                                ]
                            }
                        ],
                        "skillType": 1
                    },
                    {
                        "actionLogMessage": "<gradient=!player1-color><b>BULLYWUG</b> <gradient=!log-color>attempts Initiative: 20",
                        "playerIndex": 1,
                        "results": [
                            {
                                "attackerHp": 13,
                                "attackerStatusEffectsIncrement": [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                "damageOutput": [
                                    {
                                        "damage": [
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                        ],
                                        "defenderHp": 11,
                                        "defenderReduction": [
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                        ]
                                    }
                                ],
                                "defenderStatusEffectsIncrement": [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                ],
                                "hpIncrement": 0,
                                "outcome": 1,
                                "rolls": [
                                    {
                                        "ability": 1,
                                        "bonusFromAbility": {
                                            "$n0": 1
                                        },
                                        "bonusFromSkill": 0,
                                        "discarded": false,
                                        "size": 20,
                                        "totalBonus": {
                                            "$n0": 1
                                        },
                                        "type": 3,
                                        "value": 20
                                    }
                                ]
                            }
                        ],
                        "skillType": 1
                    }
                ],
                "fighterStates": [
                    {
                        "areLoaded": [
                            false,
                            false,
                            false
                        ],
                        "critChance": 1,
                        "evasion": 11,
                        "hp": 11,
                        "initiative": 8,
                        "maxHP": 11,
                        "modifiers": [
                            1,
                            1,
                            -1
                        ],
                        "statusEffectsRound": [
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0
                        ],
                        "turnCounter": 0,
                        "validActions": [
                            true,
                            true,
                            true
                        ]
                    },
                    {
                        "areLoaded": [
                            false,
                            false,
                            false
                        ],
                        "critChance": 2,
                        "evasion": 10,
                        "hp": 13,
                        "initiative": 20,
                        "maxHP": 13,
                        "modifiers": [
                            1,
                            {
                                "$n0": 1
                            },
                            0
                        ],
                        "statusEffectsRound": [
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0
                        ],
                        "turnCounter": 0,
                        "validActions": [
                            true
                        ]
                    }
                ],
                "playerToAct": 1,
                "status": 0
            },
            "stateHash": "4af3ebb225c56eb97eba91d75eaefbda7752420824a1832508df80aa4bfbb0bc",
            "stateHistory": [],
            "status": 0,
            "timestamp": 1605721834896,
            "turnCount": 0,
            "validator": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6"
        },
        "version": "04"
    },
    "jig://8ff616fe64f5f547c747a09cc6a12b9164787e368f8361faa508d4aac371e58e_o1": {
        "kind": "code",
        "props": {
            "LevelXPReward": [
                0,
                100,
                200,
                300,
                600,
                1200,
                2400,
                0,
                435,
                556,
                713,
                913,
                1170,
                1498,
                1919,
                2458,
                3148,
                4032,
                5164,
                6614,
                8472
            ],
            "MaxRounds": 100,
            "deps": {
                "BattleToken": {
                    "$jig": "1dfa9766de8d30e539501df075657c7be85df1f9e924f241bd5683ce866dcd31_o1"
                },
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "Dice": {
                    "$jig": "301527c6508489f3fa79f77173aa3f6c76711b096bcdb49e9f2cfcdb6d784ff7_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "KronoCoin": {
                    "$jig": "62bec1d8cd5b0d5e08708049e52f693721bd454e6383fb766c256403c1fbba83_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "KronoJig": {
                    "$jig": "1e714f99c065eb795a90701ce5a225e2a422f21d85bf573b34dde50700167175_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                }
            },
            "hash": "1a7484ac9d17cd3fb0e0ffdf87194a72540f76690489916ffc0748fbdd879525",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class Battle extends KronoJig {\n    init(validator, rules, players, id, timestamp) {\n        this.validator = validator;\n        this.id = this.random = id;\n        this.timestamp = timestamp;\n        this.rules = rules;\n\n        this.battlePlayers = players.map(player => rules.joinBattle(validator, player));\n        this.battlegroundTier = rules.tier;\n        this.dice = new Dice(id);\n        this.state = BattleUtils.buildBattleState(players, this.dice);\n        this.turnCount = 0;\n\n        this.stateHash = Sha256.hashToHex(JSON.stringify(this.state));\n        this.status = Constants.Status.Open;\n        this.stateHistory = [];\n        this.actor = players[this.state.playerToAct].pubkey;\n        this.stage = 'created';\n    }\n\n    cancel() {\n        // TODO refund\n        this.destroy();\n    }\n\n    begin(timeout) {\n        if (this.stage !== 'created') throw new Error('Invalid Stage');\n        this.timeout = timeout;\n        this.tokens = this.battlePlayers.map(player => new BattleToken(player.owner));\n        this.stage = 'open';\n    }\n\n    resolve(random, timestamp, message, timeout) {\n        if (this.status !== Constants.Status.Open) throw new Error('Invalid Status');\n        if (!BattleUtils.validateRandom(random, this.random)) throw new Error('Invalid Random');\n        this.random = random;\n        this.lastMessage = {...message};\n\n        this.stateHistory[this.turnCount] = this.getState();\n        const state = KronoClass.deepClone(this.state);\n        state.actionLogs = [];\n        this.dice = new Dice(random);\n        if (timestamp < this.timeout) {\n            const { actionIndex, stateHash } = JSON.parse(message.payload);\n            if (actionIndex === -1) {\n                this.state = BattleUtils.skipTurn(this, state, this.dice, timestamp);\n            } else {\n                if (stateHash !== this.stateHash) throw new Error('Invalid State Hash');\n                const attacker = this.battlePlayers[this.state.playerToAct];\n                const skill = attacker.skills[actionIndex];\n                if (!skill) throw new Error(`${attacker.fighter.displayName} used an invalid Skill ID: ${actionIndex}`);\n                this.state = skill.run(this, state, this.dice, timestamp);\n            }\n        } else {\n            this.state = BattleUtils.skipTurn(this, state, this.dice, timestamp);\n        }\n\n        this.status = this.state.status;\n        this.timestamp = timestamp;\n        this.timeout = timeout;\n        if (this.status === Constants.Status.Complete) {\n            this._finalize(this.state.playerToAct);\n        }\n        this._endTurn();\n    }\n\n    forfeit(pubkey, timestamp, message) {\n        if (this.status !== Constants.Status.Open) throw new Error('Invalid Status');\n        const playerIndex = this.battlePlayers.findIndex(p => p.pubkey === pubkey);\n        const victorIndex = this.battlePlayers.findIndex(p => p.pubkey !== pubkey);\n        this.lastMessage = message;\n        this.stateHistory[this.turnCount] = this.getState();\n\n        const state = KronoClass.deepClone(this.state);\n        state.victor = {\n            pubkey: this.battlePlayers[victorIndex].pubkey,\n            owner: this.battlePlayers[victorIndex].owner,\n            fighter: this.battlePlayers[victorIndex].fighter,\n        };\n        state.actionLogs = [{\n            playerIndex: playerIndex,\n            actionLogMessage: `<gradient=!player${playerIndex}-color><b>${this.battlePlayers[playerIndex].fighter.displayName.toUpperCase()}</b> <gradient=!log-color> Forfeited`\n        }];\n        state.playerToAct = victorIndex;\n        this.state = state;\n\n        this.status = state.status = Constants.Status.Forfeit;\n        this.timestamp = timestamp;\n        this._finalize(victorIndex);\n        this._endTurn();\n    }\n\n    _endTurn() {\n        this.turnCount++;\n        this.hash = Sha256.hashToHex(JSON.stringify(this.state));\n        this.actor = this.battlePlayers[this.state.playerToAct].pubkey;\n    }\n\n    _finalize(victorIndex) {\n        const victor = this.victor = {\n            owner: this.battlePlayers[victorIndex].owner,\n            pubkey: this.battlePlayers[victorIndex].pubkey,\n            fighter: this.battlePlayers[victorIndex].fighter\n        };\n        this.xp = Battle.LevelXPReward[this.battlePlayers[victorIndex].fighter.level];\n        if(this.rules.fee) {\n            const coin = new KronoCoin(...this.battlePlayers.map(p => p.coin));\n            // const fee = \n            coin.send(victor.owner, this.rules.reward);\n            // fee.send(feeAddress);\n        }\n        \n\n        if (this.rules.rewardTiers && !this.battlePlayers[victorIndex].tags.includes('bot')) {\n            const tierRoll = this.dice.roll(1, 100);\n            let acc = 0;\n            for (const tier of this.rules.rewardTiers) {\n                if ((acc += tier.percent) < tierRoll) continue;\n                const itemRoll = this.dice.roll(1, tier.itemDefs.length) - 1;\n                const itemDef = tier.itemDefs[itemRoll]; //KronoClass.deepClone(tier.itemDefs[itemRoll]);\n                this.reward = itemDef;\n                new KronoItem(itemDef, victor.owner);\n                break;\n            }\n        }\n        this.owner = victor.owner;\n    }\n\n    getState() {\n        const state = {\n            ...this.state,\n            actor: this.actor,\n            battleId: this.id,\n            random: this.random,\n            stateHash: this.stateHash,\n            timestamp: this.timestamp,\n            turnCount: this.turnCount,\n            battleStatus: this.status,\n            submitId: `${this.stateHash}|${this.turnCount}`\n        };\n        return state;\n    }\n\n    toObject(skipKeys = []) {\n        return super.toObject([...skipKeys, 'tokens']);\n    }\n}",
        "version": "04"
    },
    "jig://1dfa9766de8d30e539501df075657c7be85df1f9e924f241bd5683ce866dcd31_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "KronoJig": {
                    "$jig": "1e714f99c065eb795a90701ce5a225e2a422f21d85bf573b34dde50700167175_o1"
                }
            },
            "hash": "e7c4adb30db069c010c114a9176f6d3db125b813a6c092b13b42d33f5eb0df76",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class BattleToken extends KronoJig {\n    init(owner) {\n        this.battle = caller;\n        this.owner = owner;\n    }\n\n    toObject(skipKeys = []) {\n        const obj = super.toObject([...skipKeys, 'battle']);\n        if(!skipKeys.includes('battle')) {\n            obj.battle = this.battle.toObject(['tokens']);\n        }\n        return obj;\n    }\n}",
        "version": "04"
    },
    "jig://1e714f99c065eb795a90701ce5a225e2a422f21d85bf573b34dde50700167175_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Jig": {
                    "$jig": "native://Jig"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "hash": "81b33b5a285b38b5338dd21c288001ae8256c3973f52918fc8c27ddca360edd1",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0,
            "sealed": false
        },
        "src": "class KronoJig extends Jig {\n    toObject(skipKeys = [], visited = new Set()) {\n        if(visited.has(this)) return;\n        visited.add(this);\n        return KronoClass.cloneChildren(this, skipKeys, visited);\n    }\n\n    static toObject(skipKeys = [], visited = new Set()) {\n        if(visited.has(this)) return;\n        visited.add(this);\n        return KronoClass.cloneChildren(this, skipKeys, visited);\n    }\n}",
        "version": "04"
    },
    "jig://c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1": {
        "kind": "code",
        "props": {
            "Ability": {
                "Dexterity": 1,
                "Intelligence": 2,
                "Strength": 0
            },
            "AbilityNames": {
                "0": "Strength",
                "1": "Dexterity",
                "2": "Intelligence"
            },
            "AbilityScoreLevels": [
                3,
                5,
                7,
                10,
                14,
                18
            ],
            "DamageType": {
                "Bludgeoning": 2,
                "Cold": 4,
                "Fire": 3,
                "Lightning": 6,
                "Mystic": 8,
                "Necrotic": 5,
                "Piercing": 0,
                "Poison": 7,
                "Slashing": 1,
                "Warfare": 9
            },
            "DamageTypeNames": {
                "0": "Piercing",
                "1": "Slashing",
                "2": "Bludgeoning",
                "3": "Fire",
                "4": "Cold",
                "5": "Necrotic",
                "6": "Lightning",
                "7": "Poison",
                "8": "Mystic",
                "9": "Warfare"
            },
            "EquipSlot": {
                "Body": 2,
                "Mainhand": 0,
                "Offhand": 1
            },
            "ItemProperty": {
                "Ambivalent": 2,
                "Assault": 3,
                "Brutal": 0,
                "Dexterous": 1,
                "Heavy": 9,
                "Keen": 7,
                "Light": 8,
                "Loading": 5,
                "Precision": 4,
                "Strenuous": 11,
                "Swift": 6,
                "Versatile": 10
            },
            "ItemQuality": {
                "Common": 1,
                "Epic": 4,
                "Legendary": 5,
                "Poor": 0,
                "Rare": 3,
                "Special": 6,
                "Uncommon": 2
            },
            "ItemType": {
                "BareFist": 15,
                "Battleaxe": 1,
                "Bow": 2,
                "ClothArmor": 11,
                "Club": 3,
                "Crossbow": 16,
                "Dagger": 4,
                "Greatsword": 5,
                "LeatherArmor": 12,
                "Mace": 6,
                "MailArmor": 13,
                "Maul": 7,
                "None": 0,
                "Pike": 8,
                "PlateArmor": 14,
                "Quarterstaff": 9,
                "Shortsword": 10,
                "Wizardstaff": 17
            },
            "LevelUpXP": [
                0,
                100,
                300,
                600,
                1200,
                2400,
                4800,
                9600,
                19200,
                38400,
                76800,
                128000,
                204800,
                332800,
                537600,
                870400,
                1408000,
                2278400,
                3686400,
                5964800,
                9651200
            ],
            "LevelXPReward": [
                0,
                100,
                200,
                300,
                600,
                1200,
                2400,
                0,
                435,
                556,
                713,
                913,
                1170,
                1498,
                1919,
                2458,
                3148,
                4032,
                5164,
                6614,
                8472
            ],
            "Levels": [
                {
                    "Id": 1,
                    "Tiers": [
                        1
                    ]
                },
                {
                    "Id": 2,
                    "Tiers": [
                        1,
                        2
                    ]
                },
                {
                    "Id": 3,
                    "Tiers": [
                        1,
                        2,
                        3
                    ]
                },
                {
                    "Id": 4,
                    "Tiers": [
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "Id": 5,
                    "Tiers": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "Id": 6,
                    "Tiers": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                {
                    "Id": 7,
                    "Tiers": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ]
                },
                {
                    "Id": 8,
                    "Tiers": [
                        3,
                        4
                    ]
                },
                {
                    "Id": 9,
                    "Tiers": [
                        3,
                        4
                    ]
                },
                {
                    "Id": 10,
                    "Tiers": [
                        4
                    ]
                },
                {
                    "Id": 11,
                    "Tiers": [
                        4,
                        5
                    ]
                },
                {
                    "Id": 12,
                    "Tiers": [
                        4,
                        5
                    ]
                },
                {
                    "Id": 13,
                    "Tiers": [
                        4,
                        5
                    ]
                },
                {
                    "Id": 14,
                    "Tiers": [
                        5
                    ]
                },
                {
                    "Id": 15,
                    "Tiers": [
                        5,
                        6
                    ]
                },
                {
                    "Id": 16,
                    "Tiers": [
                        5,
                        6
                    ]
                },
                {
                    "Id": 17,
                    "Tiers": [
                        5,
                        6
                    ]
                },
                {
                    "Id": 18,
                    "Tiers": [
                        6
                    ]
                },
                {
                    "Id": 19,
                    "Tiers": [
                        6
                    ]
                },
                {
                    "Id": 20,
                    "Tiers": [
                        7
                    ]
                }
            ],
            "MaxRounds": 100,
            "Outcome": {
                "Critical": 2,
                "Fail": 0,
                "Success": 1
            },
            "Race": {
                "Dwarf": 1,
                "Elf": 2,
                "Human": 0
            },
            "RollType": {
                "Dexterity": 1,
                "FighterCrit": 7,
                "Initiative": 3,
                "Intelligence": 2,
                "Strength": 0,
                "ToDamage": 5,
                "ToHit": 4,
                "WeaponCrit": 6
            },
            "SkillData": {
                "0": {
                    "affectsOpponent": false,
                    "origin": "attack",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "1": {
                    "affectsOpponent": false,
                    "origin": "focus",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "2": {
                    "affectsOpponent": false,
                    "origin": "hide",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "3": {
                    "affectsOpponent": false,
                    "origin": "burn",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "4": {
                    "affectsOpponent": false,
                    "origin": "chill",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "5": {
                    "affectsOpponent": false,
                    "origin": "coat-weapon",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "6": {
                    "affectsOpponent": false,
                    "origin": "dirty-fighting",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "7": {
                    "affectsOpponent": false,
                    "origin": "heal",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        20
                    ],
                    "unlockableSkills": []
                },
                "8": {
                    "affectsOpponent": false,
                    "origin": "hex",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "9": {
                    "affectsOpponent": false,
                    "origin": "mark",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "10": {
                    "affectsOpponent": false,
                    "origin": "meditate",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "11": {
                    "affectsOpponent": false,
                    "origin": "phase-shift",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "12": {
                    "affectsOpponent": false,
                    "origin": "pinning-strike",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "13": {
                    "affectsOpponent": false,
                    "origin": "power-attack",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "14": {
                    "affectsOpponent": false,
                    "origin": "shock",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "15": {
                    "affectsOpponent": false,
                    "origin": "smite",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "16": {
                    "affectsOpponent": false,
                    "origin": "sneak-attack",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "17": {
                    "affectsOpponent": false,
                    "origin": "stun",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "18": {
                    "affectsOpponent": false,
                    "origin": "taunt",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "19": {
                    "affectsOpponent": false,
                    "origin": "battle-cry",
                    "rank": 0,
                    "requiredLevel": 3,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "20": {
                    "affectsOpponent": false,
                    "origin": "cleanse",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "21": {
                    "affectsOpponent": false,
                    "origin": "Curse",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        8
                    ],
                    "unlockableSkills": []
                },
                "22": {
                    "affectsOpponent": false,
                    "origin": "fireball",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "23": {
                    "affectsOpponent": false,
                    "origin": "freeze",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "24": {
                    "affectsOpponent": false,
                    "origin": "gore",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        12
                    ],
                    "unlockableSkills": []
                },
                "25": {
                    "affectsOpponent": false,
                    "origin": "lightning-bolt",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "26": {
                    "affectsOpponent": false,
                    "origin": "lock-and-load",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        30
                    ],
                    "unlockableSkills": []
                },
                "27": {
                    "affectsOpponent": false,
                    "origin": "second-wind",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        37
                    ],
                    "unlockableSkills": []
                },
                "28": {
                    "affectsOpponent": false,
                    "origin": "elementalist",
                    "rank": 1,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": [
                        3,
                        4,
                        14
                    ]
                },
                "29": {
                    "affectsOpponent": false,
                    "origin": "runesmith",
                    "rank": 1,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        35
                    ],
                    "unlockableSkills": [
                        40,
                        46
                    ]
                },
                "30": {
                    "affectsOpponent": false,
                    "origin": "sharpshooter",
                    "rank": 1,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        36
                    ],
                    "unlockableSkills": [
                        26,
                        44
                    ]
                },
                "31": {
                    "affectsOpponent": false,
                    "origin": "dwarven",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "32": {
                    "affectsOpponent": false,
                    "origin": "elven",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "33": {
                    "affectsOpponent": false,
                    "origin": "human",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "34": {
                    "affectsOpponent": false,
                    "origin": "ambidextrous",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "35": {
                    "affectsOpponent": false,
                    "origin": "armored",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "36": {
                    "affectsOpponent": false,
                    "origin": "cirurgical",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "37": {
                    "affectsOpponent": false,
                    "origin": "durable",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "38": {
                    "affectsOpponent": false,
                    "origin": "strong",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "39": {
                    "affectsOpponent": false,
                    "origin": "unarmed",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "40": {
                    "affectsOpponent": false,
                    "origin": "improved-armored",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        29
                    ],
                    "unlockableSkills": []
                },
                "41": {
                    "affectsOpponent": false,
                    "origin": "improved-power-attack",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        13
                    ],
                    "unlockableSkills": []
                },
                "42": {
                    "affectsOpponent": false,
                    "origin": "improved-sneak-attack",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        16
                    ],
                    "unlockableSkills": []
                },
                "43": {
                    "affectsOpponent": false,
                    "origin": "opportunistic",
                    "rank": 2,
                    "requiredLevel": 3,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "44": {
                    "affectsOpponent": false,
                    "origin": "precise",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        30
                    ],
                    "unlockableSkills": []
                },
                "45": {
                    "affectsOpponent": false,
                    "origin": "vengeful",
                    "rank": 2,
                    "requiredLevel": 3,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "46": {
                    "affectsOpponent": false,
                    "origin": "warmongering",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        29
                    ],
                    "unlockableSkills": []
                },
                "47": {
                    "affectsOpponent": false,
                    "origin": "slippery",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                }
            },
            "SkillLevels": [
                2,
                4,
                6,
                8,
                12,
                16,
                20
            ],
            "SkillType": {
                "Ambidextrous": 34,
                "Armored": 35,
                "Attack": 0,
                "BattleCry": 19,
                "Burn": 3,
                "Chill": 4,
                "Cirurgical": 36,
                "Cleanse": 20,
                "CoatWeapon": 5,
                "Curse": 21,
                "DirtyFighting": 6,
                "Durable": 37,
                "Dwarven": 31,
                "Elementalist": 28,
                "Elven": 32,
                "Fireball": 22,
                "Focus": 1,
                "Freeze": 23,
                "Gore": 24,
                "Heal": 7,
                "Hex": 8,
                "Hide": 2,
                "Human": 33,
                "ImprovedArmored": 40,
                "ImprovedPowerAttack": 41,
                "ImprovedSneakAttack": 42,
                "LightningBolt": 25,
                "LockAndLoad": 26,
                "Mark": 9,
                "Meditate": 10,
                "Opportunistic": 43,
                "PhaseShift": 11,
                "PinningStrike": 12,
                "PowerAttack": 13,
                "Precise": 44,
                "Runesmith": 29,
                "SecondWind": 27,
                "Sharpshooter": 30,
                "Shock": 14,
                "Slippery": 47,
                "Smite": 15,
                "SneakAttack": 16,
                "Strong": 38,
                "Stun": 17,
                "Taunt": 18,
                "Unarmed": 39,
                "Vengeful": 45,
                "Warmongering": 46
            },
            "Status": {
                "Complete": 1,
                "Forfeit": 2,
                "Open": 0
            },
            "StatusEffect": {
                "Cursed": 0,
                "Demoralized": 12,
                "Ethereal": 1,
                "Focused": 2,
                "Hexed": 3,
                "Hidden": 4,
                "Inspired": 5,
                "Marked": 6,
                "Meditative": 7,
                "Poisoned": 8,
                "Poisonous": 11,
                "Stunned": 9,
                "Taunted": 10
            },
            "deps": {},
            "hash": "08e631971cb49f14cbd1a8014ee9cbdd1d5fb468decf5d520159df62c9814c3d",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class Constants {}",
        "version": "04"
    },
    "jig://fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "Dice": {
                    "$jig": "301527c6508489f3fa79f77173aa3f6c76711b096bcdb49e9f2cfcdb6d784ff7_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                }
            },
            "hash": "ee802b08a08cca3a1c05aad230a43d32d0a6b6dc2e3ffe760ec56bc3ac7145a5",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class BattleUtils extends KronoClass {\n    static isUnderStatusEffect(fighterState, statusEffect, round) {\n        return fighterState.statusEffectsRound[statusEffect] > round;\n    }\n\n    static validateRandom(random, prevRandom) {\n        let hashBytes = new Uint8Array(32);\n        for (let i = 0; i < 64; i += 2) {\n            hashBytes[i / 2] = parseInt(random.slice(i, i + 2), 16);\n        }\n        return Sha256.hashToHex(hashBytes) === prevRandom;\n    }\n\n    static rollDmgDice(ability, diceCount, diceFaces, dice, rolls, type) {\n        let damage = 0;\n        for (var i = 0; i < diceCount; ++i) {\n            let toDamageNativeRoll = diceFaces === 0 ? 0 : dice.roll(1, diceFaces);\n            rolls.push({\n                type: type,\n                ability: ability,\n                size: diceFaces,\n                value: toDamageNativeRoll\n            });\n            damage += toDamageNativeRoll;\n        }\n        return damage;\n    }\n\n    static max(arr) {\n        var highest = Number.NEGATIVE_INFINITY;\n        var tmp;\n        for (var i = arr.length - 1; i >= 0; i--) {\n            tmp = arr[i];\n            if (tmp > highest) highest = tmp;\n        }\n        return highest;\n    }\n\n    static min(arr) {\n        var lowest = Number.POSITIVE_INFINITY;\n        var tmp;\n        for (var i = arr.length - 1; i >= 0; i--) {\n            tmp = arr[i];\n            if (tmp < lowest) lowest = tmp;\n        }\n        return lowest;\n    }\n\n    static applyStatusEffect(actionLog, battle, state, statusEffect, increment, applyToAttacker = true) {\n        if (applyToAttacker) {\n            state.fighterStates[state.playerToAct].statusEffectsRound[statusEffect] = state.fighterStates[state.playerToAct].turnCounter + increment + 1;\n            if (!actionLog.results[actionLog.results.length - 1].attackerStatusEffectsIncrement) {\n                actionLog.results[actionLog.results.length - 1].attackerStatusEffectsIncrement = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n            }\n            actionLog.results[actionLog.results.length - 1].attackerStatusEffectsIncrement[statusEffect] = increment;\n            actionLog.actionLogMessage += BattleUtils.getPrettifiedPlayerName(battle, state, !applyToAttacker);\n        } else {\n            state.fighterStates[state.playerToAct ? 0 : 1].statusEffectsRound[statusEffect] = state.fighterStates[state.playerToAct ? 0 : 1].turnCounter + increment;\n            if (!actionLog.results[actionLog.results.length - 1].defenderStatusEffectsIncrement) {\n                actionLog.results[actionLog.results.length - 1].defenderStatusEffectsIncrement = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n            }\n            actionLog.results[actionLog.results.length - 1].defenderStatusEffectsIncrement[statusEffect] = increment;\n            actionLog.actionLogMessage += BattleUtils.getOpponentName(battle, state, applyToAttacker);\n        }\n\n        if(increment > 90){\n            actionLog.actionLogMessage += `<gradient=!status-effect><i> is ${BattleUtils.parseStatusEffect(statusEffect)}\\n`;\n        }else{\n            actionLog.actionLogMessage += `<gradient=!status-effect><i> is ${BattleUtils.parseStatusEffect(statusEffect)} for ${increment} turns</i>\\n`;\n        }\n    }\n\n    static makeStatusEffectActionLog(battle, state, skill, statusEffect, increment, log, applyToAttacker = true) {\n        let attackerState = state.fighterStates[state.playerToAct];\n        let defenderState = state.fighterStates[state.playerToAct ? 0 : 1];\n\n        let actionLog = {\n            playerIndex: state.playerToAct,\n            skillType: skill,\n            results: [{\n                rolls: [],\n                outcome: Constants.Outcome.Success,\n                damageOutput: [{\n                    damage: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                    defenderHp: defenderState.hp,\n                    defenderReduction: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                }],\n                hpIncrement: 0,\n                attackerHp: attackerState.hp\n            }],\n            actionLogMessage: log\n        };\n\n        this.applyStatusEffect(actionLog, battle, state, statusEffect, increment, applyToAttacker);\n\n        return actionLog;\n    }\n\n    static abilityCheckAndApplyStatusEffect(battle, state, dice, skill, attackerAbility, defenderAbility, statusEffect, duration, applyToAttacker, log) {\n        const attackerState = state.fighterStates[state.playerToAct];\n        const defenderState = state.fighterStates[state.playerToAct ? 0 : 1];\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n\n        // Rolls\n        let nativeRoll = dice.roll(1, 20);\n        let rolls = [];\n        rolls.push({\n            type: defenderAbility,\n            ability: attackerAbility,\n            size: 20,\n            value: nativeRoll\n        });\n\n        // Check\n        const defenderDC = 10 + defenderState.modifiers[defenderAbility];\n        const attackerMod = attackerState.modifiers[attackerAbility];\n        const outcome = nativeRoll + attackerMod >= defenderDC ?\n            Constants.Outcome.Success : \n            Constants.Outcome.Fail;\n\n        log += `${playerName} <gradient=!log-color>attempts to ${BattleUtils.parseSkillName(skill)} : *${BattleUtils.parseSkillOutcome(outcome)}* : (${nativeRoll} + ${attackerMod} vs ${defenderDC} DC)\\n`;\n\n        // Success\n        if (outcome === Constants.Outcome.Success) {\n            var al = BattleUtils.makeStatusEffectActionLog(battle, state, skill, statusEffect, duration, log, applyToAttacker);\n            al.results[0].rolls = rolls;\n            al.results[0].outcome = outcome;\n            return al;\n        }\n\n        // Failure\n        return {\n            playerIndex: state.playerToAct,\n            skillType: skill,\n            results: [{\n                rolls: rolls,\n                outcome: outcome,\n                damageOutput: [{\n                    damage: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                    defenderHp: defenderState.hp,\n                    defenderReduction: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                }],\n                attackerStatusEffectsIncrement: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                hpIncrement: 0,\n                attackerHp: attackerState.hp\n            }],\n            actionLogMessage: log\n        };\n    }\n\n    static parseAbility(ability) {\n        return ability === 0 ? 'Strength' : (ability === 1 ? 'Dexterity' : 'Intelligence');\n    }\n\n    static parseAttackOutcome(outcome) {\n        return outcome === 0 ? 'Miss' : (outcome === 1 ? 'Hit' : 'Critical');\n    }\n\n    static parseSkillOutcome(outcome) {\n        return outcome === 0 ? 'Fail' : (outcome === 1 ? 'Success' : 'Critical');\n    }\n\n    static getPrettifiedName(battle, playerIndex) {\n        return `<gradient=!player${playerIndex}-color><b>${battle.battlePlayers[playerIndex].fighter.displayName.toUpperCase()}</b><gradient=!log-color>`;\n    }\n\n    static getPrettifiedPlayerName(battle, state, switchAttacker = false) {\n        let attackerIndex = switchAttacker ? (state.playerToAct ? 0 : 1) : state.playerToAct;\n        return this.getPrettifiedName(battle, attackerIndex);\n    }\n\n    static getOpponentName(battle, state, switchAttacker = false) {\n        let attackerIndex = switchAttacker ? state.playerToAct : (!state.playerToAct ? 1 : 0);\n        return this.getPrettifiedName(battle, attackerIndex);\n    }\n\n    static parseSkillName(skill) {\n        switch (skill) {\n        case Constants.SkillType.Attack:\n            return 'Attack';\n        case Constants.SkillType.BattleCry:\n            return 'Battle Cry';\n        case Constants.SkillType.Burn:\n            return 'Burn';\n        case Constants.SkillType.Chill:\n            return 'Chill';\n        case Constants.SkillType.Cleanse:\n            return 'Cleanse';\n        case Constants.SkillType.CoatWeapon:\n            return 'Coat Weapon';\n        case Constants.SkillType.Curse:\n            return 'Curse';\n        case Constants.SkillType.DirtyFighting:\n            return 'Dirty Fighting';\n        case Constants.SkillType.Fireball:\n            return 'Fireball';\n        case Constants.SkillType.Focus:\n            return 'Focus';\n        case Constants.SkillType.Freeze:\n            return 'Freeze';\n        case Constants.SkillType.Gore:\n            return 'Gore';\n        case Constants.SkillType.Heal:\n            return 'Heal';\n        case Constants.SkillType.Hex:\n            return 'Hex';\n        case Constants.SkillType.Hide:\n            return 'Hide';\n        case Constants.SkillType.LightningBolt:\n            return 'Lightning Bolt';\n        case Constants.SkillType.LockAndLoad:\n            return 'Lock And Load';\n        case Constants.SkillType.Mark:\n            return 'Mark';\n        case Constants.SkillType.Meditate:\n            return 'Meditate';\n        case Constants.SkillType.PhaseShift:\n            return 'Phase Shift';\n        case Constants.SkillType.PinningStrike:\n            return 'Pinning Strike';\n        case Constants.SkillType.PowerAttack:\n            return 'Power Attack';\n        case Constants.SkillType.SecondWind:\n            return 'Second Wind';\n        case Constants.SkillType.Shock:\n            return 'Shock';\n        case Constants.SkillType.Smite:\n            return 'Smite';\n        case Constants.SkillType.SneakAttack:\n            return 'Sneak Attack';\n        case Constants.SkillType.Stun:\n            return 'Stun';\n        case Constants.SkillType.Taunt:\n            return 'Taunt';\n        }\n    }\n\n    static parseStatusEffect(statusEffect) {\n        switch (statusEffect) {\n        case Constants.StatusEffect.Cursed:\n            return 'cursed';\n        case Constants.StatusEffect.Ethereal:\n            return 'ethereal';\n        case Constants.StatusEffect.Focused:\n            return 'focused';\n        case Constants.StatusEffect.Hexed:\n            return 'hexed';\n        case Constants.StatusEffect.Hidden:\n            return 'hidden';\n        case Constants.StatusEffect.Inspired:\n            return 'inspired';\n        case Constants.StatusEffect.Marked:\n            return 'marked';\n        case Constants.StatusEffect.Meditative:\n            return 'meditative';\n        case Constants.StatusEffect.Poisoned:\n            return 'poisoned';\n        case Constants.StatusEffect.Slowed:\n            return 'slowed';\n        case Constants.StatusEffect.Stunned:\n            return 'stunned';\n        case Constants.StatusEffect.Taunted:\n            return 'taunted';\n        case Constants.StatusEffect.Poisonous:\n            return 'poisonous';\n        case Constants.StatusEffect.Demoralized:\n            return 'demoralized';\n        }\n    }\n\n    static getItemResistance(item, defenderResistance) {\n        if (item) {\n            for (var j = 0; j < 10; j++) {\n                if (item.damageReduction[j]) {\n                    defenderResistance[j] += item.damageReduction[j];\n                }\n            }\n        }\n    }\n\n    // Compute resistance according to items\n    static getDefenderResistance(player) {\n        var defenderResistance = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n        this.getItemResistance(player.mainhand, defenderResistance);\n        this.getItemResistance(player.offhand, defenderResistance);\n        this.getItemResistance(player.armor, defenderResistance);\n\n        if (player.fighter.skills.includes(Constants.SkillType.Armored)) {\n            if (player.fighter.skills.includes(Constants.SkillType.ImprovedArmored)) {\n                for (var i = 0; i < 10; i++) {\n                    defenderResistance[i] += 1;\n                }\n            }else{\n                defenderResistance[Constants.DamageType.Slashing] += 1;\n                defenderResistance[Constants.DamageType.Piercing] += 1;\n                defenderResistance[Constants.DamageType.Bludgeoning] += 1;\n            }\n        }\n\n        if (player.fighter.skills.includes(Constants.SkillType.Dwarven)) {\n            defenderResistance[Constants.DamageType.Slashing] += 1;\n            defenderResistance[Constants.DamageType.Piercing] += 1;\n            defenderResistance[Constants.DamageType.Bludgeoning] += 1;\n            // for (var j = 0; j < defenderResistance.length; j++) {\n            //     defenderResistance[j] += 1;\n            // }\n        }\n\n        return defenderResistance;\n    }\n\n    static buildBattleState(players, dice) {\n        const diceRolls = players.map(() => dice.roll(1, 20));\n        const fighterStates = players.map((player, i) => {\n            const fighterState = this.buildFighterState(player);\n            fighterState.initiative = fighterState.modifiers[Constants.Ability.Dexterity] +\n                diceRolls[i];\n            if (player.fighter.skills.includes(Constants.SkillType.Elven)) {\n                fighterState.initiative += 10;\n            }\n            fighterState.turnCounter = 0;\n            return fighterState;\n        });\n\n        let logMessage = '';\n        let playerToAct;\n        if (fighterStates[0].initiative === fighterStates[1].initiative) {\n            if (fighterStates[0].modifiers[Constants.Ability.Dexterity] === fighterStates[1].modifiers[Constants.Ability.Dexterity]) {\n                logMessage += '\\n<gradient=!log-color>It\\'s a tie, tossing a coin';\n                playerToAct = dice.roll(1, 2) - 1;\n            } else {\n                playerToAct = fighterStates[0].modifiers[Constants.Ability.Dexterity] > fighterStates[1].modifiers[Constants.Ability.Dexterity] ? 0 : 1;\n                logMessage += `\\n<gradient=!player${playerToAct}-color><b>${players[playerToAct].fighter.displayName.toUpperCase()}</b> <gradient=!log-color>has higher dexterity`;\n            }\n        } else {\n            playerToAct = fighterStates[0].initiative > fighterStates[1].initiative ? 0 : 1;\n        }\n\n        const actionLogs = fighterStates.map((fighterState, i) => {\n            return {\n                playerIndex: i,\n                skillType: Constants.SkillType.Focus,\n                results: [{\n                    rolls: [{\n                        type: Constants.RollType.Initiative,\n                        ability: Constants.Ability.Dexterity,\n                        size: 20,\n                        value: diceRolls[i],\n                        discarded: false,\n                        bonusFromAbility: fighterState.modifiers[Constants.Ability.Dexterity],\n                        bonusFromSkill: 0,\n                        totalBonus: fighterState.modifiers[Constants.Ability.Dexterity]\n                    }],\n                    outcome: playerToAct === i ?\n                        Constants.Outcome.Success :\n                        Constants.Outcome.Fail,\n                    damageOutput: [{\n                        damage: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                        defenderHp: fighterStates[i ? 0 : 1].maxHP,\n                        defenderReduction: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n                    }],\n                    attackerStatusEffectsIncrement: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                    defenderStatusEffectsIncrement: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                    hpIncrement: 0,\n                    attackerHp: fighterState.maxHP\n                }],\n                actionLogMessage: `<gradient=!player${i}-color><b>${players[i].fighter.displayName.toUpperCase()}</b> <gradient=!log-color>attempts Initiative: ${diceRolls[i] + fighterState.modifiers[Constants.Ability.Dexterity]}` + (players[i].fighter.skills.includes(Constants.SkillType.Elven) ? ' + 10' : '')\n            };\n        });\n        logMessage += `\\n<gradient=!player${playerToAct}-color><b>${players[playerToAct].fighter.displayName.toUpperCase()}</b> <gradient=!log-color>won Initiative`;\n        actionLogs[playerToAct ? 0 : 1].actionLogMessage += logMessage;\n        return {\n            status: Constants.Status.Open,\n            fighterStates,\n            playerToAct,\n            actionLogs\n        };\n    }\n\n    static buildFighterState(battlePlayer) {\n        const fighter = battlePlayer.fighter;\n\n        // Construct fighter states\n        const derivedStats = BattleUtils.getDerivedStats(fighter);\n        const fighterModifiers = derivedStats.modifiers;\n\n        const hpIncrement = derivedStats.hpIncrement + fighter.hpBonus;\n\n        // Create fighter state\n        const fighterState = {\n            modifiers: fighterModifiers,\n            evasion: derivedStats.evasion,\n            hp: fighterModifiers[Constants.Ability.Strength] + 10 + hpIncrement,\n            maxHP: fighterModifiers[Constants.Ability.Strength] + 10 + hpIncrement,\n            critChance: derivedStats.critChance,\n            statusEffectsRound: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            areLoaded: [false, false, false],\n            validActions: BattleUtils.getValidActions(battlePlayer.skills, false, false, battlePlayer.mainhand)\n        };\n        return fighterState;\n    }\n\n    // Derived unmutable stats (HP and MaxHP are mutable)\n    static getDerivedStats(fighter) {\n        let modifiers = BattleUtils.getModifiers(fighter.abilityScores);\n        let evasion = modifiers[Constants.Ability.Dexterity] + 10;\n        let critChance = 1;\n        let hpIncrement = fighter.skills.includes(Constants.SkillType.Durable) ? (fighter.level * 2) : 0;\n\n        if (fighter.skills.includes(Constants.SkillType.Elven)) {\n            evasion += 1;\n        }\n\n        if (fighter.skills.includes(Constants.SkillType.Slippery)) {\n            evasion += 2;\n        }\n\n        if (fighter.skills.includes(Constants.SkillType.Cirurgical)) {\n            critChance += 1;\n        }\n\n        if (fighter.skills.includes(Constants.SkillType.Strong)){\n            modifiers[Constants.Ability.Strength] += 1;\n        }\n\n        return {\n            modifiers: modifiers,\n            evasion: evasion,\n            critChance: critChance,\n            hpIncrement: hpIncrement\n        };\n    }\n\n    static getModifiers(abilityScores) {\n        return [\n            parseInt((abilityScores[Constants.Ability.Strength] - 10) / 2),\n            parseInt((abilityScores[Constants.Ability.Dexterity] - 10) / 2),\n            parseInt((abilityScores[Constants.Ability.Intelligence] - 10) / 2)\n        ];\n    }\n\n    static getValidActions(skills = [], isTaunted, isHidden, mainhand) {\n        return skills.map(skill => {\n            return skill &&\n                (!isTaunted || skill.isAttackAction) &&\n                (skill.skillType !== Constants.SkillType.SneakAttack || isHidden) &&\n                (skill.skillType !== Constants.SkillType.LockAndLoad || (mainhand && mainhand.properties && mainhand.properties[Constants.ItemProperty.Loading])) && \n                (!mainhand || mainhand.type !== Constants.ItemType.Wizardstaff || !skill.isAttackAction);\n        });\n    }\n\n    static computeFighterStates(battle, state) {\n        var fighterStates = state.fighterStates;\n\n        for (var i = 0; i < 2; i++) {\n            // initialize mutable derived stats\n            var derivedStats = BattleUtils.getDerivedStats(battle.battlePlayers[i].fighter);\n            fighterStates[i].modifiers = derivedStats.modifiers;\n            fighterStates[i].evasion = derivedStats.evasion;\n            fighterStates[i].initiative = derivedStats.initiative;\n            fighterStates[i].critChance = derivedStats.critChance;\n\n            // offset modifiers and derived stats according to status effects\n            if (BattleUtils.isUnderStatusEffect(fighterStates[i], Constants.StatusEffect.Hexed, fighterStates[i].turnCounter)) {\n                fighterStates[i].modifiers[Constants.Ability.Dexterity] -= fighterStates[i].modifiers[Constants.Ability.Intelligence];\n            }\n\n            if (BattleUtils.isUnderStatusEffect(fighterStates[i], Constants.StatusEffect.Focused, fighterStates[i].turnCounter)) {\n                fighterStates[i].modifiers[Constants.Ability.Intelligence] += fighterStates[i].modifiers[Constants.Ability.Intelligence];\n            }\n\n            fighterStates[i].validActions = BattleUtils.getValidActions(\n                battle.battlePlayers[i].skills, \n                BattleUtils.isUnderStatusEffect(fighterStates[i], Constants.StatusEffect.Taunted, fighterStates[i].turnCounter), \n                BattleUtils.isUnderStatusEffect(fighterStates[i], Constants.StatusEffect.Hidden, fighterStates[i].turnCounter), \n                battle.battlePlayers[i].mainhand\n            );\n            fighterStates[i].evasion = BattleUtils.isUnderStatusEffect(fighterStates[i], Constants.StatusEffect.Ethereal, fighterStates[i].turnCounter) ? \n                fighterStates[i].evasion + fighterStates[i].modifiers[Constants.Ability.Intelligence] : \n                fighterStates[i].evasion;\n        }\n\n        return fighterStates;\n    }\n\n    static skipTurn(battle, state, dice) {\n        const defenderState = state.fighterStates[state.playerToAct ? 0 : 1];\n        const attackerState = state.fighterStates[state.playerToAct];\n        var actionLog = {\n            playerIndex: state.playerToAct,\n            actionLogMessage: `${this.getPrettifiedPlayerName(battle, state, false)} skipped turn`,\n            results: [{\n                rolls: [],\n                outcome: Constants.Outcome.Success,\n                damageOutput: [\n                    {\n                        damage: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                        defenderHp: defenderState.hp,\n                        defenderReduction: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n                    }\n                ],\n                effectDurationsIncrement: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                hpIncrement: 0,\n                attackerHp: attackerState.hp\n            }]\n        };\n        state.actionLogs.push(actionLog);\n\n        return this.endTurn(battle, state, dice);\n    }\n\n    static endTurn(battle, state, dice) {\n        var attackerIndex = state.playerToAct;\n        var defenderIndex = state.playerToAct ? 0 : 1;\n\n        if (state.fighterStates[0].hp > 0 && state.fighterStates[1].hp > 0) {\n            if ( BattleUtils.isUnderStatusEffect(state.fighterStates[attackerIndex], Constants.StatusEffect.Cursed, state.fighterStates[attackerIndex].turnCounter)) {\n                if (state.actionLogs[state.actionLogs.length - 1].skillType === Constants.SkillType.Vengeful) {\n                    let vengefulLog = `${this.getPrettifiedPlayerName(battle, state, true)} is vengeful\\n`;\n                    state.actionLogs.push(this.makeDamageActionLog(\n                        battle, \n                        state, \n                        state.fighterStates[attackerIndex], \n                        battle.battlePlayers[attackerIndex], 1, \n                        Constants.DamageType.Necrotic, \n                        [], \n                        Constants.Outcome.Success, \n                        Constants.SkillType.Vengeful, \n                        vengefulLog, \n                        '', \n                        true\n                    ));\n                } else {\n                    state.actionLogs.push(this.makeDamageActionLog(\n                        battle, \n                        state, \n                        state.fighterStates[attackerIndex], \n                        battle.battlePlayers[attackerIndex], \n                        1, \n                        Constants.DamageType.Necrotic, \n                        [], \n                        Constants.Outcome.Success, \n                        Constants.SkillType.Curse, \n                        '', \n                        '', \n                        true\n                    ));\n                }\n            }\n            if ( BattleUtils.isUnderStatusEffect(\n                state.fighterStates[attackerIndex], \n                Constants.StatusEffect.Poisoned, \n                state.fighterStates[attackerIndex].turnCounter)\n            ) {\n                var damage = dice.roll(1, 4);\n                var roll = [{\n                    type: Constants.RollType.ToDamage,\n                    ability: Constants.Ability.Dexterity,\n                    size: 4,\n                    value: damage\n                }];\n                state.actionLogs.push(this.makeDamageActionLog(battle, state, state.fighterStates[attackerIndex], battle.battlePlayers[attackerIndex], damage, Constants.DamageType.Poison, roll, Constants.Outcome.Success, Constants.SkillType.CoatWeapon, '', '', true));\n            }\n\n            let fatigueThreshold = 7; // TODO: I'd like this to be a global const, but not quite sure how to do that right now\n            if (state.fighterStates[attackerIndex].turnCounter > fatigueThreshold) {\n                let fatigueLog = `${this.getPrettifiedPlayerName(battle, state)} is fatigued\\n`;\n                state.actionLogs.push(this.makeDamageActionLog(\n                    battle, \n                    state, \n                    state.fighterStates[attackerIndex], \n                    battle.battlePlayers[attackerIndex], \n                    state.fighterStates[attackerIndex].turnCounter - fatigueThreshold, \n                    Constants.DamageType.Necrotic, \n                    [], \n                    Constants.Outcome.Success, \n                    Constants.SkillType.Curse, \n                    fatigueLog, \n                    '', \n                    true\n                ));\n            }\n\n            if (BattleUtils.isUnderStatusEffect(state.fighterStates[defenderIndex], Constants.StatusEffect.Stunned, battle.turnCount)) {\n                state.fighterStates[defenderIndex].turnCounter++;\n            }else{\n                state.playerToAct = (state.playerToAct + 1) % 2;\n            }\n            \n        }\n        \n        if (state.fighterStates[0].hp <= 0 || state.fighterStates[1].hp <= 0) {\n            const victorIndex = state.fighterStates.findIndex(fs => fs.hp > 0);\n            var switchAttacker = victorIndex != attackerIndex;\n\n            var results = state.actionLogs[state.actionLogs.length - 1].results;\n            results[results.length - 1].resultMessage += `${this.getPrettifiedPlayerName(battle, state, switchAttacker)} won`;\n\n            state.playerToAct = victorIndex;\n            state.victor = {\n                pubkey: battle.battlePlayers[victorIndex].pubkey,\n                owner: battle.battlePlayers[victorIndex].owner,\n                fighter: battle.battlePlayers[victorIndex].fighter,\n            };\n            state.status = Constants.Status.Complete;\n        }\n\n        state.fighterStates = BattleUtils.computeFighterStates(battle, state);\n        state.fighterStates[attackerIndex].turnCounter++;\n\n        return state;\n    }\n\n    static makeDamageActionLog(battle, state, defenderState, defenderPlayer, damage, damageType, rolls, outcome, skillType, log, preResultDescription, damageSelf = false) {\n        return {\n            playerIndex: state.playerToAct,\n            skillType: skillType,\n            results: [this.makeDamageResult(battle, state, defenderState, defenderPlayer, damage, damageType, rolls, outcome, preResultDescription, damageSelf)],\n            actionLogMessage: log\n        };\n    }\n\n    static makeDamageResult(battle, state, damageeState, damageePlayer, damage, damageType, rolls, outcome, preResultDescription, damageSelf = false) {\n\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        var opponentName = BattleUtils.getOpponentName(battle, state);\n\n        let damageMap = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        damageMap[damageType] = damage;\n\n        let defenderReduction = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        let resistance = this.getDefenderResistance(damageePlayer)[damageType];\n        let inflictedDamage = damage - resistance;\n        inflictedDamage = (inflictedDamage < 0) ? 0 : inflictedDamage;\n        defenderReduction[damageType] = damage - inflictedDamage;\n        damageeState.hp -= inflictedDamage;\n\n        let resultMessage = `${playerName} damages ${opponentName} : ${inflictedDamage} (${damage} ${Constants.DamageTypeNames[damageType]}${resistance > 0 ? ` - ${resistance} Resist` : ''})\\n`;\n        if(damageSelf){\n            resultMessage = `${playerName} takes damage : ${inflictedDamage} (${damage} ${Constants.DamageTypeNames[damageType]}${resistance > 0 ? ` - ${resistance} Resist` : ''})\\n`;\n        }\n\n        return {\n            rolls: rolls,\n            outcome: outcome,\n            damageOutput: [{\n                damage: damageMap,\n                defenderHp: damageSelf ? state.fighterStates[state.playerToAct ? 0 : 1].hp : this.max([damageeState.hp, 0]),\n                defenderReduction: defenderReduction\n            }],\n            attackerStatusEffectsIncrement: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            hpIncrement: 0,\n            attackerHp: damageSelf ? damageeState.hp : state.fighterStates[state.playerToAct].hp,\n            preResultDescription: preResultDescription,\n            resultMessage: resultMessage\n        };\n    }\n\n\n    static directDamage(battle, state, dice, diceCount, diceFaces, defenderState, defenderPlayer, damageType, skill, log) {\n\n        let rolls = [];\n        let nativeRoll = diceFaces > 0 ? dice.roll(diceCount, diceFaces) : 0;\n        rolls.push({\n            type: 5,\n            ability: Constants.Ability.Strength,\n            size: diceFaces,\n            value: nativeRoll\n        });\n\n        return this.makeDamageActionLog(battle, state, defenderState, defenderPlayer, nativeRoll, damageType, rolls, Constants.Outcome.Success, skill, log);\n    }\n\n    static append(dest, src) {\n        for (var i = 0; i < src.length; i++) {\n            dest.push(src[i]);\n        }\n        return dest;\n    }\n\n    static getDefenderMaxAbility(battle, state) {\n        var abilities = battle.battlePlayers[state.playerToAct ? 0 : 1].fighter.abilityScores;\n        var max = this.max(abilities);\n        for (let i = 0; i < 3; ++i) {\n            if (abilities[i] === max) {\n                return i;\n            }\n        }\n        return 2;\n    }\n}",
        "version": "04"
    },
    "jig://2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1": {
        "kind": "code",
        "props": {
            "deps": {},
            "hash": "f8062726b7e685757d193e57a56a2e86c174a27b9d7c6b6879d538c42cd51a19",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class Sha256 {\n    constructor() {\n        this.HEX_CHARS = '0123456789abcdef'.split('');\n        this.EXTRA = [-2147483648, 8388608, 32768, 128];\n        this.SHIFT = [24, 16, 8, 0];\n        this.K = [\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n        ]\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n        this.h0 = 0x6a09e667;\n        this.h1 = 0xbb67ae85;\n        this.h2 = 0x3c6ef372;\n        this.h3 = 0xa54ff53a;\n        this.h4 = 0x510e527f;\n        this.h5 = 0x9b05688c;\n        this.h6 = 0x1f83d9ab;\n        this.h7 = 0x5be0cd19;\n\n        this.block = this.start = this.bytes = this.hBytes = 0;\n        this.finalized = this.hashed = false;\n        this.first = true;\n    }\n\n    static hashMessage(message, outputType) {\n        return new Sha256().update(message)[outputType]();\n\n    }\n    static hashToHex(message) {\n        return new Sha256().update(message).hex();\n    }\n\n    static hashToArrayBuffer(message) {\n        return new Sha256().update(message).arrayBuffer();\n    }\n\n    update(message) {\n        if (this.finalized) {\n            return;\n        }\n        var notString, type = typeof message;\n        if (type !== 'string') {\n            if (type === 'object') {\n                if (message === null) {\n                    throw new Error();\n                } else if (message.constructor === ArrayBuffer) {\n                    message = new Uint8Array(message);\n                }\n            } else {\n                throw new Error();\n            }\n            notString = true;\n        }\n        var code, index = 0, i, length = message.length, blocks = this.blocks;\n\n        while (index < length) {\n            if (this.hashed) {\n                this.hashed = false;\n                blocks[0] = this.block;\n                blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n                    blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n                    blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n                    blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n            }\n\n            if (notString) {\n                for (i = this.start; index < length && i < 64; ++index) {\n                    blocks[i >> 2] |= message[index] << this.SHIFT[i++ & 3];\n                }\n            } else {\n                for (i = this.start; index < length && i < 64; ++index) {\n                    code = message.charCodeAt(index);\n                    if (code < 0x80) {\n                        blocks[i >> 2] |= code << this.SHIFT[i++ & 3];\n                    } else if (code < 0x800) {\n                        blocks[i >> 2] |= (0xc0 | (code >> 6)) << this.SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | (code & 0x3f)) << this.SHIFT[i++ & 3];\n                    } else if (code < 0xd800 || code >= 0xe000) {\n                        blocks[i >> 2] |= (0xe0 | (code >> 12)) << this.SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << this.SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | (code & 0x3f)) << this.SHIFT[i++ & 3];\n                    } else {\n                        code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n                        blocks[i >> 2] |= (0xf0 | (code >> 18)) << this.SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << this.SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << this.SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | (code & 0x3f)) << this.SHIFT[i++ & 3];\n                    }\n                }\n            }\n\n            this.lastByteIndex = i;\n            this.bytes += i - this.start;\n            if (i >= 64) {\n                this.block = blocks[16];\n                this.start = i - 64;\n                this.hash();\n                this.hashed = true;\n            } else {\n                this.start = i;\n            }\n        }\n        if (this.bytes > 4294967295) {\n            this.hBytes += this.bytes / 4294967296 << 0;\n            this.bytes = this.bytes % 4294967296;\n        }\n        return this;\n    }\n\n    finalize() {\n        if (this.finalized) {\n            return;\n        }\n        this.finalized = true;\n        var blocks = this.blocks, i = this.lastByteIndex;\n        blocks[16] = this.block;\n        blocks[i >> 2] |= this.EXTRA[i & 3];\n        this.block = blocks[16];\n        if (i >= 56) {\n            if (!this.hashed) {\n                this.hash();\n            }\n            blocks[0] = this.block;\n            blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n                blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n                blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n                blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        }\n        blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n        blocks[15] = this.bytes << 3;\n        this.hash();\n    }\n\n    hash() {\n        var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,\n            h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\n\n        for (j = 16; j < 64; ++j) {\n            // rightrotate\n            t1 = blocks[j - 15];\n            s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);\n            t1 = blocks[j - 2];\n            s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);\n            blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;\n        }\n\n        bc = b & c;\n        for (j = 0; j < 64; j += 4) {\n            if (this.first) {\n\n                ab = 704751109;\n                t1 = blocks[0] - 210244248;\n                h = t1 - 1521486534 << 0;\n                d = t1 + 143694565 << 0;\n                this.first = false;\n            } else {\n                s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));\n                s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));\n                ab = a & b;\n                maj = ab ^ (a & c) ^ bc;\n                ch = (e & f) ^ (~e & g);\n                t1 = h + s1 + ch + this.K[j] + blocks[j];\n                t2 = s0 + maj;\n                h = d + t1 << 0;\n                d = t1 + t2 << 0;\n            }\n            s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));\n            s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));\n            da = d & a;\n            maj = da ^ (d & b) ^ ab;\n            ch = (h & e) ^ (~h & f);\n            t1 = g + s1 + ch + this.K[j + 1] + blocks[j + 1];\n            t2 = s0 + maj;\n            g = c + t1 << 0;\n            c = t1 + t2 << 0;\n            s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));\n            s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));\n            cd = c & d;\n            maj = cd ^ (c & a) ^ da;\n            ch = (g & h) ^ (~g & e);\n            t1 = f + s1 + ch + this.K[j + 2] + blocks[j + 2];\n            t2 = s0 + maj;\n            f = b + t1 << 0;\n            b = t1 + t2 << 0;\n            s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));\n            s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));\n            bc = b & c;\n            maj = bc ^ (b & d) ^ cd;\n            ch = (f & g) ^ (~f & h);\n            t1 = e + s1 + ch + this.K[j + 3] + blocks[j + 3];\n            t2 = s0 + maj;\n            e = a + t1 << 0;\n            a = t1 + t2 << 0;\n        }\n\n        this.h0 = this.h0 + a << 0;\n        this.h1 = this.h1 + b << 0;\n        this.h2 = this.h2 + c << 0;\n        this.h3 = this.h3 + d << 0;\n        this.h4 = this.h4 + e << 0;\n        this.h5 = this.h5 + f << 0;\n        this.h6 = this.h6 + g << 0;\n        this.h7 = this.h7 + h << 0;\n    }\n\n    hex() {\n        this.finalize();\n\n        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n            h6 = this.h6, h7 = this.h7;\n\n        var hex = this.HEX_CHARS[(h0 >> 28) & 0x0F] + this.HEX_CHARS[(h0 >> 24) & 0x0F] +\n            this.HEX_CHARS[(h0 >> 20) & 0x0F] + this.HEX_CHARS[(h0 >> 16) & 0x0F] +\n            this.HEX_CHARS[(h0 >> 12) & 0x0F] + this.HEX_CHARS[(h0 >> 8) & 0x0F] +\n            this.HEX_CHARS[(h0 >> 4) & 0x0F] + this.HEX_CHARS[h0 & 0x0F] +\n            this.HEX_CHARS[(h1 >> 28) & 0x0F] + this.HEX_CHARS[(h1 >> 24) & 0x0F] +\n            this.HEX_CHARS[(h1 >> 20) & 0x0F] + this.HEX_CHARS[(h1 >> 16) & 0x0F] +\n            this.HEX_CHARS[(h1 >> 12) & 0x0F] + this.HEX_CHARS[(h1 >> 8) & 0x0F] +\n            this.HEX_CHARS[(h1 >> 4) & 0x0F] + this.HEX_CHARS[h1 & 0x0F] +\n            this.HEX_CHARS[(h2 >> 28) & 0x0F] + this.HEX_CHARS[(h2 >> 24) & 0x0F] +\n            this.HEX_CHARS[(h2 >> 20) & 0x0F] + this.HEX_CHARS[(h2 >> 16) & 0x0F] +\n            this.HEX_CHARS[(h2 >> 12) & 0x0F] + this.HEX_CHARS[(h2 >> 8) & 0x0F] +\n            this.HEX_CHARS[(h2 >> 4) & 0x0F] + this.HEX_CHARS[h2 & 0x0F] +\n            this.HEX_CHARS[(h3 >> 28) & 0x0F] + this.HEX_CHARS[(h3 >> 24) & 0x0F] +\n            this.HEX_CHARS[(h3 >> 20) & 0x0F] + this.HEX_CHARS[(h3 >> 16) & 0x0F] +\n            this.HEX_CHARS[(h3 >> 12) & 0x0F] + this.HEX_CHARS[(h3 >> 8) & 0x0F] +\n            this.HEX_CHARS[(h3 >> 4) & 0x0F] + this.HEX_CHARS[h3 & 0x0F] +\n            this.HEX_CHARS[(h4 >> 28) & 0x0F] + this.HEX_CHARS[(h4 >> 24) & 0x0F] +\n            this.HEX_CHARS[(h4 >> 20) & 0x0F] + this.HEX_CHARS[(h4 >> 16) & 0x0F] +\n            this.HEX_CHARS[(h4 >> 12) & 0x0F] + this.HEX_CHARS[(h4 >> 8) & 0x0F] +\n            this.HEX_CHARS[(h4 >> 4) & 0x0F] + this.HEX_CHARS[h4 & 0x0F] +\n            this.HEX_CHARS[(h5 >> 28) & 0x0F] + this.HEX_CHARS[(h5 >> 24) & 0x0F] +\n            this.HEX_CHARS[(h5 >> 20) & 0x0F] + this.HEX_CHARS[(h5 >> 16) & 0x0F] +\n            this.HEX_CHARS[(h5 >> 12) & 0x0F] + this.HEX_CHARS[(h5 >> 8) & 0x0F] +\n            this.HEX_CHARS[(h5 >> 4) & 0x0F] + this.HEX_CHARS[h5 & 0x0F] +\n            this.HEX_CHARS[(h6 >> 28) & 0x0F] + this.HEX_CHARS[(h6 >> 24) & 0x0F] +\n            this.HEX_CHARS[(h6 >> 20) & 0x0F] + this.HEX_CHARS[(h6 >> 16) & 0x0F] +\n            this.HEX_CHARS[(h6 >> 12) & 0x0F] + this.HEX_CHARS[(h6 >> 8) & 0x0F] +\n            this.HEX_CHARS[(h6 >> 4) & 0x0F] + this.HEX_CHARS[h6 & 0x0F];\n\n        hex += this.HEX_CHARS[(h7 >> 28) & 0x0F] + this.HEX_CHARS[(h7 >> 24) & 0x0F] +\n            this.HEX_CHARS[(h7 >> 20) & 0x0F] + this.HEX_CHARS[(h7 >> 16) & 0x0F] +\n            this.HEX_CHARS[(h7 >> 12) & 0x0F] + this.HEX_CHARS[(h7 >> 8) & 0x0F] +\n            this.HEX_CHARS[(h7 >> 4) & 0x0F] + this.HEX_CHARS[h7 & 0x0F];\n        return hex;\n    }\n\n    toString() {\n        return this.hex();\n    }\n\n    digest() {\n        this.finalize();\n\n        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n            h6 = this.h6, h7 = this.h7;\n\n        var arr = [\n            (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\n            (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\n            (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\n            (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\n            (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,\n            (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,\n            (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF\n        ];\n\n        arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);\n        return arr;\n    }\n\n    array() {\n        return this.digest();\n    }\n\n    arrayBuffer() {\n        this.finalize();\n\n        var buffer = new ArrayBuffer(32);\n        var dataView = new DataView(buffer);\n        dataView.setUint32(0, this.h0);\n        dataView.setUint32(4, this.h1);\n        dataView.setUint32(8, this.h2);\n        dataView.setUint32(12, this.h3);\n        dataView.setUint32(16, this.h4);\n        dataView.setUint32(20, this.h5);\n        dataView.setUint32(24, this.h6);\n        dataView.setUint32(28, this.h7);\n\n        return buffer;\n    }\n}",
        "version": "04"
    },
    "jig://af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1": {
        "kind": "code",
        "props": {
            "deps": {},
            "hash": "64e9e9a18f920d29ab2881bb51ef6711893a1de5ac70ac5ec869f4d1b721ef99",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0,
            "sealed": false
        },
        "src": "class KronoClass {\n    static toObject(skipKeys = [], visited = new Set()) {\n        if(visited.has(this)) return;\n        visited.add(this);\n        return this.cloneChildren(this, skipKeys, visited);\n    }\n    \n    static deepClone(obj, skipKeys = [], visited = new Set()) {\n        if (!obj || !['object', 'function'].includes(typeof obj)) return obj;\n        if(visited.has(obj)) return;\n        if(obj.toObject) return obj.toObject([], new Set(visited));\n        visited.add(obj);\n        return this.cloneChildren(obj, skipKeys, visited);   \n    }\n\n    static cloneChildren(obj, skipKeys, visited) {\n        return Object.entries(obj).reduce((clone, [key, value]) => {\n            if([...skipKeys, 'deps', 'presets'].includes(key)) return clone;\n            clone[key] = this.deepClone(value, [], new Set(visited));\n            return clone;\n        }, Array.isArray(obj) ? [] : {})\n    }\n}",
        "version": "04"
    },
    "jig://301527c6508489f3fa79f77173aa3f6c76711b096bcdb49e9f2cfcdb6d784ff7_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                }
            },
            "hash": "6e4f1df7bbf0c9ab0a1463cf46cd2613b58c7c173d2f38d3fe65bf419cb3bcaf",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class Dice {\n    constructor(diceHash) {\n        this.random = diceHash;\n    }\n\n    roll(count, faces) {\n        let value = 0;\n        for (let i = 0; i < count; i++) {\n            value += (parseInt(this.random.substr(-12), 16) % faces) + 1;\n            this.random = Sha256.hashToHex(this.random);\n        }\n        return value;\n    }\n}",
        "version": "04"
    },
    "jig://b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "Dice": {
                    "$jig": "301527c6508489f3fa79f77173aa3f6c76711b096bcdb49e9f2cfcdb6d784ff7_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Attack Action",
            "displayName": "Attack",
            "handle": "attack",
            "hash": "6750187983563592a2cd4d1fd6832d11a9a5dae45b5ca0cfe6e9ab384ddad65e",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 0
        },
        "src": "class Attack extends KronoClass {\n    static run(battle, state, dice, timestamp, toHitBonus = 0, toDmgBonus = 0, attackType = Constants.SkillType.Attack) {\n        const {Ability, DamageType, EquipSlot, ItemType, ItemProperty, SkillType, StatusEffect} = Constants;\n        let playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let opponentName = BattleUtils.getOpponentName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(attackType)}\">${BattleUtils.parseSkillName(attackType)}\\n`;\n\n        const attacker = battle.battlePlayers[state.playerToAct];\n        const attackerItems = [battle.battlePlayers[state.playerToAct].mainhand, battle.battlePlayers[state.playerToAct].offhand, battle.battlePlayers[state.playerToAct].armor];\n\n        var mainhand = {...attackerItems[0]};\n        if (mainhand.type === ItemType.BareFist && attacker.fighter.skills.includes(SkillType.Unarmed)) {\n            mainhand.diceFaces = 8;\n            mainhand.properties = Object.keys(ItemProperty).map(() => false);\n            mainhand.properties[ItemProperty.Swift] = true;\n            mainhand.properties[ItemProperty.Heavy] = true;\n            mainhand.properties[ItemProperty.Brutal] = true;\n            mainhand.properties[ItemProperty.Assault] = true;\n            attackerItems[0] = mainhand;\n        }\n\n        let defenderState = state.fighterStates[state.playerToAct === 0 ? 1 : 0];\n        let attackerState = state.fighterStates[state.playerToAct];\n\n        const defenderPlayer = battle.battlePlayers[state.playerToAct ? 0 : 1];\n\n        // Bob attacks Tim\n        let resultMessage = `${playerName} attacks ${opponentName} : `; // goes up\n\n        // Process pre-attack saving throws actionLogs\n        if (BattleUtils.isUnderStatusEffect(defenderState, StatusEffect.Hidden, defenderState.turnCounter)) {  // Spot\n            state.actionLogs.push(this.makeSpotActionLog(battle, state, dice, attackerState, defenderState, state.playerToAct));\n        }\n\n        if (!BattleUtils.isUnderStatusEffect(defenderState, StatusEffect.Hidden, defenderState.turnCounter)) {\n\n            let attackActionLog = {\n                actionLogMessage: log\n            };\n            attackActionLog.playerIndex = state.playerToAct;\n            attackActionLog.skillType = attackType;\n            attackActionLog.results = [];\n\n            const attackerStr = attacker.fighter.abilityScores[Ability.Strength];\n            const attackerDex = attacker.fighter.abilityScores[Ability.Dexterity];\n\n            for (var i = 0; i < 2; i++) {\n                let weapon = attackerItems[i];\n                let multiattackImmune = BattleUtils.isUnderStatusEffect(defenderState, StatusEffect.Meditative, defenderState.turnCounter);\n                if (weapon && !(multiattackImmune && i > 0)) {\n                    // Find out 'to hit' ability\n                    var toHitAbility = Ability.Intelligence;\n                    // Weapon is brutal or ambivalent + player has str > dex\n                    if (weapon.properties[ItemProperty.Brutal] || (weapon.properties[ItemProperty.Ambivalent] && attackerStr >= attackerDex)) {\n                        toHitAbility = Ability.Strength;\n                    } else {\n                        // Weapon is dextrous or ambivalent + player has dex > str\n                        if (weapon.properties[ItemProperty.Dexterous] || (weapon.properties[ItemProperty.Ambivalent] && attackerDex >= attackerStr)) {\n                            toHitAbility = Ability.Dexterity;\n                        }\n                    }\n\n                    // Find out 'to damage' ability\n                    let toDmgAbility = Ability.Intelligence;\n                    // Weapon is Assault\n                    if (weapon.properties[ItemProperty.Assault]) {\n                        toDmgAbility = Ability.Strength;\n                    } else {\n                        // Weapon is Precision\n                        if (weapon.properties[ItemProperty.Precision]) {\n                            toDmgAbility = Ability.Dexterity;\n                        }\n                    }\n\n                    var dmgType = attacker.fighter.skills.includes(SkillType.Warmongering) ? DamageType.Warfare : weapon.baseDamageType;\n                    var critChanceBonus = (attacker.fighter.skills.includes(SkillType.Precise) && weapon.properties[ItemProperty.Precision]) ? 1 : 0;\n\n                    if (attacker.fighter.skills.includes(SkillType.Ambidextrous) && attackerItems[EquipSlot.Mainhand] && attackerItems[EquipSlot.Offhand] && i === 0) {\n                        toHitBonus += 2;\n                    }\n\n                    if (attackActionLog.results.length > 0) {\n                        if (attackActionLog.results[attackActionLog.results.length - 1].damageOutput[0].defenderHp <= 0) {\n                            break;\n                        }\n                    }\n\n                    let result = this.makeResult(battle, state, dice, toHitAbility, toDmgAbility, toHitBonus, toDmgBonus, critChanceBonus, dmgType, weapon.diceCount, weapon.diceFaces, defenderPlayer, resultMessage, attackType, weapon.damageBonus);\n                    attackActionLog.results.push(result);\n\n                    if (weapon.properties[ItemProperty.Swift] && !multiattackImmune) {\n                        if (attackActionLog.results.length > 0) {\n                            if (attackActionLog.results[attackActionLog.results.length - 1].damageOutput[0].defenderHp <= 0) {\n                                break;\n                            }\n                        }\n                        let result = this.makeResult(battle, state, dice, toHitAbility, toDmgAbility, toHitBonus, toDmgBonus, critChanceBonus, dmgType, weapon.diceCount, weapon.diceFaces, defenderPlayer, resultMessage, attackType, weapon.damageBonus);\n                        attackActionLog.results.push(result);\n                    }\n                }\n                if (attackType === SkillType.Stun) {\n                    break;\n                }\n            }\n            state.actionLogs.push(attackActionLog);\n        }\n\n        this.processPostAttackStatus(state, battle, attackerState, defenderState, attackType, defenderState.hp, dice, defenderPlayer);\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n\n    static processPostAttackStatus(state, battle, attackerState, defenderState, attackType, defenderHp, dice, defenderPlayer) {\n        const {Outcome, SkillType, StatusEffect} = Constants;\n        let wasHit = false;\n        let wasCrit = false;\n\n        state.actionLogs.forEach(actionLog => {\n            actionLog.results.forEach(result => {\n                if ((result.outcome === Outcome.Success || result.outcome === Outcome.Critical)) {\n                    wasHit = true;\n                }\n                if (result.outcome === Outcome.Critical) {\n                    wasCrit = true;\n                }\n            });\n        });\n\n        // On Hit\n        if (wasHit) {\n            if (BattleUtils.isUnderStatusEffect(attackerState, StatusEffect.Poisonous, attackerState.turnCounter)) {\n                BattleUtils.applyStatusEffect(state.actionLogs[state.actionLogs.length - 1], battle, state, StatusEffect.Poisoned, 2, false);\n            }\n\n            if (attackType === SkillType.Stun || attackType === SkillType.Freeze) {\n                BattleUtils.applyStatusEffect(state.actionLogs[state.actionLogs.length - 1], battle, state, StatusEffect.Stunned, 1, false);\n            }\n\n            if (attackType === SkillType.Chill) {\n                BattleUtils.applyStatusEffect(state.actionLogs[state.actionLogs.length - 1], battle, state, StatusEffect.Demoralized, 1, false);\n            }\n        }\n        if (attackType === SkillType.PinningStrike) {\n            if (wasCrit) {\n                BattleUtils.applyStatusEffect(state.actionLogs[state.actionLogs.length - 1], battle, state, StatusEffect.Stunned, 2, false);\n                BattleUtils.applyStatusEffect(state.actionLogs[state.actionLogs.length - 1], battle, state, StatusEffect.Marked, 3, true);\n            } else {\n                BattleUtils.applyStatusEffect(state.actionLogs[state.actionLogs.length - 1], battle, state, StatusEffect.Marked, 1, false);\n            }\n        }\n\n        // On Attack\n        if (attackType === SkillType.Gore) {\n            BattleUtils.applyStatusEffect(state.actionLogs[state.actionLogs.length - 1], battle, state, StatusEffect.Demoralized, 1, true);\n        }\n\n        if (attackType === SkillType.LockAndLoad) {\n            BattleUtils.applyStatusEffect(state.actionLogs[state.actionLogs.length - 1], battle, state, StatusEffect.Demoralized, 3, false);\n            BattleUtils.applyStatusEffect(state.actionLogs[state.actionLogs.length - 1], battle, state, StatusEffect.Inspired, 3, true);\n        }\n        if (defenderHp > 0) {\n            if (BattleUtils.isUnderStatusEffect(attackerState, StatusEffect.Hidden, attackerState.turnCounter)) {\n                state.actionLogs.push(this.makeSpotActionLog(battle, state, dice, defenderState, attackerState, state.playerToAct ? 0 : 1));\n            }\n\n            if (defenderPlayer.skills.includes(SkillType.Vengeful) && wasHit) {\n                state.actionLogs.push(BattleUtils.makeStatusEffectActionLog(battle, state, SkillType.Vengeful, StatusEffect.Cursed, 1, '', true));\n            }\n\n            if (defenderPlayer.fighter.skills.includes(SkillType.Opportunistic) && !wasHit) {\n                state.actionLogs.push(BattleUtils.makeStatusEffectActionLog(battle, state, SkillType.Opportunistic, StatusEffect.Inspired, 1, '', false));\n            }\n        }\n    }\n\n    static makeResult(battle, state, dice, toHitAbility, toDmgAbility, toHitBonus, toDmgBonus, critChanceBonus, dmgType, diceCount, diceFaces, defenderPlayer, log, attackType = Constants.SkillType.Attack, weaponDmgBonus) {\n        const {Ability, Outcome, RollType, SkillType, StatusEffect} = Constants;\n        const defenderState = state.fighterStates[state.playerToAct ? 0 : 1];\n        const attackerState = state.fighterStates[state.playerToAct];\n        const attacker = battle.battlePlayers[state.playerToAct];\n\n        /* #region attack_roll */\n        let roll = {\n            type: RollType.ToHit,\n            ability: toHitAbility,\n            size: 20,\n            value: dice.roll(1, 20)\n        };\n        var rolls = [roll];\n\n        // Advantage\n        if (BattleUtils.isUnderStatusEffect(attackerState, StatusEffect.Hidden, attackerState.turnCounter) ||\n            BattleUtils.isUnderStatusEffect(attackerState, StatusEffect.Inspired, attackerState.turnCounter) ||\n            BattleUtils.isUnderStatusEffect(defenderState, StatusEffect.Marked, attackerState.turnCounter)) {\n            rolls.push({\n                type: RollType.ToHit,\n                ability: toHitAbility,\n                size: 20,\n                value: dice.roll(1, 20)\n            });\n\n            if (rolls[rolls.length - 1].value > roll.value) {\n                roll.discarded = true;\n                roll = rolls[rolls.length - 1];\n            } else {\n                rolls[rolls.length - 1].discarded = true;\n            }\n        }\n\n        if (BattleUtils.isUnderStatusEffect(attackerState, StatusEffect.Demoralized, attackerState.turnCounter)) {\n            rolls.push({\n                type: RollType.ToHit,\n                ability: toHitAbility,\n                size: 20,\n                value: dice.roll(1, 20)\n            });\n\n            if (rolls[rolls.length - 1].value < roll.value) {\n                roll.discarded = true;\n                roll = rolls[rolls.length - 1];\n            } else {\n                rolls[rolls.length - 1].discarded = true;\n            }\n        }\n        /* #endregion */\n\n        // Process bonuses for selected dice\n        roll.bonusFromAbility = attackerState.modifiers[toHitAbility];\n        roll.bonusFromSkill = toHitBonus;\n        roll.totalBonus = roll.bonusFromAbility + roll.bonusFromSkill;\n\n        let outcome = Outcome.Fail;\n        if (roll.value + roll.totalBonus > defenderState.evasion) {\n            outcome = Outcome.Success;\n            let critImmune = BattleUtils.isUnderStatusEffect(defenderState, StatusEffect.Meditative, defenderState.turnCounter);\n            if (roll.value > 20 - (attackerState.critChance + critChanceBonus) && !critImmune) {\n                outcome = Outcome.Critical;\n            }\n        }\n\n        // *Hit* (10 + 1 + 1) = 12\n        log += `*${BattleUtils.parseAttackOutcome(outcome)}* (${roll.value} + ${roll.bonusFromAbility} + ${roll.bonusFromSkill} = ${roll.value + roll.totalBonus})\\n`;\n\n        let preResultDescription = `You need more than ${defenderState.evasion} <sprite name=Dexterity-d20> to hit`;\n        let damage = 0;\n\n        if (outcome !== Outcome.Fail) {\n            if (attackType !== SkillType.Stun && attackType !== SkillType.PinningStrike) {\n                var damageRoll = BattleUtils.rollDmgDice(toDmgAbility, diceCount, diceFaces, dice, rolls, RollType.ToDamage);\n                damage += damageRoll;\n                if (attackType === SkillType.Gore) {\n                    toDmgBonus += damageRoll;\n                    damage += damageRoll;\n                }\n            } else {\n                rolls.push({\n                    type: RollType.ToDamage,\n                    ability: toDmgAbility,\n                    size: 0,\n                    value: 0\n                });\n            }\n\n            // Process to dmg bonuses\n            roll = rolls[rolls.length - 1];\n            roll.bonusFromAbility = attackerState.modifiers[toDmgAbility];\n            roll.bonusFromSkill = toDmgBonus;\n            roll.totalBonus = roll.bonusFromSkill;\n            if (!attacker.fighter.skills.includes(SkillType.Cirurgical)) {\n                roll.totalBonus += roll.bonusFromAbility;\n            }\n            damage += roll.totalBonus;\n            if (attackType === SkillType.DirtyFighting) {\n                let dirtyRoll = dice.roll(1, 4);\n                rolls.push({\n                    type: RollType.ToDamage,\n                    ability: toHitAbility,\n                    size: 4,\n                    value: dirtyRoll\n                });\n                damage += dirtyRoll;\n            }\n            if (attackType === SkillType.SneakAttack) {\n                let isImproved = attacker.fighter.skills.includes(SkillType.ImprovedSneakAttack);\n                let sneakRoll = dice.roll(1, isImproved ? 8 : 6);\n                rolls.push({\n                    type: RollType.ToDamage,\n                    ability: toHitAbility,\n                    size: isImproved ? 8 : 6,\n                    value: sneakRoll\n                });\n                damage += sneakRoll;\n            }\n            if (outcome === Outcome.Critical && attackType !== SkillType.DirtyFighting) {\n                damage += BattleUtils.rollDmgDice(toDmgAbility, diceCount, diceFaces, dice, rolls, RollType.WeaponCrit);\n                // Roll a die with the same number of faces as\n                // the fighter's dexterity modifier rounded up to nearest even number\n                let critModifier = attackerState.modifiers[Ability.Dexterity];\n                if (attackType === SkillType.LightningBolt) {\n                    critModifier += attackerState.modifiers[Ability.Intelligence];\n                }\n                if (attackType === SkillType.Shock) {\n                    critModifier += 1;\n                }\n                if (critModifier > 0) {\n                    let faces = critModifier % 2 === 0 ? critModifier : critModifier + 1;\n                    let fighterCritNativeRoll = dice.roll(1, faces);\n                    rolls.push({\n                        type: RollType.FighterCrit,\n                        ability: Ability.Dexterity,\n                        size: faces,\n                        value: fighterCritNativeRoll\n                    });\n                    damage += fighterCritNativeRoll;\n                }\n            }\n            if (damage < 0) {\n                damage = 0;\n            }\n\n            if (weaponDmgBonus) {\n                weaponDmgBonus.forEach(bonus => {\n                    damage += bonus;\n                });\n            }\n\n            let result = BattleUtils.makeDamageResult(battle, state, defenderState, defenderPlayer, damage, dmgType, rolls, outcome, preResultDescription);\n            log += result.resultMessage;\n            result.resultMessage = log;\n            return result;\n        } else {\n            return {\n                rolls: rolls,\n                outcome: outcome,\n                damageOutput: [{\n                    damage: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                    defenderHp: defenderState.hp,\n                    defenderReduction: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n                }],\n                attackerStatusEffectsIncrement: attackerState.statusEffectsRound,\n                hpIncrement: 0,\n                attackerHp: attackerState.hp,\n                preResultDescription: preResultDescription,\n                resultMessage: log\n            };\n        }\n    }\n\n    // Abstract this out to a saving throw\n    static makeSpotActionLog(battle, state, dice, spotterState, spoteeState, spotterIndex) {\n        const {Ability, Outcome, RollType, SkillType, StatusEffect} = Constants;\n        let savingThrows = [];\n\n        if (BattleUtils.isUnderStatusEffect(spoteeState, StatusEffect.Hidden, spoteeState.turnCounter)) {\n            var spoteeName = BattleUtils.getPrettifiedName(battle, spotterIndex);\n\n            const attackerState = state.fighterStates[state.playerToAct];\n\n            let savingThrow = dice.roll(1, 20);\n            let attackerIntMod = spotterState.modifiers[Ability.Intelligence];\n            let defenderEvasion = spoteeState.evasion;\n            let rollResult = attackerIntMod + savingThrow;\n            let outcome = rollResult >= defenderEvasion ?\n                Outcome.Success : Outcome.Fail;\n\n            savingThrows.push({\n                type: RollType.Intelligence,\n                ability: Ability.Intelligence,\n                size: 20,\n                value: savingThrow\n            });\n\n            if (outcome === Outcome.Success) { // found opponent\n                spoteeState.statusEffectsRound[StatusEffect.Hidden] = 0;\n            }\n\n            return {\n                playerIndex: spotterIndex,\n                skillType: SkillType.Attack,\n                results: [{\n                    rolls: savingThrows,\n                    outcome: outcome,\n                    damageOutput: [{\n                        damage: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                        defenderHp: spoteeState.hp,\n                        defenderReduction: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                    }],\n                    attackerStatusEffectsIncrement: spotterState.statusEffectsDurations,\n                    hpIncrement: 0,\n                    attackerHp: attackerState.hp\n                }],\n                actionLogMessage: `${spoteeName} <gradient=!log-color>Intelligence Save vs. Evasion : *${BattleUtils.parseSkillOutcome(outcome)}* (${savingThrow} + ${attackerIntMod} = ${rollResult} vs. DC ${defenderEvasion})`\n            };\n        }\n    }\n}",
        "version": "04"
    },
    "jig://1351a43bb23000432f4259e661096e33d2b9f3f0ba13b52c7a2b7f94d8b016df_o3": {
        "cls": {
            "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                9,
                9,
                11
            ],
            "appearance": {
                "ArmorColorIdentifier": 99,
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 5,
                "gender": 0,
                "hairColorIdentifier": 0,
                "hairIdentifier": 1,
                "skinToneIdentifier": 0
            },
            "displayName": "Bullywug",
            "hpBonus": 0,
            "level": 1,
            "location": "_o3",
            "nonce": 2,
            "origin": "4250a1348ac29be0a1ebc4b9dd9e67561bdd9ccbd8d71e07dcd5f63a40a2e2f4_o1",
            "owner": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "race": 0,
            "satoshis": 0,
            "skills": [
                0,
                36,
                35,
                40,
                37,
                38
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://1351a43bb23000432f4259e661096e33d2b9f3f0ba13b52c7a2b7f94d8b016df_o1": {
        "cls": {
            "$jig": "34dd393811e945ab6de5322d6ed250110a71b5edacea71fb223a5930c4948996_o1"
        },
        "kind": "jig",
        "props": {
            "abilityScores": [
                12,
                12,
                7
            ],
            "appearance": {
                "beardIdentifier": 1,
                "eyeColorIdentifier": 0,
                "faceIdentifier": 0,
                "gender": 0,
                "hairColorIdentifier": 1,
                "hairIdentifier": 0,
                "skinToneIdentifier": 1
            },
            "displayName": "Mock",
            "hpBonus": 0,
            "level": 1,
            "location": "_o1",
            "nonce": 2,
            "origin": "baf0d8bc0aa9ae8a96caaf5d40441d2d2e58fc179b38e3dff62bb2dfd5c229bb_o1",
            "owner": "n2bsHNAbYUDmWMHiPaVb8QiFTZzLmP8BmE",
            "race": 1,
            "satoshis": 0,
            "skills": [
                0,
                1,
                2,
                31
            ],
            "xp": 0
        },
        "version": "04"
    },
    "jig://3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 0,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "A Pike is a pole weapon, a very long thrusting spear, unlike many similar weapons, the Pike is not intended to be thrown.",
            "diceCount": 1,
            "diceFaces": 8,
            "displayName": "Practice Pike",
            "equippableSlots": [
                0
            ],
            "hash": "40a06cb00257b19e52317dc0c9c015b9fc585361c750679a360b790263357ade",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                true
            ],
            "quality": 0,
            "satoshis": 0,
            "type": 8
        },
        "src": "class PracticePike extends KronoClass { }",
        "version": "04"
    },
    "jig://41ffca43394bf75d46ef6dc0d935dcdc639496997f047434e63f9b148fdad9a0_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 2,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "The size of its head allows a Maul to apply more force than other hammers of similar size.",
            "diceCount": 2,
            "diceFaces": 6,
            "displayName": "Maul",
            "equippableSlots": [
                0
            ],
            "hash": "ae2e876a695ad569d1bbd8e79f13846e762bcaf16e9d195fd87f3c1228c6b0a7",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                true,
                false,
                false
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 7
        },
        "src": "class Maul extends KronoClass { }",
        "version": "04"
    },
    "jig://17d728beb0e367d26ce9537d5cc4b2752a5232f043a5d6fb6fe4e5f7b7a3424b_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": false,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Hide Action",
            "displayName": "Hide",
            "handle": "hide",
            "hash": "53016b5a785f33eecec17c6f30799470b180f5ef458b9254a81291fdd63a1421",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 2
        },
        "src": "class Hide extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {Ability, SkillType, StatusEffect} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Hide)}\">${BattleUtils.parseSkillName(SkillType.Hide)}\\n`;\n\n        state.actionLogs.push(BattleUtils.abilityCheckAndApplyStatusEffect(battle, state, dice, SkillType.Hide, Ability.Dexterity, Ability.Intelligence, StatusEffect.Hidden, 99, true, log));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://84e7dbd4661e0e48e14bcd560082c0fa08989be775dd3a4361935605a2b71d45_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": false,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Focus Action",
            "displayName": "Focus",
            "handle": "focus",
            "hash": "1fb76d5c005fd06711bd289bb7b7b5d1a3e0faebbe6396ad76211d5301d672f3",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 1
        },
        "src": "class Focus extends KronoClass {\n    static run(battle, state, dice) {\n        const {SkillType, StatusEffect} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Focus)}\">${BattleUtils.parseSkillName(SkillType.Focus)}\\n`;\n\n        state.actionLogs.push(BattleUtils.makeStatusEffectActionLog(battle, state, SkillType.Focus, StatusEffect.Focused, 3, log));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://4eb6d93003a5f5bb4cff711d738203ad56afdba2d79ca7ff84f165d5337723ab_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BotFighter": {
                    "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
                },
                "BotValidatorAgent": {
                    "$jig": "7ad687021fc8cef1851fd4cf0a042808831efa641ce40d2309cf7d2fe67e7a55_o1"
                },
                "CommonItems": {
                    "$jig": "9eead79326a23805f136f37491a06c015d6b2f161d944d1848a4e9c352cdc4c9_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "PracticeItems": {
                    "$jig": "b325a272c76b74032b38615ff7b560cc10b0591c58ac4ebb16ee43bea374c9a1_o1"
                },
                "PracticePike": {
                    "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "ValidatorConfig": {
                    "$jig": "68d4287023c42ee5fd3f800388ebe4857b40d143a454fedd369786fa29307888_o1"
                }
            },
            "fee": 0,
            "hash": "c377a75ac2c4b49c14c19fa100fd276e1188ca3b9a68fb697d266805704f115d",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "playerCount": 1,
            "reward": 0,
            "rewardTiers": [
                {
                    "itemDefs": [
                        {
                            "$jig": "fc709aa8e1a3f13591391d91a0ef84b26ed14acde4c2630439b02041e083fe5e_o1"
                        },
                        {
                            "$jig": "71ecb049403ed15c6ff682a685aa72988fb5e238ef039f98173a85d7c4f46419_o1"
                        },
                        {
                            "$jig": "a0e8ea3090a0b992d5700ce1eb210daa65f64f7bfbfaf85b340f04afbe74767d_o1"
                        },
                        {
                            "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
                        },
                        {
                            "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
                        },
                        {
                            "$dup": [
                                "deps",
                                "PracticePike"
                            ]
                        },
                        {
                            "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
                        },
                        {
                            "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
                        },
                        {
                            "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
                        }
                    ],
                    "percent": 50
                },
                {
                    "itemDefs": [
                        {
                            "$jig": "cf6a5e646c452c6507880a0ce8bb5bb4aab06f5bbfa0a3e723fdf64c2fa50c85_o1"
                        },
                        {
                            "$jig": "ecbe04425f6c81c8419bc0b53237d3894b89c3eb0e6598defb8be6f3373e489e_o1"
                        },
                        {
                            "$jig": "785bacf58a6d82825b395aee36905bd45794443aa3512cd5469244a4f8b86028_o1"
                        },
                        {
                            "$jig": "f9d893e1bf6b875f20462fe202d46c81eb79df80b3491c623d9a4937412aedfb_o1"
                        },
                        {
                            "$jig": "0eeab9c8f278e3d137dc4923b2ddb09bc1885f142f08389f67823eb2d636f5fa_o1"
                        },
                        {
                            "$jig": "0bb728691a828a6ce6419c94038f57a5ad92710785784608bdf966dc0fb89ee5_o1"
                        },
                        {
                            "$jig": "41ffca43394bf75d46ef6dc0d935dcdc639496997f047434e63f9b148fdad9a0_o1"
                        },
                        {
                            "$jig": "8673ed291a74221cdab3909e981fc3f92416f77b34759382cd839b5b32ebc53e_o1"
                        },
                        {
                            "$dup": [
                                "rewardTiers",
                                "1",
                                "itemDefs",
                                "7"
                            ]
                        },
                        {
                            "$jig": "ccb55f03d072c7b09fc282b195fed719a8c215da8c4f85b68f3c3c4a9e8215c3_o1"
                        },
                        {
                            "$jig": "94189c87ebd7f8c597bb76007c1c370ee942a9357c399f3c087443a8b05fe8eb_o1"
                        },
                        {
                            "$jig": "0b62e3b6942367e8f705889ed494b1f729ad977d3aae6626b900a8e83d901b2d_o1"
                        }
                    ],
                    "percent": 25
                }
            ],
            "satoshis": 0,
            "tier": 1
        },
        "src": "class Bot1ValidatorAgent extends BotValidatorAgent {\n    async _selectItems(jigIndex) {\n        const weapons = jigIndex.filter(j => j.kind === KronoItem.origin && j.value.itemDef.origin === PracticePike.origin);\n        return [await this._pickAndLock(weapons, 120)];\n    }\n\n    _selectSkills() {\n        return [Attack];\n    }\n\n    _selectAction() {\n        return 0;\n    }\n\n    static async preDeploy() {\n        const {PracticeItems, CommonItems} = this.deps;\n    \n        this.rewardTiers = [{\n            percent: 50,\n            itemDefs: PracticeItems.itemDefs\n        }, {\n            percent: 25,\n            itemDefs: CommonItems.itemDefs\n        }];\n    }\n    \n    static async postDeploy (deployer) {\n        const {BotFighter, KronoItem, PracticePike, ValidatorConfig} = this.deps;\n        const fighterIndex = await deployer.blockchain.jigIndex(ValidatorConfig.address, BotFighter.origin);\n        console.log('INDEX:', fighterIndex);\n        const fighter = fighterIndex.find(f => f.value && f.value.displayName === 'Bullywug');\n        const itemIndex = await deployer.blockchain.jigIndex(ValidatorConfig.address, KronoItem.origin);\n        const item = itemIndex.find(i => i.value.itemDef && i.value.itemDef.origin === PracticePike.origin);\n        \n        let updates = 0;\n        const t = new Transaction();\n        t.update(() => {\n            const owner = ValidatorConfig.address;\n            if(!fighter) {\n                console.log('Minting BotFighters');\n                for(let i = 0; i < 10; i++) {\n                    new BotFighter({ owner, level: 1, displayName: 'Bullywug', race: 0, abilityScores: [9, 9, 11], appearance: { gender: 0, faceIdentifier: 5, hairIdentifier: 1, beardIdentifier: 1, skinToneIdentifier: 0, hairColorIdentifier: 0, eyeColorIdentifier: 0, ArmorColorIdentifier: 99 }, skills: [ 0, 36, 35, 40, 37, 38 ] },);\n                }\n                updates++;\n            }\n    \n            if (!item) {\n                console.log('Minting Items');\n                for(let i = 0; i<10; i++) {\n                    new KronoItem(PracticePike, owner);\n                }\n                updates++;\n            }\n        });\n    \n        if (updates) {\n            await t.publish();\n        } else {\n            t.rollback();\n        }\n    }\n}",
        "version": "04"
    },
    "jig://bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "KronoJig": {
                    "$jig": "1e714f99c065eb795a90701ce5a225e2a422f21d85bf573b34dde50700167175_o1"
                }
            },
            "hash": "259c0ee66ea05367080b4b1a999958f8498064dcfafbfccc20bd61f491df24a4",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class KronoItem extends KronoJig {\n    init(itemDef, owner) {\n        this.itemDef = itemDef;\n\n        this.mint = caller;\n        this.minter = caller && caller.owner;\n\n        this.owner = owner;\n    }\n\n    transfer(recipient) {\n        this.owner = recipient;\n    }\n}",
        "version": "04"
    },
    "jig://fc709aa8e1a3f13591391d91a0ef84b26ed14acde4c2630439b02041e083fe5e_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 2,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "diceCount": 1,
            "diceFaces": 4,
            "displayName": "Practice Bare Fist",
            "equippableSlots": [
                0,
                1
            ],
            "hash": "10d3f7816f536da63f3718b9d5dc90d9b2d360ff642d7d96aba1bd5988a81c6d",
            "levelRequired": 0,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                true,
                false,
                false
            ],
            "quality": 0,
            "satoshis": 0,
            "type": 15
        },
        "src": "class PracticeBareFist extends KronoClass { }",
        "version": "04"
    },
    "jig://6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1": {
        "kind": "code",
        "props": {
            "AbilityScoreLevels": [
                3,
                5,
                7,
                10,
                14,
                18
            ],
            "LevelUpXP": [
                0,
                100,
                300,
                600,
                1200,
                2400,
                4800,
                9600,
                19200,
                38400,
                76800,
                128000,
                204800,
                332800,
                537600,
                870400,
                1408000,
                2278400,
                3686400,
                5964800,
                9651200
            ],
            "Levels": [
                {
                    "Id": 1,
                    "Tiers": [
                        1
                    ]
                },
                {
                    "Id": 2,
                    "Tiers": [
                        1,
                        2
                    ]
                },
                {
                    "Id": 3,
                    "Tiers": [
                        1,
                        2,
                        3
                    ]
                },
                {
                    "Id": 4,
                    "Tiers": [
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "Id": 5,
                    "Tiers": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "Id": 6,
                    "Tiers": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                {
                    "Id": 7,
                    "Tiers": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ]
                },
                {
                    "Id": 8,
                    "Tiers": [
                        3,
                        4
                    ]
                },
                {
                    "Id": 9,
                    "Tiers": [
                        3,
                        4
                    ]
                },
                {
                    "Id": 10,
                    "Tiers": [
                        4
                    ]
                },
                {
                    "Id": 11,
                    "Tiers": [
                        4,
                        5
                    ]
                },
                {
                    "Id": 12,
                    "Tiers": [
                        4,
                        5
                    ]
                },
                {
                    "Id": 13,
                    "Tiers": [
                        4,
                        5
                    ]
                },
                {
                    "Id": 14,
                    "Tiers": [
                        5
                    ]
                },
                {
                    "Id": 15,
                    "Tiers": [
                        5,
                        6
                    ]
                },
                {
                    "Id": 16,
                    "Tiers": [
                        5,
                        6
                    ]
                },
                {
                    "Id": 17,
                    "Tiers": [
                        5,
                        6
                    ]
                },
                {
                    "Id": 18,
                    "Tiers": [
                        6
                    ]
                },
                {
                    "Id": 19,
                    "Tiers": [
                        6
                    ]
                },
                {
                    "Id": 20,
                    "Tiers": [
                        7
                    ]
                }
            ],
            "SkillData": {
                "0": {
                    "affectsOpponent": false,
                    "origin": "attack",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "1": {
                    "affectsOpponent": false,
                    "origin": "focus",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "2": {
                    "affectsOpponent": false,
                    "origin": "hide",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "3": {
                    "affectsOpponent": false,
                    "origin": "burn",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "4": {
                    "affectsOpponent": false,
                    "origin": "chill",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "5": {
                    "affectsOpponent": false,
                    "origin": "coat-weapon",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "6": {
                    "affectsOpponent": false,
                    "origin": "dirty-fighting",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "7": {
                    "affectsOpponent": false,
                    "origin": "heal",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        20
                    ],
                    "unlockableSkills": []
                },
                "8": {
                    "affectsOpponent": false,
                    "origin": "hex",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "9": {
                    "affectsOpponent": false,
                    "origin": "mark",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "10": {
                    "affectsOpponent": false,
                    "origin": "meditate",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "11": {
                    "affectsOpponent": false,
                    "origin": "phase-shift",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "12": {
                    "affectsOpponent": false,
                    "origin": "pinning-strike",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "13": {
                    "affectsOpponent": false,
                    "origin": "power-attack",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "14": {
                    "affectsOpponent": false,
                    "origin": "shock",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "15": {
                    "affectsOpponent": false,
                    "origin": "smite",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "16": {
                    "affectsOpponent": false,
                    "origin": "sneak-attack",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "17": {
                    "affectsOpponent": false,
                    "origin": "stun",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "18": {
                    "affectsOpponent": false,
                    "origin": "taunt",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "19": {
                    "affectsOpponent": false,
                    "origin": "battle-cry",
                    "rank": 0,
                    "requiredLevel": 3,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "20": {
                    "affectsOpponent": false,
                    "origin": "cleanse",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "21": {
                    "affectsOpponent": false,
                    "origin": "Curse",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        8
                    ],
                    "unlockableSkills": []
                },
                "22": {
                    "affectsOpponent": false,
                    "origin": "fireball",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "23": {
                    "affectsOpponent": false,
                    "origin": "freeze",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "24": {
                    "affectsOpponent": false,
                    "origin": "gore",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        12
                    ],
                    "unlockableSkills": []
                },
                "25": {
                    "affectsOpponent": false,
                    "origin": "lightning-bolt",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "26": {
                    "affectsOpponent": false,
                    "origin": "lock-and-load",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        30
                    ],
                    "unlockableSkills": []
                },
                "27": {
                    "affectsOpponent": false,
                    "origin": "second-wind",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        37
                    ],
                    "unlockableSkills": []
                },
                "28": {
                    "affectsOpponent": false,
                    "origin": "elementalist",
                    "rank": 1,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": [
                        3,
                        4,
                        14
                    ]
                },
                "29": {
                    "affectsOpponent": false,
                    "origin": "runesmith",
                    "rank": 1,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        35
                    ],
                    "unlockableSkills": [
                        40,
                        46
                    ]
                },
                "30": {
                    "affectsOpponent": false,
                    "origin": "sharpshooter",
                    "rank": 1,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        36
                    ],
                    "unlockableSkills": [
                        26,
                        44
                    ]
                },
                "31": {
                    "affectsOpponent": false,
                    "origin": "dwarven",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "32": {
                    "affectsOpponent": false,
                    "origin": "elven",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "33": {
                    "affectsOpponent": false,
                    "origin": "human",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "34": {
                    "affectsOpponent": false,
                    "origin": "ambidextrous",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "35": {
                    "affectsOpponent": false,
                    "origin": "armored",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "36": {
                    "affectsOpponent": false,
                    "origin": "cirurgical",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "37": {
                    "affectsOpponent": false,
                    "origin": "durable",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "38": {
                    "affectsOpponent": false,
                    "origin": "strong",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "39": {
                    "affectsOpponent": false,
                    "origin": "unarmed",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "40": {
                    "affectsOpponent": false,
                    "origin": "improved-armored",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        29
                    ],
                    "unlockableSkills": []
                },
                "41": {
                    "affectsOpponent": false,
                    "origin": "improved-power-attack",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        13
                    ],
                    "unlockableSkills": []
                },
                "42": {
                    "affectsOpponent": false,
                    "origin": "improved-sneak-attack",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        16
                    ],
                    "unlockableSkills": []
                },
                "43": {
                    "affectsOpponent": false,
                    "origin": "opportunistic",
                    "rank": 2,
                    "requiredLevel": 3,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "44": {
                    "affectsOpponent": false,
                    "origin": "precise",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        30
                    ],
                    "unlockableSkills": []
                },
                "45": {
                    "affectsOpponent": false,
                    "origin": "vengeful",
                    "rank": 2,
                    "requiredLevel": 3,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "46": {
                    "affectsOpponent": false,
                    "origin": "warmongering",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        29
                    ],
                    "unlockableSkills": []
                },
                "47": {
                    "affectsOpponent": false,
                    "origin": "slippery",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                }
            },
            "SkillLevels": [
                2,
                4,
                6,
                8,
                12,
                16,
                20
            ],
            "deps": {
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "KronoJig": {
                    "$jig": "1e714f99c065eb795a90701ce5a225e2a422f21d85bf573b34dde50700167175_o1"
                }
            },
            "hash": "471c567f574e95fdfe15b89200b6f5282b3c833d1f5403ef0101074b44e919f2",
            "initialScores": {
                "0": [
                    8,
                    8,
                    8
                ],
                "1": [
                    9,
                    7,
                    7
                ],
                "2": [
                    7,
                    7,
                    7
                ]
            },
            "initialSkills": {
                "0": 33,
                "1": 31,
                "2": 32
            },
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class BotFighter extends KronoJig {\n    init({ owner, displayName, race, abilityScores, appearance, level, skills}) {\n        const {SkillType} = Constants;\n        this.displayName = displayName;\n        this.race = race;\n        this.abilityScores = abilityScores;\n        this.appearance = appearance;\n\n        this.level = level;\n        this.xp = 0;\n        this.hpBonus = 0;\n\n        this.skills = skills || [\n            SkillType.Attack,\n            SkillType.Focus,\n            SkillType.Hide,\n            BotFighter.initialSkills[race]\n        ];\n\n        this.owner = owner;\n    }\n\n    static preDeploy() {\n        const {AbilityScoreLevels, LevelUpXP, Levels, Race, SkillData, SkillLevels, SkillType} = BotFighter.deps.Constants;\n        BotFighter.initialScores = {};\n        BotFighter.initialScores[Race.Human] = [8, 8, 8];\n        BotFighter.initialScores[Race.Dwarf] = [9, 7, 7];\n        BotFighter.initialScores[Race.Elf] = [7, 7, 7];\n        \n        BotFighter.initialSkills = {};\n        BotFighter.initialSkills[Race.Human] = SkillType.Human;\n        BotFighter.initialSkills[Race.Dwarf] = SkillType.Dwarven;\n        BotFighter.initialSkills[Race.Elf] = SkillType.Elven;\n        \n        BotFighter.LevelUpXP = LevelUpXP;\n        BotFighter.Levels = Levels;\n        BotFighter.SkillData = SkillData;\n        BotFighter.AbilityScoreLevels = AbilityScoreLevels;\n        BotFighter.SkillLevels = SkillLevels;   \n    }\n}",
        "version": "04"
    },
    "jig://34dd393811e945ab6de5322d6ed250110a71b5edacea71fb223a5930c4948996_o1": {
        "kind": "code",
        "props": {
            "AbilityScoreLevels": [
                3,
                5,
                7,
                10,
                14,
                18
            ],
            "LevelUpXP": [
                0,
                100,
                300,
                600,
                1200,
                2400,
                4800,
                9600,
                19200,
                38400,
                76800,
                128000,
                204800,
                332800,
                537600,
                870400,
                1408000,
                2278400,
                3686400,
                5964800,
                9651200
            ],
            "Levels": [
                {
                    "Id": 1,
                    "Tiers": [
                        1
                    ]
                },
                {
                    "Id": 2,
                    "Tiers": [
                        1,
                        2
                    ]
                },
                {
                    "Id": 3,
                    "Tiers": [
                        1,
                        2,
                        3
                    ]
                },
                {
                    "Id": 4,
                    "Tiers": [
                        1,
                        2,
                        3,
                        4
                    ]
                },
                {
                    "Id": 5,
                    "Tiers": [
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                },
                {
                    "Id": 6,
                    "Tiers": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ]
                },
                {
                    "Id": 7,
                    "Tiers": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ]
                },
                {
                    "Id": 8,
                    "Tiers": [
                        3,
                        4
                    ]
                },
                {
                    "Id": 9,
                    "Tiers": [
                        3,
                        4
                    ]
                },
                {
                    "Id": 10,
                    "Tiers": [
                        4
                    ]
                },
                {
                    "Id": 11,
                    "Tiers": [
                        4,
                        5
                    ]
                },
                {
                    "Id": 12,
                    "Tiers": [
                        4,
                        5
                    ]
                },
                {
                    "Id": 13,
                    "Tiers": [
                        4,
                        5
                    ]
                },
                {
                    "Id": 14,
                    "Tiers": [
                        5
                    ]
                },
                {
                    "Id": 15,
                    "Tiers": [
                        5,
                        6
                    ]
                },
                {
                    "Id": 16,
                    "Tiers": [
                        5,
                        6
                    ]
                },
                {
                    "Id": 17,
                    "Tiers": [
                        5,
                        6
                    ]
                },
                {
                    "Id": 18,
                    "Tiers": [
                        6
                    ]
                },
                {
                    "Id": 19,
                    "Tiers": [
                        6
                    ]
                },
                {
                    "Id": 20,
                    "Tiers": [
                        7
                    ]
                }
            ],
            "SkillData": {
                "0": {
                    "affectsOpponent": false,
                    "origin": "attack",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "1": {
                    "affectsOpponent": false,
                    "origin": "focus",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "2": {
                    "affectsOpponent": false,
                    "origin": "hide",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "3": {
                    "affectsOpponent": false,
                    "origin": "burn",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "4": {
                    "affectsOpponent": false,
                    "origin": "chill",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "5": {
                    "affectsOpponent": false,
                    "origin": "coat-weapon",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "6": {
                    "affectsOpponent": false,
                    "origin": "dirty-fighting",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "7": {
                    "affectsOpponent": false,
                    "origin": "heal",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        20
                    ],
                    "unlockableSkills": []
                },
                "8": {
                    "affectsOpponent": false,
                    "origin": "hex",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "9": {
                    "affectsOpponent": false,
                    "origin": "mark",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "10": {
                    "affectsOpponent": false,
                    "origin": "meditate",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "11": {
                    "affectsOpponent": false,
                    "origin": "phase-shift",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "12": {
                    "affectsOpponent": false,
                    "origin": "pinning-strike",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "13": {
                    "affectsOpponent": false,
                    "origin": "power-attack",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "14": {
                    "affectsOpponent": false,
                    "origin": "shock",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "15": {
                    "affectsOpponent": false,
                    "origin": "smite",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "16": {
                    "affectsOpponent": false,
                    "origin": "sneak-attack",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "17": {
                    "affectsOpponent": false,
                    "origin": "stun",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "18": {
                    "affectsOpponent": false,
                    "origin": "taunt",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "19": {
                    "affectsOpponent": false,
                    "origin": "battle-cry",
                    "rank": 0,
                    "requiredLevel": 3,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "20": {
                    "affectsOpponent": false,
                    "origin": "cleanse",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "21": {
                    "affectsOpponent": false,
                    "origin": "Curse",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        8
                    ],
                    "unlockableSkills": []
                },
                "22": {
                    "affectsOpponent": false,
                    "origin": "fireball",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "23": {
                    "affectsOpponent": false,
                    "origin": "freeze",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "24": {
                    "affectsOpponent": false,
                    "origin": "gore",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        12
                    ],
                    "unlockableSkills": []
                },
                "25": {
                    "affectsOpponent": false,
                    "origin": "lightning-bolt",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        28
                    ],
                    "unlockableSkills": []
                },
                "26": {
                    "affectsOpponent": false,
                    "origin": "lock-and-load",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        30
                    ],
                    "unlockableSkills": []
                },
                "27": {
                    "affectsOpponent": false,
                    "origin": "second-wind",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        37
                    ],
                    "unlockableSkills": []
                },
                "28": {
                    "affectsOpponent": false,
                    "origin": "elementalist",
                    "rank": 1,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": [
                        3,
                        4,
                        14
                    ]
                },
                "29": {
                    "affectsOpponent": false,
                    "origin": "runesmith",
                    "rank": 1,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        35
                    ],
                    "unlockableSkills": [
                        40,
                        46
                    ]
                },
                "30": {
                    "affectsOpponent": false,
                    "origin": "sharpshooter",
                    "rank": 1,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        36
                    ],
                    "unlockableSkills": [
                        26,
                        44
                    ]
                },
                "31": {
                    "affectsOpponent": false,
                    "origin": "dwarven",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "32": {
                    "affectsOpponent": false,
                    "origin": "elven",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "33": {
                    "affectsOpponent": false,
                    "origin": "human",
                    "rank": 0,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "34": {
                    "affectsOpponent": false,
                    "origin": "ambidextrous",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "35": {
                    "affectsOpponent": false,
                    "origin": "armored",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "36": {
                    "affectsOpponent": false,
                    "origin": "cirurgical",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "37": {
                    "affectsOpponent": false,
                    "origin": "durable",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "38": {
                    "affectsOpponent": false,
                    "origin": "strong",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "39": {
                    "affectsOpponent": false,
                    "origin": "unarmed",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "40": {
                    "affectsOpponent": false,
                    "origin": "improved-armored",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        29
                    ],
                    "unlockableSkills": []
                },
                "41": {
                    "affectsOpponent": false,
                    "origin": "improved-power-attack",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        13
                    ],
                    "unlockableSkills": []
                },
                "42": {
                    "affectsOpponent": false,
                    "origin": "improved-sneak-attack",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        16
                    ],
                    "unlockableSkills": []
                },
                "43": {
                    "affectsOpponent": false,
                    "origin": "opportunistic",
                    "rank": 2,
                    "requiredLevel": 3,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "44": {
                    "affectsOpponent": false,
                    "origin": "precise",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        30
                    ],
                    "unlockableSkills": []
                },
                "45": {
                    "affectsOpponent": false,
                    "origin": "vengeful",
                    "rank": 2,
                    "requiredLevel": 3,
                    "requiredSkills": [],
                    "unlockableSkills": []
                },
                "46": {
                    "affectsOpponent": false,
                    "origin": "warmongering",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [
                        29
                    ],
                    "unlockableSkills": []
                },
                "47": {
                    "affectsOpponent": false,
                    "origin": "slippery",
                    "rank": 2,
                    "requiredLevel": 0,
                    "requiredSkills": [],
                    "unlockableSkills": []
                }
            },
            "SkillLevels": [
                2,
                4,
                6,
                8,
                12,
                16,
                20
            ],
            "deps": {
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "KronoJig": {
                    "$jig": "1e714f99c065eb795a90701ce5a225e2a422f21d85bf573b34dde50700167175_o1"
                }
            },
            "hash": "cea6076948ddf813923839dec5ab5a5c98eda3edcf0cbcc35c85d61020aeacb6",
            "initialScores": {
                "0": [
                    8,
                    8,
                    8
                ],
                "1": [
                    9,
                    7,
                    7
                ],
                "2": [
                    7,
                    7,
                    7
                ]
            },
            "initialSkills": {
                "0": 33,
                "1": 31,
                "2": 32
            },
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class Fighter extends KronoJig {\n    init({ owner, displayName, race, abilityScores, appearance }) {\n        const {SkillType} = Constants;\n        Fighter.validateStartingScores(race, abilityScores);\n        this.displayName = displayName;\n        this.race = race;\n        this.abilityScores = abilityScores;\n        this.appearance = appearance;\n\n        this.xp = 0;\n        this.hpBonus = 0;\n        this.level = 1;\n\n        this.skills = [\n            SkillType.Attack,\n            SkillType.Focus,\n            SkillType.Hide,\n            Fighter.initialSkills[race]\n        ];\n\n        this.owner = owner;\n    }\n\n    static validateStartingScores(race, abilityScores) {\n        const costs = {\n            1: 1,\n            2: 2,\n            3: 4,\n            4: 7,\n            5: 11,\n            6: 16\n        };\n\n        let cost = 0;\n        abilityScores.forEach((score, ability) => {\n            const start = Fighter.initialScores[race][ability];\n            const upgrade = score - start;\n            if (upgrade < 0) throw new Error('Invalid Ability Scores');\n            if (upgrade > 0) {\n                const points = costs[upgrade];\n                if (!points) throw new Error('Invalid Ability Scores');\n                cost += points;\n            }\n        });\n        if (cost === 15) return true;\n        throw new Error('Invalid Ability Scores');\n    }\n\n    transfer(recipient) {\n        this.owner = recipient;\n    }\n\n    recordVictory(battle) {\n        // TODO: validate battle\n        if (battle.constructor.owner !== Fighter.owner) throw new Error('Invalid Battle');\n\n        this.xp += battle.xp;\n        battle.destroy();\n    }\n\n    levelUp(ability, skillType) {\n        if (this.xp < Fighter.LevelUpXP[this.level]) {\n            throw new Error('Indequite XP');\n        }\n        \n        this.level++;\n        if (Fighter.SkillLevels.includes(this.level)) {\n            if (!skillType) {\n                throw new Error('Requested skill at Index ' + skillType + ' is not found!');\n            }\n\n            let skillInfo = Fighter.SkillData[skillType];\n            if ((this.level - 1) < skillInfo.requiredLevel) {\n                throw new Error(`Player doesn't meet skill level up requirements to unlock ${skillType}. Player is low level`);\n            }\n\n            skillInfo.requiredSkills.forEach(st => {\n                if (!this.skills.includes(st)) {\n                    throw new Error(`Player doesn't meet skill level up requirements unlock ${skillType}. Missing ${st}`);\n                }\n            });\n\n            this._applySkill(skillType);\n            skillInfo.unlockableSkills.forEach(st => {\n                this._applySkill(st);\n            });\n        }\n\n        if (Fighter.AbilityScoreLevels.includes(this.level)) {\n            this.abilityScores[ability]++;\n        }\n        \n        this.hpBonus += 4; \n    }\n\n    _applySkill(skillType) {\n        // TODO validate prerequesite for skillType\n        this.skills.push(skillType);\n    }\n\n    static preDeploy() {\n        const {AbilityScoreLevels, LevelUpXP, Levels, Race, SkillData, SkillLevels, SkillType} = Fighter.deps.Constants;\n        Fighter.initialScores = {};\n        Fighter.initialScores[Race.Human] = [8, 8, 8];\n        Fighter.initialScores[Race.Dwarf] = [9, 7, 7];\n        Fighter.initialScores[Race.Elf] = [7, 7, 7];\n        \n        Fighter.initialSkills = {};\n        Fighter.initialSkills[Race.Human] = SkillType.Human;\n        Fighter.initialSkills[Race.Dwarf] = SkillType.Dwarven;\n        Fighter.initialSkills[Race.Elf] = SkillType.Elven;\n        \n        Fighter.LevelUpXP = LevelUpXP;\n        Fighter.Levels = Levels;\n        Fighter.SkillData = SkillData;\n        Fighter.AbilityScoreLevels = AbilityScoreLevels;\n        Fighter.SkillLevels = SkillLevels;\n    }\n}",
        "version": "04"
    },
    "jig://7ad687021fc8cef1851fd4cf0a042808831efa641ce40d2309cf7d2fe67e7a55_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BotFighter": {
                    "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "ValidatorAgent": {
                    "$jig": "c1afc38b54f08fe0ada2023c78ee118ba4256dd9032827bb2e33ddb5f127eee5_o1"
                }
            },
            "fee": 0,
            "hash": "5f93b615482426e7744b0c8ebecf8b6ef9cbb88c54314baa1408a95668896170",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "playerCount": 1,
            "reward": 0,
            "satoshis": 0,
            "sealed": false,
            "tier": 0
        },
        "src": "class BotValidatorAgent extends ValidatorAgent {\n    async _buildPlayers([message]) {\n        return Promise.all([\n            this._loadPlayer(message),\n            this._loadBot()\n        ]);\n    }\n\n    async _loadBot() {\n        console.time('_loadBot');\n        const [fighterIndex, itemIndex] = await Promise.all([\n            this.wallet.loadJigIndex(BotFighter.origin),\n            this.wallet.loadJigIndex(KronoItem.origin),\n        ]);\n\n\n        const [fighter, items, skills] = await Promise.all([\n            this._selectFighter(fighterIndex),\n            this._selectItems(itemIndex),\n            this._selectSkills()\n        ]);\n\n        console.timeEnd('_loadBot');\n        return {\n            pubkey: this.pubkey,\n            owner: this.address,\n            fighter,\n            items,\n            skills,\n            tags: ['bot']\n        };\n    }\n\n    async _selectFighter(index) {\n        let fighters = await index.filter(j => j.value.level === this.constructor.tier);\n        console.log('Fighters:', fighters.length);\n        const fighter = await this._pickAndLock(fighters, 120);\n        if (!fighter) throw new Error('no bot fighters');\n        return fighter;\n    }\n\n    async _pickAndLock(jigs, lockSeconds = 120) {\n        const now = this.wallet.now;\n        for(let j of jigs) {\n            console.log('Jig:', j.location);\n            if(await this.storage.exists(`lock:${j.location}`)) {\n                console.log('Locked:', j.location);\n                continue;\n            }\n            await this.storage.pipeline()\n                .set(`lock:${j.location}`, now.toString())\n                .expire(`lock:${j.location}`, lockSeconds)\n                .exec();\n            const jig = await this.wallet.loadJig(j.location);\n            return jig;\n        }\n    }\n\n    async _selectItems() {\n        return [];\n    }\n\n    _selectSkills() {\n        return [Attack];\n    }\n\n    _selectAction() {\n        return 0;\n    }\n\n    async updateBattle() {\n        console.log('BOT: Update Battle');\n        const { actor, stateHash, status, turnCount } = this.battle;\n\n        await super.updateBattle();\n\n        if (status === Constants.Status.Open && actor === this.pubkey) {\n            const actionIndex = this._selectAction();\n            console.time('BotAction', actionIndex);\n            this.transaction.update(() => {\n                const timestamp = this.wallet.now;\n                this.battle.resolve(\n                    this.hashchain[turnCount], \n                    timestamp, \n                    {payload: JSON.stringify({\n                        stateHash, \n                        actionIndex\n                    })}, \n                    timestamp + this.constructor.timeout\n                );\n            });\n            console.timeEnd('BotAction');\n            await this.updateBattle();\n        }\n    }\n}",
        "version": "04"
    },
    "jig://c1afc38b54f08fe0ada2023c78ee118ba4256dd9032827bb2e33ddb5f127eee5_o1": {
        "kind": "code",
        "props": {
            "config": {
                "$jig": "68d4287023c42ee5fd3f800388ebe4857b40d143a454fedd369786fa29307888_o1"
            },
            "deps": {
                "Agent": {
                    "$jig": "820231376f5cdabd943eff6764c4b6fcf637b6c9c23c71ba571307fa2182f190_o1"
                },
                "BareFist": {
                    "$jig": "3a5bb09f57fd0f5548cf422b96e9127fc66d573dc1c5f1f3d0ef393a275d32d3_o1"
                },
                "Battle": {
                    "$jig": "8ff616fe64f5f547c747a09cc6a12b9164787e368f8361faa508d4aac371e58e_o1"
                },
                "BotFighter": {
                    "$jig": "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "Fighter": {
                    "$jig": "34dd393811e945ab6de5322d6ed250110a71b5edacea71fb223a5930c4948996_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "KronoItem": {
                    "$jig": "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                },
                "Skills": {
                    "$jig": "3810e849cc633b2febfc63f1ffa69d1c20a88cc2637027f47f855305c59f41ab_o1"
                },
                "ValidatorConfig": {
                    "$dup": [
                        "config"
                    ]
                }
            },
            "fee": 0,
            "hash": "0633857defc67494a0e86361a11f58bddc50968ffb9ac4f52c012986529bbd86",
            "initialTimeout": 60000,
            "lobbies": [
                {
                    "$und": 1
                },
                {
                    "$und": 1
                },
                {
                    "$und": 1
                },
                {
                    "$und": 1
                },
                {
                    "$und": 1
                },
                {
                    "$und": 1
                },
                {
                    "$und": 1
                },
                {
                    "$und": 1
                }
            ],
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "reward": 0,
            "rewardTiers": [],
            "satoshis": 0,
            "sealed": false,
            "skills": {
                "0": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "1": {
                    "$jig": "84e7dbd4661e0e48e14bcd560082c0fa08989be775dd3a4361935605a2b71d45_o1"
                },
                "2": {
                    "$jig": "17d728beb0e367d26ce9537d5cc4b2752a5232f043a5d6fb6fe4e5f7b7a3424b_o1"
                },
                "3": {
                    "$jig": "5a72febdb371ae168954f617e7a560172dae39be6f161327c46079c4c4fc4e29_o1"
                },
                "4": {
                    "$jig": "367bc789fea9cfc162b7339b846b7faa795bcea8ca9acbc037542a07cd215d56_o1"
                },
                "5": {
                    "$jig": "2962fad9fa8132e8f92f1ddff0549d48f6eb4f97a52e2e632a981f9a21bad773_o1"
                },
                "6": {
                    "$jig": "071c311de460b9409720650f65544ff88b0d51a78b13cd2aa5fc238c587fd713_o1"
                },
                "7": {
                    "$jig": "884b55266d740b07efb0a078e20a6670a872922912f8484172fa5e8db47e9cb8_o1"
                },
                "8": {
                    "$jig": "4ce9d4ec258ab7fa1a229a6eb21cf46396eddf020055a92b5f9d0259e0493d27_o1"
                },
                "9": {
                    "$jig": "3cffd1a80d5b9f81abdcb985796fc3518ecf2085098674a17f835f92181df9f1_o1"
                },
                "10": {
                    "$jig": "bcf88d73871fc58b23a06b8138d5566d4f7961e1a11a95721cea315e45052b39_o1"
                },
                "11": {
                    "$jig": "bb0892d403e03defc3f009f2415873b58057bb3d908bbee7b37e6fbe3a5ddf5b_o1"
                },
                "12": {
                    "$jig": "382446c4f8f71c1f058ca0cddf35c3d8759c3a11643a22b5964cb4d99521b2f8_o1"
                },
                "13": {
                    "$jig": "9f291b42b8faa8ee2f5784b05f861fe19239738d65e1513e51f0e3e5cc43d993_o1"
                },
                "14": {
                    "$jig": "5cab9cbc29822f044d1c131e89e3a0d9f41c6cf46a7a40d41ea6c40ebdc166c8_o1"
                },
                "15": {
                    "$jig": "eeaba59f685867d4ba186f2783d924b58916c5b1a1a6424f354c2d6d9b26849f_o1"
                },
                "16": {
                    "$jig": "5679399006dd0505d2c188cbdd68692f4bc86aced9f75536d186d9c3cfd1d1b3_o1"
                },
                "17": {
                    "$jig": "8f3ee730e89b45fc8f85b4fd16ae6b9c36a74f2fb30fc80876e58249cc606d8f_o1"
                },
                "18": {
                    "$jig": "ff05e7e4ebca236e9e4c20bf6fcca32054da345119f6b13aeb66b35e7332016e_o1"
                },
                "19": {
                    "$jig": "82fcd24ece47b8509a9d9cca1a9ac3a9bc4f0a50ff3d9222ce2008c3a768300c_o1"
                },
                "20": {
                    "$jig": "60f52848b561cdbeb5e224e471fccda1ef18eaac61ed00b68b7ec6a93887ca06_o1"
                },
                "21": {
                    "$jig": "824f31661a663e6bde6823fcfebd20c5f65efaa044a0bfb33176acb89b6c81d3_o1"
                },
                "22": {
                    "$jig": "201b3c1cdc7aea0e766f7cfa07ce984ce6df5991d25b413bdfea00097c88a744_o1"
                },
                "23": {
                    "$jig": "69ff17c93cba65cf10ae9d9d4194dd8f6753022fc565aa99db2160ac35121d47_o1"
                },
                "24": {
                    "$jig": "6c4b330cf4cfd964aa9a933af4ea6156258df0c7a59a8fc61564b5c1839c1522_o1"
                },
                "25": {
                    "$jig": "6fbe3be0db1a859e187816f2185513d5cf70130f5aaaa0eacbe9d001ddef8b15_o1"
                },
                "26": {
                    "$jig": "f0300c60d544eb13b8e56fd6e6378259ee212fb1720d3fd673460160207038e2_o1"
                },
                "27": {
                    "$jig": "8f6aa0825ce476c1174ef2faaead20add8642756b12b79f93a4772350088d235_o1"
                },
                "31": {
                    "$jig": "0a4d876cccc7a0367529cbb74f002d01b1b5660f262ef3844b8778487b624fd5_o1"
                },
                "32": {
                    "$jig": "90efb8facfc2c8dc7386cba121c3d282122b8d082eb54bd50789b3cf035e4b0d_o1"
                },
                "33": {
                    "$jig": "1998ce5371018ddc57a274d0948db53db7fc29b2ae64de2b10580951792e611f_o1"
                }
            },
            "tier": 0,
            "timeout": 45000,
            "whitelist": [
                "8ff616fe64f5f547c747a09cc6a12b9164787e368f8361faa508d4aac371e58e_o1",
                "6833bebd334ca4a63638750a3c5c227622646795c8b2457d26f191d41f4ddc19_o1",
                "bd91438ef6a695f953b4e2d12318c8e4a1c158a301197fe4fd51190953117889_o1"
            ]
        },
        "src": "class ValidatorAgent extends Agent {\n    async init(params) {\n        console.log('Initializing', this.constructor.name);\n        const {messages, nonce} = params;\n        console.log('Params:', params, JSON.stringify(messages), nonce);\n        this.queueMessages = messages;\n        this.messageHandlers.set('Act', this.onBattleAction);\n        this.messageHandlers.set('Forfeit', this.onBattleAction);\n        this.messageHandlers.set('BattleSigned', this.onBattleSigned);\n        let id;\n        try {\n            console.time('_buildPlayers');\n            const players = await this._buildPlayers(messages);\n            console.timeEnd('_buildPlayers');\n            console.log('Players:', players);\n            this.players = players;\n\n            console.log('Creating battle');\n            this.hashchain = this.generateHashchain(128);\n            id = this.battleId = Sha256.hashToHex(Agent.hexToBytes(this.hashchain[0]));\n\n            const t = this.wallet.createTransaction();\n            let battle;\n            t.update(() => {\n                const b = new Battle(\n                    ValidatorConfig.address,\n                    this.constructor,\n                    players,\n                    id,\n                    this.wallet.now\n                );\n\n                battle = {\n                    id,\n                    random: b.random,\n                    timestamp: b.timestamp,\n                    rules: this.constructor.toObject(['rewardTiers']),\n                    status: b.status,\n                    battlePlayers: KronoClass.deepClone(b.battlePlayers.map(p => ({\n                        pubkey: p.pubkey,\n                        owner: p.owner,\n                        fighter: {\n                            origin: p.fighter.origin,\n                            displayName: p.fighter.displayName,\n                            race: p.fighter.race,\n                            appearance: p.fighter.appearance,\n                            abilityScores: p.fighter.abilityScores,\n                            level: p.fighter.level,\n                            xp: p.fighter.xp,\n                            hpBonus: p.fighter.hpBonus,\n                            skills: p.fighter.skills,\n                            owner: p.fighter.owner,\n                        },\n                        mainhand: p.mainhand,\n                        offhand: p.offhand,\n                        armor: p.armor,\n                        skills: p.skills,\n                    })))\n                };\n            });\n            console.log('BattleCreated', JSON.stringify(battle));\n            let rawtx = await t.export({pay: true, sign: true});\n            t.rollback();\n            const tx = this.bsv.Tx.fromHex(rawtx);\n            this.sigs = tx.txIns.map(txIn => {\n                return txIn.script.toString();\n            });\n            console.log('Create Battle Sigs:', this.sigs);\n            rawtx = this.rawtx = tx.toHex();\n\n            this.emit('subscribe', id);\n            console.log('Build Message');\n            const message = this.wallet.buildMessage({\n                to: players.map(player => player.pubkey),\n                subject: 'SignBattle',\n                context: [nonce],\n                payload: JSON.stringify({id, rawtx, battle})\n            });\n\n            await this.blockchain.sendMessage(message);\n        } catch (e) {\n            console.error('Init Error:', e.message);\n            const errMessage = this.wallet.buildMessage({\n                to: messages.map(m => m.from),\n                subject: 'ExitQueue',\n                payload: e.message\n            });\n            await this.blockchain.sendMessage(errMessage);\n            await Promise.all(messages.map(async message => {\n                return this.constructor.sendExitQueueStatus(message, this.wallet, this.blockchain);\n            }));\n            throw e;\n        }\n        this.timeoutId = this.wallet.setTimeout(() => this.evalSignTimeout(id), 60000);\n\n        this.wallet.setTimeout(() => this.dispose(), 1000);\n    }\n\n    static async processQueue(msg1, agent) {\n        console.log('Processing log', msg1.subject);\n        const queue = await agent.storage.hgetall(this.origin);\n        console.log('Queue:', queue);\n        const player = await this.loadPlayer(msg1, agent.wallet);\n        for (let msgId2 of Object.values(queue)) {\n            const msg2 = await agent.storage.hgetall(msgId2);\n            console.log('Message Loaded:', msg2);\n            const opponent = await this.loadPlayer(msg2, agent.wallet);\n            console.log('Opponent Loaded:', opponent);\n            if (!this.matchOpponent(player, opponent)) {\n                continue;\n            }\n            console.log('Matched:', msg2);\n            return msg2;\n        }\n    }\n\n    static matchOpponent(player, opponent) {\n        return player.pubkey !== opponent.pubkey;\n    }\n\n    async _loadPlayer(message) {\n        return this.constructor.loadPlayer(message, this.wallet);\n    }\n\n    static async loadPlayer(message, wallet) {\n        console.log('Payload:', message.payload);\n        console.time(`_loadPlayer ${message.from}`);\n        const { owner, fighterLocation, itemLocations, skills, coinId } = JSON.parse(message.payload);\n        const [fighter, items] = await Promise.all([\n            (async () => {\n                const fighter = await wallet.loadJig(fighterLocation);\n                if (!fighter) throw new Error(`Validator: Invalid Fighter: ${fighterLocation}`);\n                await fighter.sync();\n                return fighter;\n            })(),\n            Promise.all(itemLocations.map(async (itemId, i) => {\n                if(!itemId) return;\n                const item = await wallet.loadJig(itemId);\n                if (!item) throw new Error(`Invalid Item: ${i} - ${itemId}`);\n                await item.sync();\n                return item;\n            }))\n        ]);\n\n        let coin;\n        if(this.constructor.fee) {\n            coin = await wallet.loadJig(coinId);\n        }\n        console.timeEnd(`_loadPlayer ${message.from}`);\n        return {\n            pubkey: message.from,\n            owner,\n            fighter,\n            items,\n            skills: skills.map(skillType => Skills.library[skillType] || undefined),\n            coin,\n            tags: []\n        };\n    }\n\n    static _validatePlayer({fighter, items, skills, coin}) {\n        const {EquipSlot, ItemProperty} = Constants;\n        if (!fighter || ![BotFighter.origin, Fighter.origin].includes(fighter.constructor.origin)) throw new Error('Invalid Fighter');\n        if(this.fee && (!coin || coin.amount < this.fee)) throw new Error('Insufficient Fee');\n        items.forEach((item, i) => {\n            if (!item) return;\n            // if (!player.isPracticeItem(item) && !player.isTrustedItem(item)) throw new Error('Untrusted Item');\n            if (!item.itemDef) throw new Error('No itemDef');\n            const itemDef = KronoClass.deepClone(item.itemDef);\n            if (!itemDef.equippableSlots.includes(i)) throw new Error(`Item not equippable in slot ${i}`);\n            if (fighter.level < itemDef.levelRequired) {\n                throw new Error(`Inadequate level in slot ${i}`);\n            }\n            itemDef.abilityScoreRequired.forEach((score, i) => {\n                if (fighter.abilityScores[i] < score) {\n                    throw new Error(`Inadequate ability in slot ${i}`);\n                }\n            });\n            if (i === EquipSlot.Offhand && (\n                (items[EquipSlot.Mainhand] && items[EquipSlot.Mainhand].itemDef.properties[ItemProperty.Heavy]) ||\n                itemDef.properties[ItemProperty.Strenuous]\n            )) {\n                throw new Error('Invalid Config');\n            }\n        });\n\n        for (let skill of skills) {\n            if (typeof skill === 'undefined') continue;\n            if (!fighter.skills.includes(skill.skillType)) throw new Error('Invalid Action');\n        }\n    }\n    \n    static joinBattle(validator, player) {\n        const {EquipSlot} = Constants;\n        const {pubkey, owner, items, fighter, skills, coin, tags} = player;\n        this._validatePlayer(player);\n        // const fighterData = fighter.toObject();\n        fighter.auth();\n\n        let coinData;\n        if(this.fee) {\n            coinData = KronoClass.deepClone(coin);\n            coin.send(validator, this.fee);\n        }\n\n        let mainhand = items[EquipSlot.Mainhand] && items[EquipSlot.Mainhand].itemDef;\n        const offhand = items[EquipSlot.Offhand] && items[EquipSlot.Offhand].itemDef;\n        const armor = items[EquipSlot.Body] && items[EquipSlot.Body].itemDef;\n        if (!mainhand && !offhand) {\n            mainhand = BareFist;\n        }\n        items.forEach(item => item && item.auth());\n\n        return {\n            pubkey,\n            owner,\n            fighter,\n            mainhand,\n            offhand,\n            armor,\n            skills,\n            coin: coinData,\n            tags: tags || []\n        };\n    }\n\n    static async sendEnterQueueStatus(message, wallet, blockchain) {\n        console.log('Sending Queue Status');\n        const { fighterLocation } = JSON.parse(message.payload);\n        const fighter = await wallet.loadJig(fighterLocation);\n        const queueMessage = wallet.buildMessage({\n            subject: 'QueueStatus',\n            payload: `${fighter.displayName} has entered queue`\n        });\n        await blockchain.sendMessage(queueMessage);\n    }\n\n    static async sendExitQueueStatus(message, wallet, blockchain) {\n        console.log('Sending Queue Status');\n        const { fighterLocation } = JSON.parse(message.payload);\n        const fighter = await wallet.loadJig(fighterLocation);\n        const queueMessage = wallet.buildMessage({\n            subject: 'QueueStatus',\n            payload: `${fighter.displayName} has exitted queue`\n        });\n        await blockchain.sendMessage(queueMessage);\n    }\n\n    async sendEnteredBattleStatus(message) {\n        console.log('Sending Queue Status');\n        const { fighterLocation } = JSON.parse(message.payload);\n        const fighter = await this.wallet.loadJig(fighterLocation);\n        const queueMessage = this.wallet.buildMessage({\n            subject: 'QueueStatus',\n            payload: `${fighter.displayName} has entered battle`\n        });\n        await this.blockchain.sendMessage(queueMessage);\n    }\n\n    async _buildPlayers(messages) {\n        return Promise.all(messages.map((m) => this._loadPlayer(m)));\n    }\n\n    async onBattleSigned(message) {\n        const sigs = message.payloadObj;\n\n        const queueMessage = this.queueMessages.find(m => m.from === message.from);\n        const { fighterLocation, itemLocations, coinId } = JSON.parse(queueMessage.payload);\n\n        const tx = this.bsv.Tx.fromHex(this.rawtx);\n        tx.txIns.forEach((txIn, i) => {\n            const txid = this.lib.Buffer.from(txIn.txHashBuf).reverse().toString('hex');\n            const loc = `${txid}_o${txIn.txOutNum}`;\n            if (loc !== fighterLocation && !itemLocations.includes(loc) && loc !== coinId) return;\n            this.sigs[i] = sigs[i];\n        });\n\n        for(const sig of this.sigs) {\n            if(!sig || sig === 'OP_0 OP_0') {\n                console.log('Not fully signed', this.sigs);\n                return;\n            }\n        }\n        \n        this.wallet.clearTimeout(this.timeoutId);\n        this.sigs.forEach((sig, i) => tx.txIns[i].setScript(this.bsv.Script.fromString(sig)));\n        const rawtx = tx.toHex();\n        const txid = await this.blockchain.broadcast(rawtx);\n\n        console.time('loadBattle');\n        const payload = this.wallet.getTxPayload(rawtx);\n        const locs = payload.out.map((x, i) => `${txid}_o${i + 1}`);\n        while(locs.length) {\n            const jig = await this.wallet.loadJig(locs.pop());\n            if(jig.constructor.origin !== Battle.origin) continue;\n            this.battle = jig;\n        }\n        if(!this.battle) throw new Error('Battle Create Failed');\n        console.timeEnd('loadBattle');\n\n        this.transaction = this.wallet.createTransaction();\n        this.transaction.update(() => {\n            this.battle.begin(this.wallet.now + this.constructor.initialTimeout);\n        });\n        await this.updateBattle();\n        await Promise.all(this.queueMessages.map(async message => {\n            return this.sendEnteredBattleStatus(message);\n        }));\n    }\n\n    async onBattleAction(message) {\n        const timestamp = this.wallet.now;\n        await this.addToQueue(() => {\n            if (message.subject === 'Act') {\n                const timeout = this.wallet.now + this.battle.rules.timeout;\n                const random = this.hashchain[this.battle.turnCount];\n                this.transaction.update(() => {\n                    this.battle.resolve(random, timestamp, {...message}, timeout);\n                });\n                \n            } else if (message.subject === 'Forfeit') {\n                this.transaction.update(() => {\n                    this.battle.forfeit(message.from, timestamp, {...message});\n                });\n            }\n            return this.updateBattle();\n        });\n    }\n\n    async updateBattle() {\n        console.log('Update Battle');\n        const { id, origin, status, timeout, turnCount } = this.battle;\n\n        this.wallet.clearTimeout(this.timeoutId);\n        if (status === Constants.Status.Open) {\n            const message = this.wallet.buildMessage({\n                to: this.battle.battlePlayers\n                    .map(player => player.pubkey)\n                    .filter(pubkey => pubkey !== this.pubkey),\n                subject: 'BattleUpdated',\n                context: [id, origin],\n                payload: JSON.stringify(this.battle.getState())\n            });\n            await this.blockchain.sendMessage(message);\n\n            const ms = timeout - this.wallet.now;\n            console.log('TIMEOUT:', ms);\n            this.timeoutId = this.wallet.setTimeout(() => this.evalActTimeout(turnCount), ms > 0 ? ms : 0);\n        } else {\n            console.log('Battle complete:', origin);\n            console.time(`publish-${this.battle.id}`);\n            await this.transaction.publish();\n            console.timeEnd(`publish-${this.battle.id}`);\n            \n            const message = this.wallet.buildMessage({\n                to: this.battle.battlePlayers\n                    .map(player => player.pubkey)\n                    .filter(pubkey => pubkey !== this.pubkey),\n                subject: 'BattleCompleted',\n                context: [id, origin],\n                payload: this.battle.location\n            });\n            await this.blockchain.sendMessage(message);\n            if(this.battle.owner === this.address) {\n                this.battle.destroy();\n                await this.battle.sync();\n            }\n            this.battle = null;\n            this.emit('close');\n        }\n    }\n\n    async evalActTimeout(turnCount) {\n        console.log('evalActTimeout', this.battle.id, turnCount);\n        if (turnCount !== this.battle.turnCount) return;\n\n        const now = this.wallet.now;\n        console.log('Resolving timeout', this.battle.origin, now, this.battle.timestamp);\n        const random = this.hashchain[this.battle.turnCount];\n        const timeout = this.wallet.now + this.constructor.timeout;\n\n        this.transaction.update(() => {\n            this.battle.resolve(random, now, null, timeout);\n        });\n        return this.updateBattle();\n    }\n\n    async evalSignTimeout(id) {\n        console.log('evalSignTimeout', id);\n        if(this.battle) return;\n        await this.blockchain.sendMessage(this.wallet.buildMessage({\n            to: this.players.map(p => p.pubkey),\n            subject: 'ExitQueue',\n            context: [id]\n        }));\n        this.emit('close');\n    }\n\n    async dispose() {\n        const index = await this.wallet.loadJigIndex(undefined, 100, 0, false);\n        const deprecated = index\n            .filter(data => !this.constructor.whitelist.includes(data.kind))\n            .slice(0, 50);\n        const jigs = await Promise.all(deprecated.map(async j => {\n            const jig = await this.wallet.loadJig(j.location);\n            await jig.sync();\n            return jig;\n        }));\n        if(!jigs.length) return;\n        for(const jig of jigs) {\n            console.log('Disposing:', jig.constructor.name);\n            jig.destroy();\n            await jig.sync();\n        }\n    }\n\n    static async preDeploy() {\n        this.skills = this.deps.Skills.library;\n        this.config = this.deps.ValidatorConfig;\n        this.lobbies = [\n            this.deps.Tier0Player,\n            this.deps.Tier1Player,\n            this.deps.Tier2Player,\n            this.deps.Tier3Player,\n            this.deps.Tier4Player,\n            this.deps.Tier5Player,\n            this.deps.Tier6Player,\n            this.deps.Tier7Player\n        ];\n\n        this.whitelist = [\n            this.deps.Battle.origin,\n            this.deps.BotFighter.origin,\n            this.deps.KronoItem.origin,\n        ];\n    }\n}",
        "version": "04"
    },
    "jig://820231376f5cdabd943eff6764c4b6fcf637b6c9c23c71ba571307fa2182f190_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "EventEmitter": {
                    "$jig": "783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1"
                },
                "Sha256": {
                    "$jig": "2b890569ea5014ac8ac32a88bc9b1bb17652d4047dcb8352cf78213293aa05e1_o1"
                }
            },
            "hash": "714e04c6a1541f333a97f5cb72ff1c54ec56a6dbd15e36006c070aa9d52358ac",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0,
            "sealed": false
        },
        "src": "class Agent extends EventEmitter {\n    constructor(wallet, blockchain, storage, bsv, lib) {\n        super();\n        this.wallet = wallet;\n        this.blockchain = blockchain;\n        this.storage = storage;\n        this.bsv = bsv;\n        this.lib = lib;\n        this.address = wallet.address;\n        this.pubkey = wallet.pubkey;\n        this.purse = wallet.purse;\n        this.paymail = wallet.paymail;\n\n        this.eventHandlers = new Map();\n        this.jigHandlers = new Map();\n        this.messageHandlers = new Map();\n        this.kindSubHandlers = new Map();\n        this.originSubHandlers = new Map();\n        this.channelSubHandlers = new Map();\n\n        this.queue = Promise.resolve();\n        this.processCount = 0;\n\n        this.handled = new Set();\n    }\n\n    addToQueue(process, label = 'process') {\n        const processCount = this.processCount++;\n        console.time(`${processCount}-${label}`);\n        const queuePromise = this.queue.then(process);\n        this.queue = queuePromise\n            .catch(e => console.error('Queue error', label, e.message, e.stack))\n            .then(() => console.timeEnd(`${processCount}-${label}`));\n\n        return queuePromise;\n    }\n\n    init() { }\n    async onJig(jigData) {\n        if(this.handled.has(jigData.location)) return;\n        this.handled.add(jigData.location);\n        let handler = this.jigHandlers.get(jigData.kind);\n        if (!handler) return;\n        const label = `${this.processCount++}-jig-${jigData.type}-${jigData.location}`;\n        try {\n            console.time(label);\n            const jig = await this.wallet.loadJig(jigData.location);\n            if (!jig) {\n                console.log(`JIG: ${jigData.type} ${jigData.location} missing`);\n                return;\n            }\n            await jig.sync();\n            if (jig.location !== jigData.location) {\n                console.log(`JIG: ${jigData.type} ${jigData.location} spent`);\n            }\n            await handler.bind(this)(jig);\n        } finally {\n            console.timeEnd(label);\n        }\n    }\n\n    async onMessage(message) {\n        if(this.handled.has(message.id)) return;\n        this.handled.add(message.id);\n        let handler = this.messageHandlers.get(message.subject);\n        if (!handler) {\n            console.log('No Handler:', message.subject);\n            return;\n        }\n        const label = `${this.processCount++}-msg-${message.subject}-${message.id}`;\n        try {\n            console.time(label);\n            const result = await handler.bind(this)(message);\n            return result;\n        } finally {\n            console.timeEnd(label);\n        }\n    }\n\n    async onEvent(event, payload) {\n        let handler = this.eventHandlers.get(event);\n        if (!handler) throw new Error('Invalid handler:', event);\n        const label = `${this.processCount++}-event-${event}`;\n        try {\n            console.time(label);\n            const result = await handler.bind(this)(payload);\n            return result;\n        } finally {\n            console.timeEnd(label);\n        }\n        \n    }\n\n    static hexToBytes(hex) {\n        let bytes = new Uint8Array(32);\n        for (let i = 0; i < 64; i += 2) {\n            bytes[i / 2] = parseInt(hex.slice(i, i + 2), 16);\n        }\n        return bytes;\n    }\n\n    generateHashchain(size) {\n        const hashchain = [];\n        // const hashchain = new Array(size);\n        let hash = hashchain[size - 1] = this.wallet.randomBytes(32);\n        for (let i = size - 2; i >= 0; i--) {\n            hash = hashchain[i] = Sha256.hashToHex(Agent.hexToBytes(hash));\n        }\n        return hashchain\n    }\n}",
        "version": "04"
    },
    "jig://783f8d9e43dcd1bd7b85ee07fb1a1d16b56d2a4b029e5fe10e9b417165b709c5_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "hash": "d75a4efd08110365b1c8c013f827470f694bce4fb9928b48ef1747860bd97e81",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0,
            "sealed": false
        },
        "src": "class EventEmitter extends KronoClass {\n    constructor() {\n        super();\n        this.listeners = new Map();\n    }\n\n    on(type, listener) {\n        let listeners = this.listeners.get(type);\n        if(!listeners) {\n            listeners = new Set();\n            this.listeners.set(type, listeners);\n        }\n        listeners.add(listener);\n    }\n\n    off(type, listener) {\n        const listeners = this.listeners.get(type);\n        if(!listeners) return;\n        listeners.delete(listener);\n    }\n\n    emit(type, ...args) {\n        const listeners = this.listeners.get(type);\n        if(!listeners) return;\n        for(let listener of listeners) {\n            listener(...args);\n        }\n    }\n}",
        "version": "04"
    },
    "jig://62bec1d8cd5b0d5e08708049e52f693721bd454e6383fb766c256403c1fbba83_o1": {
        "kind": "code",
        "props": {
            "decimals": 6,
            "deps": {
                "CashierConfig": {
                    "$jig": "62a333e72d5028fd06367a1ed61ef71c222a6827e61dc3ad61e50e8d88b6b860_o1"
                },
                "Jig": {
                    "$jig": "native://Jig"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "Token": {
                    "$jig": "ac686b2347ba6cd955f21bcd8db6678038f03a36e39a3d1a522d46106f31bfaa_o1"
                }
            },
            "hash": "e4f6f2ba93d01a522929eb02558145ca4f65ccda35ed142f1a18111c4f931127",
            "location": "_o1",
            "nonce": 2,
            "origin": "ac686b2347ba6cd955f21bcd8db6678038f03a36e39a3d1a522d46106f31bfaa_o2",
            "owner": "mr21ChbJoVKr9Hk3rbA1RuZe5EehXYVsmv",
            "satoshis": 0
        },
        "src": "class KronoCoin extends Token {\n    setPayment(payment) {\n        this.payment = payment;\n    }\n\n    static mint(amount) {\n        const coin = super.mint(amount);\n        coin.setPayment(caller);\n        return coin;\n    }\n    \n    static transfer(owner) {\n        this.owner = owner;\n    }\n\n    toObject(skipKeys = [], visited = new Set()) {\n        if(visited.has(this)) return;\n        visited.add(this);\n        return KronoClass.cloneChildren(this, skipKeys, visited);\n    }\n\n    static async postDeploy(deployer) {\n        console.log('Token Owner:', this.deps.CashierConfig.address);\n        this.transfer(this.deps.CashierConfig.address);\n        await this.sync();\n    }\n}",
        "version": "04"
    },
    "jig://ac686b2347ba6cd955f21bcd8db6678038f03a36e39a3d1a522d46106f31bfaa_o1": {
        "kind": "code",
        "props": {
            "decimals": 0,
            "deps": {
                "Jig": {
                    "$jig": "native://Jig"
                }
            },
            "icon": {
                "emoji": null
            },
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0,
            "sealed": false,
            "supply": 0,
            "symbol": null
        },
        "src": "class Token extends Jig {init(...t){if(Object.getPrototypeOf(this.constructor)===Jig)throw new Error(\"Token must be extended\");if(caller===this.constructor)return this.Ba(caller.mintAmount),this.amount=caller.mintAmount,void(this.sender=null);if(caller&&caller.constructor===this.constructor)return this.Ba(caller.sendAmount),this.amount=caller.sendAmount,this.owner=caller.sendOwner,void(this.sender=caller.owner);if(!Array.isArray(t)||t.length<2)throw new Error(\"Invalid tokens to combine\");if(t.some((t=>t.constructor!==this.constructor)))throw new Error(\"Cannot combine different token classes\");if(t.some((e=>(e=>t.reduce(((t,n)=>n===e?t+1:t),0))(e)>1)))throw new Error(\"Cannot combine duplicate tokens\");this.amount=0,t.forEach((t=>{this.amount+=t.amount,t.destroy()})),this.sender=null,this.Ba(this.amount)}static mint(t){this.mintAmount=t;const e=new this;return delete this.mintAmount,this.supply+=t,e}destroy(){super.destroy(),this.amount=0,this.sender=null}send(t,e=this.amount){if(this.Ba(e),e>this.amount)throw new Error(\"Not enough funds\");this.sendAmount=e,this.sendOwner=t;const n=new this.constructor;return delete this.sendAmount,delete this.sendOwner,this.amount===e?this.destroy():(this.amount-=e,this.sender=null),n}Ba(t){if(\"number\"!=typeof t)throw new Error(\"amount is not a number\");if(!Number.isInteger(t))throw new Error(\"amount must be an integer\");if(t<=0)throw new Error(\"amount must be positive\");if(t>Number.MAX_SAFE_INTEGER)throw new Error(\"amount too large\")}}",
        "version": "04"
    },
    "jig://68d4287023c42ee5fd3f800388ebe4857b40d143a454fedd369786fa29307888_o1": {
        "kind": "code",
        "props": {
            "address": "mnKRrhoVxmhTZkFuRAsqR5x2bprYybSoR6",
            "agentId": "validator@localhost",
            "deps": {},
            "hash": "d862512cd6b5aa7e5d5532662bf5dbe7cd6dd2d75cee18bbc52e37231d3fbf55",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "pubkey": "02ef377d8f063d8e87685e2d736f24fc1633d47d2b883d62eda41a1f643e741250",
            "satoshis": 0
        },
        "src": "class ValidatorConfig { }",
        "version": "04"
    },
    "jig://62a333e72d5028fd06367a1ed61ef71c222a6827e61dc3ad61e50e8d88b6b860_o1": {
        "kind": "code",
        "props": {
            "address": "mr21ChbJoVKr9Hk3rbA1RuZe5EehXYVsmv",
            "deps": {},
            "hash": "942eb015bcfa0556383f073944cc38fbff468ecca6128697285159427b653994",
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "pubkey": "038df991cc9d789304e1baf32acc185f9040c03c8b68018c00984690d186b10fc7",
            "satoshis": 0
        },
        "src": "class CashierConfig {}",
        "version": "04"
    },
    "jig://3a5bb09f57fd0f5548cf422b96e9127fc66d573dc1c5f1f3d0ef393a275d32d3_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 2,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "diceCount": 1,
            "diceFaces": 4,
            "displayName": "Bare Fist",
            "equippableSlots": [
                0,
                1
            ],
            "hash": "770a0e8c9bfd4c9b5aba145beb3aeaeaefa173afd18e7c3a923afc4347b9d3b9",
            "levelRequired": 0,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                true,
                false,
                false
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 15
        },
        "src": "class BareFist extends KronoClass { }",
        "version": "04"
    },
    "jig://9eead79326a23805f136f37491a06c015d6b2f161d944d1848a4e9c352cdc4c9_o1": {
        "kind": "code",
        "props": {
            "Battleaxe": {
                "$jig": "cf6a5e646c452c6507880a0ce8bb5bb4aab06f5bbfa0a3e723fdf64c2fa50c85_o1"
            },
            "Bow": {
                "$jig": "ecbe04425f6c81c8419bc0b53237d3894b89c3eb0e6598defb8be6f3373e489e_o1"
            },
            "Club": {
                "$jig": "785bacf58a6d82825b395aee36905bd45794443aa3512cd5469244a4f8b86028_o1"
            },
            "Crossbow": {
                "$jig": "94189c87ebd7f8c597bb76007c1c370ee942a9357c399f3c087443a8b05fe8eb_o1"
            },
            "Dagger": {
                "$jig": "f9d893e1bf6b875f20462fe202d46c81eb79df80b3491c623d9a4937412aedfb_o1"
            },
            "Greatsword": {
                "$jig": "0eeab9c8f278e3d137dc4923b2ddb09bc1885f142f08389f67823eb2d636f5fa_o1"
            },
            "Mace": {
                "$jig": "0bb728691a828a6ce6419c94038f57a5ad92710785784608bdf966dc0fb89ee5_o1"
            },
            "Maul": {
                "$jig": "41ffca43394bf75d46ef6dc0d935dcdc639496997f047434e63f9b148fdad9a0_o1"
            },
            "Pike": {
                "$jig": "8673ed291a74221cdab3909e981fc3f92416f77b34759382cd839b5b32ebc53e_o1"
            },
            "Shortsword": {
                "$jig": "ccb55f03d072c7b09fc282b195fed719a8c215da8c4f85b68f3c3c4a9e8215c3_o1"
            },
            "Wizardstaff": {
                "$jig": "0b62e3b6942367e8f705889ed494b1f729ad977d3aae6626b900a8e83d901b2d_o1"
            },
            "deps": {
                "Battleaxe": {
                    "$dup": [
                        "Battleaxe"
                    ]
                },
                "Bow": {
                    "$dup": [
                        "Bow"
                    ]
                },
                "Club": {
                    "$dup": [
                        "Club"
                    ]
                },
                "Crossbow": {
                    "$dup": [
                        "Crossbow"
                    ]
                },
                "Dagger": {
                    "$dup": [
                        "Dagger"
                    ]
                },
                "Greatsword": {
                    "$dup": [
                        "Greatsword"
                    ]
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "Mace": {
                    "$dup": [
                        "Mace"
                    ]
                },
                "Maul": {
                    "$dup": [
                        "Maul"
                    ]
                },
                "Pike": {
                    "$dup": [
                        "Pike"
                    ]
                },
                "Quarterstaff": {
                    "$dup": [
                        "Pike"
                    ]
                },
                "Shortsword": {
                    "$dup": [
                        "Shortsword"
                    ]
                },
                "Wizardstaff": {
                    "$dup": [
                        "Wizardstaff"
                    ]
                }
            },
            "hash": "4e62f2c7bfe069e5a080b8d92c65335d593631163fb3be5cf934af4e5407ebdd",
            "itemDefs": [
                {
                    "$dup": [
                        "Battleaxe"
                    ]
                },
                {
                    "$dup": [
                        "Bow"
                    ]
                },
                {
                    "$dup": [
                        "Club"
                    ]
                },
                {
                    "$dup": [
                        "Dagger"
                    ]
                },
                {
                    "$dup": [
                        "Greatsword"
                    ]
                },
                {
                    "$dup": [
                        "Mace"
                    ]
                },
                {
                    "$dup": [
                        "Maul"
                    ]
                },
                {
                    "$dup": [
                        "Pike"
                    ]
                },
                {
                    "$dup": [
                        "Pike"
                    ]
                },
                {
                    "$dup": [
                        "Shortsword"
                    ]
                },
                {
                    "$dup": [
                        "Crossbow"
                    ]
                },
                {
                    "$dup": [
                        "Wizardstaff"
                    ]
                }
            ],
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class CommonItems extends KronoClass {\n    static async preDeploy() {\n        this.itemDefs = [\n            CommonItems.deps.Battleaxe,\n            CommonItems.deps.Bow,\n            CommonItems.deps.Club,\n            CommonItems.deps.Dagger,\n            CommonItems.deps.Greatsword,\n            CommonItems.deps.Mace,\n            CommonItems.deps.Maul,\n            CommonItems.deps.Pike,\n            CommonItems.deps.Quarterstaff,\n            CommonItems.deps.Shortsword,\n            CommonItems.deps.Crossbow,\n            CommonItems.deps.Wizardstaff,\n        ];\n\n        this.itemDefs.forEach(itemDef => this[itemDef.name] = itemDef);\n    }\n}",
        "version": "04"
    },
    "jig://cf6a5e646c452c6507880a0ce8bb5bb4aab06f5bbfa0a3e723fdf64c2fa50c85_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 1,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "A battleaxe is a specialized versions of an utility axe, specifically designed for battle.",
            "diceCount": 1,
            "diceFaces": 6,
            "displayName": "Battleaxe",
            "equippableSlots": [
                0,
                1
            ],
            "hash": "de0d31a3c084bd61ad01d609040b3429c7c957f5ab61ff842077e3c699c24a87",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                true,
                false
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 1
        },
        "src": "class Battleaxe extends KronoClass { }",
        "version": "04"
    },
    "jig://b325a272c76b74032b38615ff7b560cc10b0591c58ac4ebb16ee43bea374c9a1_o1": {
        "kind": "code",
        "props": {
            "PracticeBareFist": {
                "$jig": "fc709aa8e1a3f13591391d91a0ef84b26ed14acde4c2630439b02041e083fe5e_o1"
            },
            "PracticeBow": {
                "$jig": "71ecb049403ed15c6ff682a685aa72988fb5e238ef039f98173a85d7c4f46419_o1"
            },
            "PracticeClub": {
                "$jig": "e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1"
            },
            "PracticeDagger": {
                "$jig": "abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1"
            },
            "PracticeMaul": {
                "$jig": "5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1"
            },
            "PracticePike": {
                "$jig": "3613c59ed51ce8c09911de77037d102ee2e3d27cbbcff52a2b0f896b34a04e84_o1"
            },
            "PracticeQuarterstaff": {
                "$jig": "a0e8ea3090a0b992d5700ce1eb210daa65f64f7bfbfaf85b340f04afbe74767d_o1"
            },
            "PracticeSword": {
                "$jig": "d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1"
            },
            "PracticeWizardstaff": {
                "$jig": "764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1"
            },
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "PracticeBareFist": {
                    "$dup": [
                        "PracticeBareFist"
                    ]
                },
                "PracticeBow": {
                    "$dup": [
                        "PracticeBow"
                    ]
                },
                "PracticeClub": {
                    "$dup": [
                        "PracticeClub"
                    ]
                },
                "PracticeDagger": {
                    "$dup": [
                        "PracticeDagger"
                    ]
                },
                "PracticeMaul": {
                    "$dup": [
                        "PracticeMaul"
                    ]
                },
                "PracticePike": {
                    "$dup": [
                        "PracticePike"
                    ]
                },
                "PracticeQuarterstaff": {
                    "$dup": [
                        "PracticeQuarterstaff"
                    ]
                },
                "PracticeSword": {
                    "$dup": [
                        "PracticeSword"
                    ]
                },
                "PracticeWizardstaff": {
                    "$dup": [
                        "PracticeWizardstaff"
                    ]
                }
            },
            "hash": "4a6fd429eb27788ee7db4180bfa547a2dc3e3288c714c5b9c3478743f1a41c57",
            "itemDefs": [
                {
                    "$dup": [
                        "PracticeBareFist"
                    ]
                },
                {
                    "$dup": [
                        "PracticeBow"
                    ]
                },
                {
                    "$dup": [
                        "PracticeQuarterstaff"
                    ]
                },
                {
                    "$dup": [
                        "PracticeSword"
                    ]
                },
                {
                    "$dup": [
                        "PracticeDagger"
                    ]
                },
                {
                    "$dup": [
                        "PracticePike"
                    ]
                },
                {
                    "$dup": [
                        "PracticeWizardstaff"
                    ]
                },
                {
                    "$dup": [
                        "PracticeMaul"
                    ]
                },
                {
                    "$dup": [
                        "PracticeClub"
                    ]
                }
            ],
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class PracticeItems extends KronoClass {\n    static async preDeploy() {\n        this.itemDefs = [\n            this.deps.PracticeBareFist,\n            this.deps.PracticeBow,\n            this.deps.PracticeQuarterstaff,\n            this.deps.PracticeSword,\n            this.deps.PracticeDagger,\n            this.deps.PracticePike,\n            this.deps.PracticeWizardstaff,\n            this.deps.PracticeMaul,\n            this.deps.PracticeClub,\n        ];\n        this.itemDefs.forEach(itemDef => this[itemDef.name] = itemDef);\n    }\n}",
        "version": "04"
    },
    "jig://ecbe04425f6c81c8419bc0b53237d3894b89c3eb0e6598defb8be6f3373e489e_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 0,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Archery is an art; A bowman needs skill to land precision shots and vanquish his foes from afar.",
            "diceCount": 1,
            "diceFaces": 8,
            "displayName": "Bow",
            "equippableSlots": [
                0
            ],
            "hash": "13716d20165050903ac4ccac09e2b7d29aaa8f0b061284c37c3e2e3f2f8c3539",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                false,
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                true,
                false,
                false
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 2
        },
        "src": "class Bow extends KronoClass { }",
        "version": "04"
    },
    "jig://71ecb049403ed15c6ff682a685aa72988fb5e238ef039f98173a85d7c4f46419_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 0,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Archery is an art; A bowman needs skill to land precision shots and vanquish his foes from afar.",
            "diceCount": 1,
            "diceFaces": 8,
            "displayName": "Practice Bow",
            "equippableSlots": [
                0
            ],
            "hash": "5cc689597cf1b2b8a0e0659f5aba9f89d45d3914eb7d831cd5b08bfd7d7c8dc9",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                false,
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                true,
                false,
                false
            ],
            "quality": 0,
            "satoshis": 0,
            "type": 2
        },
        "src": "class PracticeBow extends KronoClass { }",
        "version": "04"
    },
    "jig://3810e849cc633b2febfc63f1ffa69d1c20a88cc2637027f47f855305c59f41ab_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BattleCry": {
                    "$jig": "82fcd24ece47b8509a9d9cca1a9ac3a9bc4f0a50ff3d9222ce2008c3a768300c_o1"
                },
                "Burn": {
                    "$jig": "5a72febdb371ae168954f617e7a560172dae39be6f161327c46079c4c4fc4e29_o1"
                },
                "Chill": {
                    "$jig": "367bc789fea9cfc162b7339b846b7faa795bcea8ca9acbc037542a07cd215d56_o1"
                },
                "Cleanse": {
                    "$jig": "60f52848b561cdbeb5e224e471fccda1ef18eaac61ed00b68b7ec6a93887ca06_o1"
                },
                "CoatWeapon": {
                    "$jig": "2962fad9fa8132e8f92f1ddff0549d48f6eb4f97a52e2e632a981f9a21bad773_o1"
                },
                "Curse": {
                    "$jig": "824f31661a663e6bde6823fcfebd20c5f65efaa044a0bfb33176acb89b6c81d3_o1"
                },
                "DirtyFighting": {
                    "$jig": "071c311de460b9409720650f65544ff88b0d51a78b13cd2aa5fc238c587fd713_o1"
                },
                "Dwarven": {
                    "$jig": "0a4d876cccc7a0367529cbb74f002d01b1b5660f262ef3844b8778487b624fd5_o1"
                },
                "Elven": {
                    "$jig": "90efb8facfc2c8dc7386cba121c3d282122b8d082eb54bd50789b3cf035e4b0d_o1"
                },
                "Fireball": {
                    "$jig": "201b3c1cdc7aea0e766f7cfa07ce984ce6df5991d25b413bdfea00097c88a744_o1"
                },
                "Focus": {
                    "$jig": "84e7dbd4661e0e48e14bcd560082c0fa08989be775dd3a4361935605a2b71d45_o1"
                },
                "Freeze": {
                    "$jig": "69ff17c93cba65cf10ae9d9d4194dd8f6753022fc565aa99db2160ac35121d47_o1"
                },
                "Gore": {
                    "$jig": "6c4b330cf4cfd964aa9a933af4ea6156258df0c7a59a8fc61564b5c1839c1522_o1"
                },
                "Heal": {
                    "$jig": "884b55266d740b07efb0a078e20a6670a872922912f8484172fa5e8db47e9cb8_o1"
                },
                "Hex": {
                    "$jig": "4ce9d4ec258ab7fa1a229a6eb21cf46396eddf020055a92b5f9d0259e0493d27_o1"
                },
                "Hide": {
                    "$jig": "17d728beb0e367d26ce9537d5cc4b2752a5232f043a5d6fb6fe4e5f7b7a3424b_o1"
                },
                "Human": {
                    "$jig": "1998ce5371018ddc57a274d0948db53db7fc29b2ae64de2b10580951792e611f_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                },
                "LightningBolt": {
                    "$jig": "6fbe3be0db1a859e187816f2185513d5cf70130f5aaaa0eacbe9d001ddef8b15_o1"
                },
                "LockAndLoad": {
                    "$jig": "f0300c60d544eb13b8e56fd6e6378259ee212fb1720d3fd673460160207038e2_o1"
                },
                "Mark": {
                    "$jig": "3cffd1a80d5b9f81abdcb985796fc3518ecf2085098674a17f835f92181df9f1_o1"
                },
                "Meditate": {
                    "$jig": "bcf88d73871fc58b23a06b8138d5566d4f7961e1a11a95721cea315e45052b39_o1"
                },
                "PhaseShift": {
                    "$jig": "bb0892d403e03defc3f009f2415873b58057bb3d908bbee7b37e6fbe3a5ddf5b_o1"
                },
                "PinningStrike": {
                    "$jig": "382446c4f8f71c1f058ca0cddf35c3d8759c3a11643a22b5964cb4d99521b2f8_o1"
                },
                "PowerAttack": {
                    "$jig": "9f291b42b8faa8ee2f5784b05f861fe19239738d65e1513e51f0e3e5cc43d993_o1"
                },
                "SecondWind": {
                    "$jig": "8f6aa0825ce476c1174ef2faaead20add8642756b12b79f93a4772350088d235_o1"
                },
                "Shock": {
                    "$jig": "5cab9cbc29822f044d1c131e89e3a0d9f41c6cf46a7a40d41ea6c40ebdc166c8_o1"
                },
                "Smite": {
                    "$jig": "eeaba59f685867d4ba186f2783d924b58916c5b1a1a6424f354c2d6d9b26849f_o1"
                },
                "SneakAttack": {
                    "$jig": "5679399006dd0505d2c188cbdd68692f4bc86aced9f75536d186d9c3cfd1d1b3_o1"
                },
                "Stun": {
                    "$jig": "8f3ee730e89b45fc8f85b4fd16ae6b9c36a74f2fb30fc80876e58249cc606d8f_o1"
                },
                "Taunt": {
                    "$jig": "ff05e7e4ebca236e9e4c20bf6fcca32054da345119f6b13aeb66b35e7332016e_o1"
                }
            },
            "hash": "06e9e3a88a92fb47cb6a708898a6edda699a4f2e103d64b6d64a7c33635cca5a",
            "library": {
                "0": {
                    "$dup": [
                        "deps",
                        "Attack"
                    ]
                },
                "1": {
                    "$dup": [
                        "deps",
                        "Focus"
                    ]
                },
                "2": {
                    "$dup": [
                        "deps",
                        "Hide"
                    ]
                },
                "3": {
                    "$dup": [
                        "deps",
                        "Burn"
                    ]
                },
                "4": {
                    "$dup": [
                        "deps",
                        "Chill"
                    ]
                },
                "5": {
                    "$dup": [
                        "deps",
                        "CoatWeapon"
                    ]
                },
                "6": {
                    "$dup": [
                        "deps",
                        "DirtyFighting"
                    ]
                },
                "7": {
                    "$dup": [
                        "deps",
                        "Heal"
                    ]
                },
                "8": {
                    "$dup": [
                        "deps",
                        "Hex"
                    ]
                },
                "9": {
                    "$dup": [
                        "deps",
                        "Mark"
                    ]
                },
                "10": {
                    "$dup": [
                        "deps",
                        "Meditate"
                    ]
                },
                "11": {
                    "$dup": [
                        "deps",
                        "PhaseShift"
                    ]
                },
                "12": {
                    "$dup": [
                        "deps",
                        "PinningStrike"
                    ]
                },
                "13": {
                    "$dup": [
                        "deps",
                        "PowerAttack"
                    ]
                },
                "14": {
                    "$dup": [
                        "deps",
                        "Shock"
                    ]
                },
                "15": {
                    "$dup": [
                        "deps",
                        "Smite"
                    ]
                },
                "16": {
                    "$dup": [
                        "deps",
                        "SneakAttack"
                    ]
                },
                "17": {
                    "$dup": [
                        "deps",
                        "Stun"
                    ]
                },
                "18": {
                    "$dup": [
                        "deps",
                        "Taunt"
                    ]
                },
                "19": {
                    "$dup": [
                        "deps",
                        "BattleCry"
                    ]
                },
                "20": {
                    "$dup": [
                        "deps",
                        "Cleanse"
                    ]
                },
                "21": {
                    "$dup": [
                        "deps",
                        "Curse"
                    ]
                },
                "22": {
                    "$dup": [
                        "deps",
                        "Fireball"
                    ]
                },
                "23": {
                    "$dup": [
                        "deps",
                        "Freeze"
                    ]
                },
                "24": {
                    "$dup": [
                        "deps",
                        "Gore"
                    ]
                },
                "25": {
                    "$dup": [
                        "deps",
                        "LightningBolt"
                    ]
                },
                "26": {
                    "$dup": [
                        "deps",
                        "LockAndLoad"
                    ]
                },
                "27": {
                    "$dup": [
                        "deps",
                        "SecondWind"
                    ]
                },
                "31": {
                    "$dup": [
                        "deps",
                        "Dwarven"
                    ]
                },
                "32": {
                    "$dup": [
                        "deps",
                        "Elven"
                    ]
                },
                "33": {
                    "$dup": [
                        "deps",
                        "Human"
                    ]
                }
            },
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "satoshis": 0
        },
        "src": "class Skills extends KronoClass {\n    static async preDeploy() {\n        for (const [name, skill] of Object.entries(Skills.deps)) {\n            if (name === 'KronoClass') continue;\n            Skills.library[skill.skillType] = skill;\n        }\n    }\n}",
        "version": "04"
    },
    "jig://785bacf58a6d82825b395aee36905bd45794443aa3512cd5469244a4f8b86028_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 2,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "A club is among the simplest of all weapons, wielded as a weapon since prehistoric times.",
            "diceCount": 1,
            "diceFaces": 4,
            "displayName": "Club",
            "equippableSlots": [
                0,
                1
            ],
            "hash": "dd016029412cae2c51ef4a3ef062bbad4740c12630be8b42d601ae64181247fe",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                true,
                false,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 3
        },
        "src": "class Club extends KronoClass { }",
        "version": "04"
    },
    "jig://82fcd24ece47b8509a9d9cca1a9ac3a9bc4f0a50ff3d9222ce2008c3a768300c_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": false,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Battle Cry Action",
            "displayName": "Battle Cry",
            "handle": "battle-cry",
            "hash": "4aba313f9c5b721e7b1b41ff71aa5f348215951665a5608f2b4467fa8d51eca8",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 19
        },
        "src": "class BattleCry extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {SkillType, StatusEffect} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.BattleCry)}\">${BattleUtils.parseSkillName(SkillType.BattleCry)}\\n`;\n\n        state.actionLogs.push(BattleUtils.makeStatusEffectActionLog(battle, state, SkillType.BattleCry, StatusEffect.Inspired, 6, log));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://e28ef56b0d90db7b6b7b00f61be07fe71ac7432723fb8610d10a4720e00d83b9_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 2,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "A Club is among the simplest of all weapons, wielded as a weapon since prehistoric times.",
            "diceCount": 1,
            "diceFaces": 4,
            "displayName": "PracticeClub",
            "equippableSlots": [
                0,
                1
            ],
            "hash": "b80f811727b1ddd1cd375c0bc8661d438ead39820aa8fa5ba575769dcfddf2c0",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                true,
                false,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 3
        },
        "src": "class PracticeClub extends KronoClass { }",
        "version": "04"
    },
    "jig://94189c87ebd7f8c597bb76007c1c370ee942a9357c399f3c087443a8b05fe8eb_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 0,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "You can't not look cool with a crossbow.",
            "diceCount": 1,
            "diceFaces": 12,
            "displayName": "Crossbow",
            "equippableSlots": [
                0
            ],
            "hash": "8e455c4b167aacf976d54a4c308d8cae66226cd05af4e0bcc7eef80c63027a76",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                false,
                true,
                false,
                false,
                true,
                true,
                false,
                true,
                false,
                true,
                false,
                false
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 16
        },
        "src": "class Crossbow extends KronoClass { }",
        "version": "04"
    },
    "jig://a0e8ea3090a0b992d5700ce1eb210daa65f64f7bfbfaf85b340f04afbe74767d_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 2,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "A Quarterstaff is a pole weapon, usually a shaft of hardwood. There are many ways to hold and yield a Quarterstaff.",
            "diceCount": 1,
            "diceFaces": 4,
            "displayName": "Practice Quarterstaff",
            "equippableSlots": [
                0
            ],
            "hash": "dcf30cc81d2131576f6ac889c338ec3112cd2f3615005659710fc7fa8bda0420",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                false,
                true,
                false,
                true,
                false,
                false,
                true,
                false,
                false,
                true,
                false,
                false
            ],
            "quality": 0,
            "satoshis": 0,
            "type": 9
        },
        "src": "class PracticeQuarterstaff extends KronoClass { }",
        "version": "04"
    },
    "jig://5a72febdb371ae168954f617e7a560172dae39be6f161327c46079c4c4fc4e29_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "Dice": {
                    "$jig": "301527c6508489f3fa79f77173aa3f6c76711b096bcdb49e9f2cfcdb6d784ff7_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Burn Action",
            "displayName": "Burn",
            "handle": "burn",
            "hash": "f3624e88c2cee25e44db95fd71dfe34f4bc7ed54eb9d7d033d714978e9c96cad",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 3
        },
        "src": "class Burn extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {Ability, DamageType, SkillType} = Constants;\n        const defenderPlayer = battle.battlePlayers[state.playerToAct ? 0 : 1];\n\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let opponentName = BattleUtils.getOpponentName(battle, state);\n\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Burn)}\">${BattleUtils.parseSkillName(SkillType.Burn)}\\n<gradient=!log-color> `;\n\n        let attackActionLog = {\n            actionLogMessage: log\n        };\n        attackActionLog.playerIndex = state.playerToAct;\n        attackActionLog.skillType = SkillType.Burn;\n        attackActionLog.results = [];\n\n        let resultMessage = `${playerName} spell attacks ${opponentName} : `; // goes up\n        var result = Attack.makeResult(battle, state, dice, Ability.Intelligence, Ability.Intelligence, 0, 0, 0, DamageType.Fire, 1, 8, defenderPlayer, resultMessage, SkillType.Burn);\n\n        attackActionLog.results.push(result);\n        state.actionLogs.push(attackActionLog);\n\n        Attack.processPostAttackStatus(state, battle, state.fighterStates[state.playerToAct], state.fighterStates[state.playerToAct ? 0 : 1], SkillType.Burn, state.fighterStates[state.playerToAct ? 0 : 1].hp, dice, defenderPlayer);\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://abd6e159a82b6ade66895b349f1532c324b4b4fec5323c93389922d5e1bcab7b_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 0,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Has a very sharp point, specifically designed to stab people.",
            "diceCount": 1,
            "diceFaces": 4,
            "displayName": "Practice Dagger",
            "equippableSlots": [
                0,
                1
            ],
            "hash": "f9ccbb50ad1cac6238a0375f1a2b1acc2ec5ffc66c1f2d8eeb262417f01d67ff",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                false,
                true,
                false,
                true,
                false,
                false,
                false,
                true,
                true,
                false,
                false,
                false
            ],
            "quality": 0,
            "satoshis": 0,
            "type": 4
        },
        "src": "class PracticeDagger extends KronoClass { }",
        "version": "04"
    },
    "jig://f9d893e1bf6b875f20462fe202d46c81eb79df80b3491c623d9a4937412aedfb_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 0,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Has a very sharp point, specifically designed to stab people.",
            "diceCount": 1,
            "diceFaces": 4,
            "displayName": "Dagger",
            "equippableSlots": [
                0,
                1
            ],
            "hash": "0e282a14843a550a660f869e0445b2a334dbc07409a73ef28305af1f39c1281d",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                false,
                true,
                false,
                true,
                false,
                false,
                false,
                true,
                true,
                false,
                false,
                false
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 4
        },
        "src": "class Dagger extends KronoClass { }",
        "version": "04"
    },
    "jig://d2aea167f330464006e9b38d08cc3a0b2108fd2809a8f921df9b975bea7604e2_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 1,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "In essence, this weapon is a smaller version of the longsword but longer than a dagger or dirk.",
            "diceCount": 1,
            "diceFaces": 4,
            "displayName": "Practice Shortsword",
            "equippableSlots": [
                0,
                1
            ],
            "hash": "70a2ad6ae40be18789915f1043ed62a66189bdca8778d79883eb612a0abcbc13",
            "levelRequired": 0,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                false,
                false,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "quality": 0,
            "satoshis": 0,
            "type": 10
        },
        "src": "class PracticeSword extends KronoClass { }",
        "version": "04"
    },
    "jig://367bc789fea9cfc162b7339b846b7faa795bcea8ca9acbc037542a07cd215d56_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Chill Action",
            "displayName": "Chill",
            "handle": "chill",
            "hash": "2561a6ab568bb302ffb12a71bcc9da0b825b36e7417e24dadf0de2199657194d",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 4
        },
        "src": "class Chill extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {Ability, DamageType, SkillType} = Constants;\n        const defenderPlayer = battle.battlePlayers[state.playerToAct ? 0 : 1];\n\n        let opponentName = BattleUtils.getOpponentName(battle, state);\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        \n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Chill)}\">${BattleUtils.parseSkillName(SkillType.Chill)}\\n<gradient=!log-color> `;\n\n        let attackActionLog = {\n            actionLogMessage: log\n        };\n        attackActionLog.playerIndex = state.playerToAct;\n        attackActionLog.skillType = SkillType.Chill;\n        attackActionLog.results = [];\n\n        let resultMessage = `${playerName} spell attacks ${opponentName} : `; // goes up\n        var result = Attack.makeResult(battle, state, dice, Ability.Intelligence, Ability.Intelligence, 0, 0, 0, DamageType.Cold, 1, 4, defenderPlayer, resultMessage, SkillType.Chill);\n\n        attackActionLog.results.push(result);\n        state.actionLogs.push(attackActionLog);\n\n        Attack.processPostAttackStatus(state, battle, state.fighterStates[state.playerToAct], state.fighterStates[state.playerToAct ? 0 : 1], SkillType.Chill, state.fighterStates[state.playerToAct ? 0 : 1].hp, dice, defenderPlayer);\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://5c43bba88ce594bfb81d5de355c32b727b10848c22f8a4bdd8bd8cf021cab3b6_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 2,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "The size of its head allows a Maul to apply more force than other hammers of similar size.",
            "diceCount": 2,
            "diceFaces": 6,
            "displayName": "Practice Maul",
            "equippableSlots": [
                0
            ],
            "hash": "1e03d29c6d458c7d3e0768b5684611679511611e2f1618d75d9c9ecbc236b875",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                true,
                false,
                false
            ],
            "quality": 0,
            "satoshis": 0,
            "type": 7
        },
        "src": "class PracticeMaul extends KronoClass { }",
        "version": "04"
    },
    "jig://0eeab9c8f278e3d137dc4923b2ddb09bc1885f142f08389f67823eb2d636f5fa_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 1,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "The greatsword is the largest member of the sword family requiring two hands to wield.",
            "diceCount": 2,
            "diceFaces": 6,
            "displayName": "Greatsword",
            "equippableSlots": [
                0
            ],
            "hash": "2e2747fae536aa3ef20be11ba196ff0c57cc65a91eed886b17103b2a85184551",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                true,
                false,
                false
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 5
        },
        "src": "class Greatsword extends KronoClass { }",
        "version": "04"
    },
    "jig://764076dea4d5d4fe7d71f0437efb2613fa1800fb5bc3d0666a3ce3aeb2007d83_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 2,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "A Wizardstaff is a pole weapon, usually a shaft of hardwood. There are many ways to hold and yield a Wizardstaff.",
            "diceCount": 1,
            "diceFaces": 4,
            "displayName": "Practice Wizardstaff",
            "equippableSlots": [
                0
            ],
            "hash": "cb4c483b8108f953dc4ad23c8d6583b4e06905b1aa89207af46eb0890817a4ea",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                true,
                false,
                false
            ],
            "quality": 0,
            "satoshis": 0,
            "type": 17
        },
        "src": "class PracticeWizardstaff extends KronoClass { }",
        "version": "04"
    },
    "jig://2962fad9fa8132e8f92f1ddff0549d48f6eb4f97a52e2e632a981f9a21bad773_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": false,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "CoatWeapon Action",
            "displayName": "Coat Weapon",
            "handle": "coat-weapon",
            "hash": "4ad7b435f34e83f67d1443d42225849957f0b60264c31c6a3d56b455c60e7bce",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 5
        },
        "src": "class CoatWeapon extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {SkillType, StatusEffect} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.CoatWeapon)}\">${BattleUtils.parseSkillName(SkillType.CoatWeapon)}\\n`;\n\n        state.actionLogs.push(BattleUtils.makeStatusEffectActionLog(battle, state, SkillType.CoatWeapon, StatusEffect.Poisonous, 4, log));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://60f52848b561cdbeb5e224e471fccda1ef18eaac61ed00b68b7ec6a93887ca06_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": false,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Cleanse Action",
            "displayName": "Cleanse",
            "handle": "cleanse",
            "hash": "3c8c5de5989f2a12c9aa736c1cd725e1435c28a51b2625a87c933a0412e0ef60",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 20
        },
        "src": "class Cleanse extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {Outcome, SkillType} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Cleanse)}\">${BattleUtils.parseSkillName(SkillType.Cleanse)}\\n`;\n\n        const defenderState = state.fighterStates[state.playerToAct ? 0 : 1];\n        const attackerState = state.fighterStates[state.playerToAct];\n\n        attackerState.statusEffectsRound = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n        log += `${playerName}<gradient=!log-color> is no longer under any status effect`;\n\n        var al = {\n            playerIndex: state.playerToAct,\n            skillType: SkillType.Focus,\n            results: [{\n                rolls: [],\n                outcome: Outcome.Success,\n                damageOutput: [{\n                    damage: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                    defenderHp: defenderState.hp,\n                    defenderReduction: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                }],\n                attackerStatusEffectsIncrement: [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99],\n                defenderStatusEffectsIncrement: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                hpIncrement: 0,\n                attackerHp: attackerState.hp\n            }],\n            actionLogMessage: log\n        };\n\n        state.actionLogs.push(al);\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://0bb728691a828a6ce6419c94038f57a5ad92710785784608bdf966dc0fb89ee5_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 2,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "A Mace is a sort of club like blunt weapon that uses a heavy head on the end of a handle to deliver powerful blows.",
            "diceCount": 1,
            "diceFaces": 4,
            "displayName": "Mace",
            "equippableSlots": [
                0,
                1
            ],
            "hash": "acec767f592f3229ffffe04dac7e484a5cfcdd2756049231bd6001e931e157d9",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 6
        },
        "src": "class Mace extends KronoClass { }",
        "version": "04"
    },
    "jig://071c311de460b9409720650f65544ff88b0d51a78b13cd2aa5fc238c587fd713_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "DirtyFighting Action",
            "displayName": "DirtyFighting",
            "handle": "dirty-fighting",
            "hash": "2ad37ca22d402c370a77ada2e5a52e3db8a18b4e1e2eb65d5a115ec9390b335b",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 6
        },
        "src": "class DirtyFighting extends KronoClass {\n    static run(battle, state, dice, timestamp) {\n        const {SkillType} = Constants;\n        return Attack.run(battle, state, dice, timestamp, -1, 0, SkillType.DirtyFighting);\n    }\n}",
        "version": "04"
    },
    "jig://824f31661a663e6bde6823fcfebd20c5f65efaa044a0bfb33176acb89b6c81d3_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Curse Action",
            "displayName": "Curse",
            "handle": "curse",
            "hash": "8c6c7af3076ed2cb431d070a3c480409f61e9262b72b916228434d76f76ac7ad",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 21
        },
        "src": "class Curse extends KronoClass {\n    static run(battle, state, dice) {\n        const {Ability, SkillType, StatusEffect} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Curse)}\">${BattleUtils.parseSkillName(SkillType.Curse)}\\n`;\n        var defenderAbility = BattleUtils.getDefenderMaxAbility(battle, state);\n        state.actionLogs.push(BattleUtils.abilityCheckAndApplyStatusEffect(battle, state, dice, SkillType.Curse, Ability.Intelligence, defenderAbility, StatusEffect.Cursed, 3, false, log));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://8673ed291a74221cdab3909e981fc3f92416f77b34759382cd839b5b32ebc53e_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 0,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "A Pike is a pole weapon, a very long thrusting spear, unlike many similar weapons, the Pike is not intended to be thrown.",
            "diceCount": 1,
            "diceFaces": 8,
            "displayName": "Pike",
            "equippableSlots": [
                0
            ],
            "hash": "640d2216f1ccf5745d3a2073f79f0f7a876c2e01fb27a764d1451575132a1983",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                true,
                false,
                false,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                true
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 8
        },
        "src": "class Pike extends KronoClass { }",
        "version": "04"
    },
    "jig://884b55266d740b07efb0a078e20a6670a872922912f8484172fa5e8db47e9cb8_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": false,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Heal Action",
            "displayName": "Heal",
            "handle": "heal",
            "hash": "34e1e3bc403d13c6d657284be985f061f1b699e1f0abdde1adf21ed2a783f171",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 7
        },
        "src": "class Heal extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {Ability, SkillType} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Heal)}\">${BattleUtils.parseSkillName(SkillType.Heal)}\\n`;\n\n        state.actionLogs.push(this.apply(battle, state, dice, 1, 8, Ability.Intelligence, log));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n\n\n    static apply(battle, state, dice, diceCount, diceFaces, ability, log) {\n        const {Outcome, SkillType} = Constants;\n        let rolls = [];\n        let nativeRoll = dice.roll(diceCount, diceFaces);\n        rolls.push({\n            type: diceFaces,\n            ability: ability,\n            size: diceFaces,\n            value: nativeRoll\n        });\n\n        const defenderState = state.fighterStates[state.playerToAct ? 0 : 1];\n        const attackerState = state.fighterStates[state.playerToAct];\n\n        let playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n\n        let healAmount = nativeRoll + attackerState.modifiers[ability];\n\n        if (attackerState.hp + healAmount > attackerState.maxHP) {\n            healAmount = (attackerState.maxHP - attackerState.hp);\n        }\n\n        attackerState.hp += healAmount;\n\n        log += `${playerName} heals : ${healAmount}\\n`;\n\n        return {\n            playerIndex: state.playerToAct,\n            skillType: SkillType.Heal,\n            results: [{\n                rolls: rolls,\n                outcome: Outcome.Success,\n                damageOutput: [\n                    {\n                        damage: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                        defenderHp: defenderState.hp,\n                        defenderReduction: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n                    }\n                ],\n                effectDurationsIncrement: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                hpIncrement: healAmount,\n                attackerHp: attackerState.hp\n            }],\n            actionLogMessage: log\n        };\n\n    }\n}",
        "version": "04"
    },
    "jig://0a4d876cccc7a0367529cbb74f002d01b1b5660f262ef3844b8778487b624fd5_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Dwarven",
            "displayName": "Dwarven",
            "handle": "dwarven",
            "hash": "c3843afb3f233af073deb64bb45941ae49219e3fa531b6e0bd7e71bc2dc5afc2",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 31
        },
        "src": "class Dwarven extends KronoClass {}",
        "version": "04"
    },
    "jig://ccb55f03d072c7b09fc282b195fed719a8c215da8c4f85b68f3c3c4a9e8215c3_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 1,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "In essence, this weapon is a smaller version of the longsword but longer than a dagger or dirk.",
            "diceCount": 1,
            "diceFaces": 4,
            "displayName": "Shortsword",
            "equippableSlots": [
                0,
                1
            ],
            "hash": "894646cc09f3395529afdf54ee67a68e66571ad72e73ca8fb86764eb787713fd",
            "levelRequired": 0,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                false,
                false,
                true,
                true,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 10
        },
        "src": "class Shortsword extends KronoClass { }",
        "version": "04"
    },
    "jig://4ce9d4ec258ab7fa1a229a6eb21cf46396eddf020055a92b5f9d0259e0493d27_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Hex Action",
            "displayName": "Hex",
            "handle": "hex",
            "hash": "6e41b69c1356bdc60d032674f957cf8d5e7eb6a185be3b03ae474b6421616e4a",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 8
        },
        "src": "class Hex extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {SkillType, StatusEffect} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Hex)}\">${BattleUtils.parseSkillName(SkillType.Hex)}\\n`;\n\n        state.actionLogs.push(BattleUtils.makeStatusEffectActionLog(battle, state, SkillType.Hex, StatusEffect.Hexed, 2, log, false));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://90efb8facfc2c8dc7386cba121c3d282122b8d082eb54bd50789b3cf035e4b0d_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Elven",
            "displayName": "Elven",
            "handle": "elven",
            "hash": "c309c544283c3dd9392d2e2f7b505ec446e856b6bb7f541e01e191f1471b0cb9",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 32
        },
        "src": "class Elven extends KronoClass {}",
        "version": "04"
    },
    "jig://0b62e3b6942367e8f705889ed494b1f729ad977d3aae6626b900a8e83d901b2d_o1": {
        "kind": "code",
        "props": {
            "abilityScoreRequired": [
                7,
                7,
                7
            ],
            "baseDamageType": 2,
            "bonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "critChanceBonus": 1,
            "damageBonus": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "damageReduction": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "A Wizardstaff is a pole weapon, usually a shaft of hardwood. There are many ways to hold and yield a Wizardstaff.",
            "diceCount": 1,
            "diceFaces": 4,
            "displayName": "Wizardstaff",
            "equippableSlots": [
                0
            ],
            "hash": "077b70de841627421a7e02bb35ba551f07f2c9aedef88965bf1b2ee09c4e879c",
            "levelRequired": 1,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "properties": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                true,
                false,
                false
            ],
            "quality": 1,
            "satoshis": 0,
            "type": 17
        },
        "src": "class Wizardstaff extends KronoClass { }",
        "version": "04"
    },
    "jig://3cffd1a80d5b9f81abdcb985796fc3518ecf2085098674a17f835f92181df9f1_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Mark Action",
            "displayName": "Mark",
            "handle": "mark",
            "hash": "86fc78a60992a371fa0c41168e871297f707b55a55e5378c8bbf2f64248f3cd3",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 9
        },
        "src": "class Mark extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {SkillType, StatusEffect} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Mark)}\">${BattleUtils.parseSkillName(SkillType.Mark)}\\n`;\n\n        state.actionLogs.push(BattleUtils.makeStatusEffectActionLog(battle, state, SkillType.Mark, StatusEffect.Marked, 3, log, false));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://201b3c1cdc7aea0e766f7cfa07ce984ce6df5991d25b413bdfea00097c88a744_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Fireball Action",
            "displayName": "Fireball",
            "handle": "fireball",
            "hash": "a5e9466385bbc749ba1985f938a5b11cb56922fd2af613c89fa3073eeb2b7646",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 22
        },
        "src": "class Fireball extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {Ability, DamageType, SkillType} = Constants;\n        const defenderPlayer = battle.battlePlayers[state.playerToAct ? 0 : 1];\n\n        let opponentName = BattleUtils.getOpponentName(battle, state);\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        \n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Fireball)}\">${BattleUtils.parseSkillName(SkillType.Fireball)}\\n<gradient=!log-color> `;\n\n        let attackActionLog = {\n            actionLogMessage: log\n        };\n        attackActionLog.playerIndex = state.playerToAct;\n        attackActionLog.skillType = SkillType.Fireball;\n        attackActionLog.results = [];\n\n        let resultMessage = `${playerName} spell attacks ${opponentName} : `; // goes up\n        var result = Attack.makeResult(battle, state, dice, Ability.Intelligence, Ability.Intelligence, 0, 0, 0, DamageType.Fire, 3, 6, defenderPlayer, resultMessage, SkillType.Fireball);\n\n        attackActionLog.results.push(result);\n        state.actionLogs.push(attackActionLog);\n\n        Attack.processPostAttackStatus(state, battle, state.fighterStates[state.playerToAct], state.fighterStates[state.playerToAct ? 0 : 1], SkillType.Fireball, state.fighterStates[state.playerToAct ? 0 : 1].hp, dice, defenderPlayer);\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://bcf88d73871fc58b23a06b8138d5566d4f7961e1a11a95721cea315e45052b39_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": false,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Meditate Action",
            "displayName": "Meditate",
            "handle": "meditate",
            "hash": "c5959524afe76f34a996856bced03600d625f5812762b64f282c9a1ea852c28c",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 10
        },
        "src": "class Meditate extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {SkillType, StatusEffect} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Meditate)}\">${BattleUtils.parseSkillName(SkillType.Meditate)}\\n`;\n\n        state.actionLogs.push(BattleUtils.makeStatusEffectActionLog(battle, state, SkillType.Meditate, StatusEffect.Meditative, 5, log));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://69ff17c93cba65cf10ae9d9d4194dd8f6753022fc565aa99db2160ac35121d47_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Freeze Action",
            "displayName": "Freeze",
            "handle": "freeze",
            "hash": "0a494d880855e6751cc42003190b820d75de261a386d2318e2996b2e94febef8",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 23
        },
        "src": "class Freeze extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {Ability, DamageType, SkillType} = Constants;\n        const defenderPlayer = battle.battlePlayers[state.playerToAct ? 0 : 1];\n\n        let opponentName = BattleUtils.getOpponentName(battle, state);\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n\n        let log = `${playerName} `;\n\n        let attackActionLog = {\n            actionLogMessage: `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Freeze)}\">${BattleUtils.parseSkillName(SkillType.Freeze)}\\n<gradient=!log-color>`\n        };\n        attackActionLog.playerIndex = state.playerToAct;\n        attackActionLog.skillType = SkillType.Freeze;\n        attackActionLog.results = [];\n\n        let resultMessage = `${playerName} spell attacks ${opponentName} : `; // goes up\n        var result = Attack.makeResult(battle, state, dice, Ability.Intelligence, Ability.Intelligence, 0, 0, 0, DamageType.Cold, 1, 8, defenderPlayer, resultMessage, SkillType.Freeze);\n\n        attackActionLog.results.push(result);\n        state.actionLogs.push(attackActionLog);\n\n        Attack.processPostAttackStatus(state, battle, state.fighterStates[state.playerToAct], state.fighterStates[state.playerToAct ? 0 : 1], SkillType.Freeze, state.fighterStates[state.playerToAct ? 0 : 1].hp, dice, defenderPlayer);\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://bb0892d403e03defc3f009f2415873b58057bb3d908bbee7b37e6fbe3a5ddf5b_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": false,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Phase Shift Action",
            "displayName": "PhaseShift",
            "handle": "phase-shift",
            "hash": "f5adae50fbeee311a2608ca66a7675d76b6122a03d8d3d283f89fa1a68372cbf",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 11
        },
        "src": "class PhaseShift extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {SkillType, StatusEffect} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.PhaseShift)}\">${BattleUtils.parseSkillName(SkillType.PhaseShift)}\\n`;\n\n        state.actionLogs.push(BattleUtils.makeStatusEffectActionLog(battle, state, SkillType.PhaseShift, StatusEffect.Ethereal, 5, log));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://6c4b330cf4cfd964aa9a933af4ea6156258df0c7a59a8fc61564b5c1839c1522_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Gore Action",
            "displayName": "Gore",
            "handle": "gore",
            "hash": "b943a1d10258cd99202fa546f55d0d64de66819f85911e596d7ad95d81ad3605",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 24
        },
        "src": "class Gore extends KronoClass {\n    static run(battle, state, dice, timestamp) {\n        const {SkillType} = Constants;\n        return Attack.run(battle, state, dice, timestamp, 0, 0, SkillType.Gore);\n    }\n}",
        "version": "04"
    },
    "jig://382446c4f8f71c1f058ca0cddf35c3d8759c3a11643a22b5964cb4d99521b2f8_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Pinning Strike Action",
            "displayName": "Pinning Strike",
            "handle": "pinning-strike",
            "hash": "b72639600ad8150f8751a3754c09a042effbcc0850e7e2e9d4f4b39c5ecbe7c3",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 12
        },
        "src": "class PinningStrike extends KronoClass {\n    static run(battle, state, dice, timestamp) {\n        const {SkillType} = Constants;\n        return Attack.run(battle, state, dice, timestamp, 0, 0, SkillType.PinningStrike);\n    }\n}",
        "version": "04"
    },
    "jig://9f291b42b8faa8ee2f5784b05f861fe19239738d65e1513e51f0e3e5cc43d993_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Power Attack Action",
            "displayName": "Power Attack",
            "handle": "power-attack",
            "hash": "d7efb6cb1c31feeae5c2dc4921508415bc1f0741cfbae9a53bfd1877a3331910",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 13
        },
        "src": "class PowerAttack extends KronoClass {\n    static run(battle, state, dice, timestamp) {\n        const {SkillType} = Constants;\n        var improved = battle.battlePlayers[state.playerToAct].fighter.skills.includes(SkillType.ImprovedPowerAttack) ? 10 : 5;\n        return Attack.run(battle, state, dice, timestamp, -5, improved, SkillType.PowerAttack);\n    }\n}",
        "version": "04"
    },
    "jig://1998ce5371018ddc57a274d0948db53db7fc29b2ae64de2b10580951792e611f_o1": {
        "kind": "code",
        "props": {
            "deps": {
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Human",
            "displayName": "Human",
            "handle": "human",
            "hash": "29d1e9ed98d0d920316170f9b29a9db09ca7b0f1d37eb947523253c102e25e23",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 33
        },
        "src": "class Human extends KronoClass {}",
        "version": "04"
    },
    "jig://5cab9cbc29822f044d1c131e89e3a0d9f41c6cf46a7a40d41ea6c40ebdc166c8_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Shock Action",
            "displayName": "Shock",
            "handle": "shock",
            "hash": "530770e39d0ce62012d5b374be22fed20b940d9256d1e88a7389c25ccedb54f1",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 14
        },
        "src": "class Shock extends KronoClass {\n    static run(battle, state, dice) {\n        const {Ability, DamageType, SkillType} = Constants;\n        const defenderPlayer = battle.battlePlayers[state.playerToAct ? 0 : 1];\n        \n        let opponentName = BattleUtils.getOpponentName(battle, state);\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        \n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Shock)}\">${BattleUtils.parseSkillName(SkillType.Shock)}\\n<gradient=!log-color> `;\n\n        let attackActionLog = {\n            actionLogMessage: log\n        };\n        attackActionLog.playerIndex = state.playerToAct;\n        attackActionLog.skillType = SkillType.Shock;\n        attackActionLog.results = [];\n\n        let resultMessage = `${playerName} spell attacks ${opponentName} : `; // goes up\n        var result = Attack.makeResult(battle, state, dice, Ability.Intelligence, Ability.Intelligence, 0, 0, 0, DamageType.Lightning, 1, 6, defenderPlayer, resultMessage, SkillType.Shock);\n\n        attackActionLog.results.push(result);\n        state.actionLogs.push(attackActionLog);\n\n        Attack.processPostAttackStatus(state, battle, state.fighterStates[state.playerToAct], state.fighterStates[state.playerToAct ? 0 : 1], SkillType.Shock, state.fighterStates[state.playerToAct ? 0 : 1].hp, dice, defenderPlayer);\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://6fbe3be0db1a859e187816f2185513d5cf70130f5aaaa0eacbe9d001ddef8b15_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Lightning Bolt Action",
            "displayName": "Lightning Bolt",
            "handle": "lightning-bolt",
            "hash": "01a5dd2b9a19f19f81b524fc4734dc3f63d10a8b19841e4b8132eaca662f71d3",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 25
        },
        "src": "class LightningBolt extends KronoClass {\n    static run(battle, state, dice, ts) {\n        const {Ability, DamageType, SkillType} = Constants;\n        const defenderPlayer = battle.battlePlayers[state.playerToAct ? 0 : 1];\n\n        let opponentName = BattleUtils.getOpponentName(battle, state);\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.LightningBolt)}\">${BattleUtils.parseSkillName(SkillType.LightningBolt)}\\n<gradient=!log-color> `;\n\n        let attackActionLog = {\n            actionLogMessage: log\n        };\n        attackActionLog.playerIndex = state.playerToAct;\n        attackActionLog.skillType = SkillType.LightningBolt;\n        attackActionLog.results = [];\n\n        let resultMessage = `${playerName} spell attacks ${opponentName} : `; // goes up\n        var result = Attack.makeResult(battle, state, dice, Ability.Intelligence, Ability.Intelligence, 0, 0, 0, DamageType.Lightning, 1, 12, defenderPlayer, resultMessage, SkillType.LightningBolt);\n\n        attackActionLog.results.push(result);\n        state.actionLogs.push(attackActionLog);\n\n        Attack.processPostAttackStatus(state, battle, state.fighterStates[state.playerToAct], state.fighterStates[state.playerToAct ? 0 : 1], SkillType.LightningBolt, state.fighterStates[state.playerToAct ? 0 : 1].hp, dice, defenderPlayer);\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://eeaba59f685867d4ba186f2783d924b58916c5b1a1a6424f354c2d6d9b26849f_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Smite Action",
            "displayName": "Smite",
            "handle": "smite",
            "hash": "2e34a097d2af0d87e66dd4806df238a9e1c60876b931fd5ebb1ee8ad9b56aa73",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 15
        },
        "src": "class Smite extends KronoClass {\n    static run(battle, state, dice) {\n        const {DamageType, SkillType} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Smite)}\">${BattleUtils.parseSkillName(SkillType.Smite)}\\n`;\n\n        const defenderState = state.fighterStates[state.playerToAct ? 0 : 1];\n        const defenderPlayer = battle.battlePlayers[state.playerToAct ? 0 : 1];\n\n        var weapon = battle.battlePlayers[state.playerToAct].mainhand;\n        state.actionLogs.push(BattleUtils.directDamage(battle, state, dice, weapon.diceCount, weapon.diceFaces, defenderState, defenderPlayer, DamageType.Warfare, SkillType.Smite, log));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://f0300c60d544eb13b8e56fd6e6378259ee212fb1720d3fd673460160207038e2_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Lock and Load Action",
            "displayName": "Lock And Load",
            "handle": "lock-and-load",
            "hash": "0264204ab97e3c9e6b6b8e9b6a103b254bba9250e2bce00c4663137b9a763f0b",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 26
        },
        "src": "class LockAndLoad extends KronoClass {\n    static run(battle, state, dice, timestamp) {\n        const {SkillType} = Constants;\n        return Attack.run(battle, state, dice, timestamp, 0, 0, SkillType.LockAndLoad);\n    }\n}",
        "version": "04"
    },
    "jig://5679399006dd0505d2c188cbdd68692f4bc86aced9f75536d186d9c3cfd1d1b3_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Sneak Attack Action",
            "displayName": "Sneak Attack",
            "handle": "sneak-attack",
            "hash": "a4f75730647b57d83d8dd4e98af525ed98ed8cce16f3203a27dc727f41386395",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 16
        },
        "src": "class SneakAttack extends KronoClass {\n    static run(battle, state, dice, timestamp) {\n        const {SkillType} = Constants;\n        return Attack.run(battle, state, dice, timestamp, 0, 0, SkillType.SneakAttack);\n    }\n}",
        "version": "04"
    },
    "jig://8f3ee730e89b45fc8f85b4fd16ae6b9c36a74f2fb30fc80876e58249cc606d8f_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "Attack": {
                    "$jig": "b40ff501e988de6820080d754c619866cb9c7516ea63544d77c347f0e29a6aea_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Stun Action",
            "displayName": "Stun",
            "handle": "stun",
            "hash": "19325f9f9d14c80b0c091153036448d2fc1848b2c6baae69df72821071de9228",
            "isAttackAction": true,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 17
        },
        "src": "class Stun extends KronoClass {\n    static run(battle, state, dice, timestamp) {\n        const {SkillType} = Constants;\n        return Attack.run(battle, state, dice, timestamp, 0, 0, SkillType.Stun);\n    }\n}",
        "version": "04"
    },
    "jig://8f6aa0825ce476c1174ef2faaead20add8642756b12b79f93a4772350088d235_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": false,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Second Wind Action",
            "displayName": "Second Wind",
            "handle": "second-wind",
            "hash": "53484b3bc77cd0ed1c771e9290054b8668cde0df161ddce60a17f4b88c5678e1",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 27
        },
        "src": "class SecondWind extends KronoClass {\n    static run(battle, state, dice) {\n        const {Ability, SkillType} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.SecondWind)}\">${BattleUtils.parseSkillName(SkillType.SecondWind)}\\n`;\n\n        state.actionLogs.push(Heal.apply(battle, state, dice, 1, 10, Ability.Strength, log));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    },
    "jig://ff05e7e4ebca236e9e4c20bf6fcca32054da345119f6b13aeb66b35e7332016e_o1": {
        "kind": "code",
        "props": {
            "affectsOpponent": true,
            "deps": {
                "BattleUtils": {
                    "$jig": "fb6b8587fe33cec652ff8432c1b72555d2782fdfab46c68736f8c6f56828dfb6_o1"
                },
                "Constants": {
                    "$jig": "c43ed794ca6fd38a6e864053cb8f958b61e57220b7794ea613337158ece54f0a_o1"
                },
                "KronoClass": {
                    "$jig": "af8d032bac9d0c357445afc064470a917bf0acf06ff453de99d5c9b35a50b3c4_o1"
                }
            },
            "description": "Taunt Action",
            "displayName": "Taunt",
            "handle": "taunt",
            "hash": "2819cd81f14a1d82ce81dae47b0f2115abba202603334cee01d2d403cabe7aa1",
            "isAttackAction": false,
            "location": "_o1",
            "nonce": 1,
            "origin": "_o1",
            "owner": "modKb3owVRRPHXqLgg4BnhiQFEKXsPNw15",
            "requiredLevel": 0,
            "satoshis": 0,
            "skillType": 18
        },
        "src": "class Taunt extends KronoClass {\n    static run(battle, state, dice) {\n        const {SkillType} = Constants;\n        var playerName = BattleUtils.getPrettifiedPlayerName(battle, state);\n        let log = `${playerName} uses <sprite name=\"${BattleUtils.parseSkillName(SkillType.Taunt)}\">${BattleUtils.parseSkillName(SkillType.Taunt)}\\n`;\n\n        state.actionLogs.push(BattleUtils.makeStatusEffectActionLog(battle, state, SkillType.Taunt, StatusEffect.Taunted, 3, log, false));\n\n        return BattleUtils.endTurn(battle, state, dice);\n    }\n}",
        "version": "04"
    }
}